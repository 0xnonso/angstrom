/**

Generated by the following Solidity interface...
```solidity
interface Angstrom {
    type BalanceDelta is int256;
    type Currency is address;
    struct ModifyLiquidityParams {
        int24 tickLower;
        int24 tickUpper;
        int256 liquidityDelta;
        bytes32 salt;
    }
    struct PadeEncoded {
        bytes data;
    }
    struct PoolKey {
        Currency currency0;
        Currency currency1;
        uint24 fee;
        int24 tickSpacing;
        address hooks;
    }

    error AssetsOutOfOrderOrNotUnique();
    error Expired();
    error FillingTooLittle();
    error FillingTooMuch();
    error InvalidPoolKey();
    error InvalidSignature();
    error LimitViolated();
    error MissingHookPermissions(uint160);
    error NonceReuse();
    error NotController();
    error NotNode();
    error NotUniswap();
    error OnlyOncePerBlock();
    error OrderAlreadyExecuted();
    error OutOfBoundRead(uint256 arrayIndex, uint256 arrayLength);
    error OutOfOrderOrDuplicatePairs();
    error Overflow();
    error ReaderNotAtEnd();
    error WrongEndLiquidity(uint128, uint128);

    constructor(address uniV4PoolManager, address governance);

    function afterRemoveLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, BalanceDelta, bytes memory) external pure returns (bytes4, BalanceDelta);
    function beforeAddLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, bytes memory) external view returns (bytes4);
    function beforeInitialize(address, PoolKey memory poolKey, uint160) external view returns (bytes4);
    function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
    function execute(PadeEncoded memory encoded) external;
    function govToggleNodes(address[] memory nodes) external;
    function govUpdateHalfSpread(uint96 newHalfSpreadRay) external;
    function halfSpreadRay() external view returns (uint96);
    function invalidateNonce(uint64 nonce) external;
    function lastBlockUpdated() external view returns (uint64);
    function unlockCallback(bytes memory data) external returns (bytes memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "uniV4PoolManager",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "governance",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "afterRemoveLiquidity",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct IPoolManager.ModifyLiquidityParams",
        "components": [
          {
            "name": "tickLower",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "tickUpper",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "liquidityDelta",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "salt",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "",
        "type": "int256",
        "internalType": "BalanceDelta"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      },
      {
        "name": "",
        "type": "int256",
        "internalType": "BalanceDelta"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "beforeAddLiquidity",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "",
        "type": "tuple",
        "internalType": "struct IPoolManager.ModifyLiquidityParams",
        "components": [
          {
            "name": "tickLower",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "tickUpper",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "liquidityDelta",
            "type": "int256",
            "internalType": "int256"
          },
          {
            "name": "salt",
            "type": "bytes32",
            "internalType": "bytes32"
          }
        ]
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "beforeInitialize",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "poolKey",
        "type": "tuple",
        "internalType": "struct PoolKey",
        "components": [
          {
            "name": "currency0",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "currency1",
            "type": "address",
            "internalType": "Currency"
          },
          {
            "name": "fee",
            "type": "uint24",
            "internalType": "uint24"
          },
          {
            "name": "tickSpacing",
            "type": "int24",
            "internalType": "int24"
          },
          {
            "name": "hooks",
            "type": "address",
            "internalType": "contract IHooks"
          }
        ]
      },
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "eip712Domain",
    "inputs": [],
    "outputs": [
      {
        "name": "fields",
        "type": "bytes1",
        "internalType": "bytes1"
      },
      {
        "name": "name",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "version",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "chainId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "verifyingContract",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "salt",
        "type": "bytes32",
        "internalType": "bytes32"
      },
      {
        "name": "extensions",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "execute",
    "inputs": [
      {
        "name": "encoded",
        "type": "tuple",
        "internalType": "struct PadeEncoded",
        "components": [
          {
            "name": "data",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "govToggleNodes",
    "inputs": [
      {
        "name": "nodes",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "govUpdateHalfSpread",
    "inputs": [
      {
        "name": "newHalfSpreadRay",
        "type": "uint96",
        "internalType": "uint96"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "halfSpreadRay",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint96",
        "internalType": "uint96"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "invalidateNonce",
    "inputs": [
      {
        "name": "nonce",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "lastBlockUpdated",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint64",
        "internalType": "uint64"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "unlockCallback",
    "inputs": [
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "error",
    "name": "AssetsOutOfOrderOrNotUnique",
    "inputs": []
  },
  {
    "type": "error",
    "name": "Expired",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FillingTooLittle",
    "inputs": []
  },
  {
    "type": "error",
    "name": "FillingTooMuch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidPoolKey",
    "inputs": []
  },
  {
    "type": "error",
    "name": "InvalidSignature",
    "inputs": []
  },
  {
    "type": "error",
    "name": "LimitViolated",
    "inputs": []
  },
  {
    "type": "error",
    "name": "MissingHookPermissions",
    "inputs": [
      {
        "name": "",
        "type": "uint160",
        "internalType": "uint160"
      }
    ]
  },
  {
    "type": "error",
    "name": "NonceReuse",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotController",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotNode",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NotUniswap",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OnlyOncePerBlock",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OrderAlreadyExecuted",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OutOfBoundRead",
    "inputs": [
      {
        "name": "arrayIndex",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "arrayLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "OutOfOrderOrDuplicatePairs",
    "inputs": []
  },
  {
    "type": "error",
    "name": "Overflow",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ReaderNotAtEnd",
    "inputs": []
  },
  {
    "type": "error",
    "name": "WrongEndLiquidity",
    "inputs": [
      {
        "name": "",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "",
        "type": "uint128",
        "internalType": "uint128"
      }
    ]
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod Angstrom {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610160604052348015610010575f80fd5b506040516156bc3803806156bc83398101604081905261002f91610175565b306080524660a052808260608061007a6040805180820182526008815267416e677374726f6d60c01b60208083019190915282518084019093526002835261763160f01b9083015291565b815160209283012081519183019190912060c082905260e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152938401929092529082015246606082015230608082015260a090206101005250506001600160a01b0316610120526100f5610900610114565b6001600160a01b03166101405261010d612080610114565b50506101a6565b806001600160a01b03168130166001600160a01b03161461015757604051630ea7064560e31b81526001600160a01b038216600482015260240160405180910390fd5b50565b80516001600160a01b0381168114610170575f80fd5b919050565b5f8060408385031215610186575f80fd5b61018f8361015a565b915061019d6020840161015a565b90509250929050565b60805160a05160c05160e05161010051610120516101405161546a6102525f395f818161032e015261065901525f8181610294015281816103ef015281816105610152818161075a015281816109d601528181610b3a01528181610fea015281816110d7015281816110fe015281816131f90152818161384d01528181613cdf015261426701525f611e4501525f611eff01525f611ed901525f611e8901525f611e66015261546a5ff3fe608060405234801561000f575f80fd5b50600436106100c4575f3560e01c806384b0196e1161007d57806397125bee1161005857806397125bee14610207578063c6a98eb914610248578063dc98354e1461025b575f80fd5b806384b0196e146101795780638db2b6521461019457806391dd7346146101e7575f80fd5b80632a6330cf116100ad5780632a6330cf14610126578063577db24d14610139578063760f5f271461014c575f80fd5b8063116a5550146100c8578063259982e5146100dd575b5f80fd5b6100db6100d63660046144d9565b61026e565b005b6100f06100eb366004614585565b61027b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100db6101343660046145fc565b610316565b6100db610147366004614627565b6103d0565b6007546101609067ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161011d565b61018161049f565b60405161011d97969594939291906146aa565b6101af6101a2366004614769565b5f80965096945050505050565b604080517fffffffff00000000000000000000000000000000000000000000000000000000909316835260208301919091520161011d565b6101fa6101f53660046147ea565b610547565b60405161011d9190614829565b60075461022b906801000000000000000090046bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff909116815260200161011d565b6100db61025636600461483b565b610641565b6100f06102693660046148ac565b610741565b6102783382610847565b50565b5f3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102eb576040517ff832861400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f259982e50000000000000000000000000000000000000000000000000000000095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610385576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546bffffffffffffffffffffffff90921668010000000000000000027fffffffffffffffffffffffff000000000000000000000000ffffffffffffffff909216919091179055565b6103d8610882565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166348c8949161041e83806148f3565b6040518363ffffffff1660e01b815260040161043b929190614954565b5f604051808303815f875af1158015610456573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261049b91908101906149cd565b5050565b7f0f000000000000000000000000000000000000000000000000000000000000006060805f808083610535604080518082018252600881527f416e677374726f6d0000000000000000000000000000000000000000000000006020808301919091528251808401909352600283527f76310000000000000000000000000000000000000000000000000000000000009083015291565b97989097965046955030945091925090565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105b8576040517ff832861400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825f6105c382610955565b90925090505f6105d28361097c565b90935090506105e082610999565b6105ea8383610af1565b92506105f68383610d3b565b9250610603838383610de4565b925061061183836001610ebf565b925061061c82610f2a565b61062783878761119c565b5050604080515f8152602081019091529150505b92915050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146106b0576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181101561073c575f8383838181106106cd576106cd614abd565b90506020020160208101906106e29190614aea565b73ffffffffffffffffffffffffffffffffffffffff165f90815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055506001016106b2565b505050565b5f3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146107b1576040517ff832861400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603c6107c36080850160608601614b05565b60020b1415806107e757505f6107df6060850160408601614b25565b62ffffff1614155b1561081e576040517fc256622b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fdc98354e000000000000000000000000000000000000000000000000000000009392505050565b80600c5263daa050e9600452815f52601f600c20600160ff83161b8082541881811661087a57638cb888725f526004601cfd5b909155505050565b6007544367ffffffffffffffff909116036108c9576040517fd8a6b89b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f9081526006602052604090205460ff16610911576040517f5cd26b6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61091a436111b9565b600780547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055565b5f805f6109638460446111d6565b90945090508361097282611210565b9250925050915091565b5f805f61098a8460246111d6565b909450905083610972826112ac565b5f6109a382611346565b90505f5b8181101561073c575f6109ba8483611351565b90505f6109c6826113a4565b90505f6109d2836113cc565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630b0d9c09610a2d8373ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018590526064015f604051808303815f87803b158015610a9d575f80fd5b505af1158015610aaf573d5f803e3d5ffd5b50505073ffffffffffffffffffffffffffffffffffffffff82165f908152600160205260409020610ae19150836113d7565b5050600190920191506109a79050565b5f80610afc846113ef565b90945090505b808414610d335760148401935f8080610b1b8488611447565b919450925090505f73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f3cd914c610bec3087876040805160a080820183525f80835260208301819052828401819052606083018190526080830152825190810190925290808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff90811682525f6020830152603c6040830152861660609091015290509392505050565b60405180606001604052808615158152602001610c10610c0b8b6114d4565b6114e0565b815260200186610c345773fffd8963efd1fc6a506488495d951d5263988d25610c3b565b6401000276a45b73ffffffffffffffffffffffffffffffffffffffff168152506040518363ffffffff1660e01b8152600401610c71929190614b47565b6020604051808303815f875af1158015610c8d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb19190614c11565b9050610ced610cc08260801d90565b73ffffffffffffffffffffffffffffffffffffffff86165f90815260016020526040902090600f0b611541565b50610d28610cfb82600f0b90565b73ffffffffffffffffffffffffffffffffffffffff85165f90815260016020526040902090600f0b611541565b505050505050610b02565b509192915050565b5f80610d46846113ef565b90945090505f610d54611570565b60408051610120810182525f60208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091527fd29cd8ad130638ce44ea185648d2712345e8e456fef8153328ee40916df2790e81529091505b828614610dda57610dd3868284886115ba565b9550610dc0565b5093949350505050565b5f80610dee611570565b60408051610160810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052919250610e51876113ef565b90975090505f6008555b808714610eb45760088054610ea0917f5b25735d0000000000000000000000000000000000000000000000000000000091905f610e9783614c55565b919050556117a5565b610ead8783858989611839565b9650610e5b565b509495945050505050565b5f80610eca856113ef565b90955090505b808514610f21575f80610ee38787611a8b565b73ffffffffffffffffffffffffffffffffffffffff82165f9081526020899052604090209299509093509150610f199082611bf7565b505050610ed0565b50929392505050565b5f610f3482611346565b90505f5b8181101561073c575f610f4b8483611351565b90505f610f57826113cc565b90505f610f6383611c06565b90505f610f6f84611c12565b9050610fa8610f7e8284614c8c565b73ffffffffffffffffffffffffffffffffffffffff85165f90815260016020526040902090611bf7565b5073ffffffffffffffffffffffffffffffffffffffff83165f9081526020819052604081208054849290610fdd908490614c8c565b9091555050801561118c577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a58411946110418573ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015f604051808303815f87803b1580156110a4575f80fd5b505af11580156110b6573d5f803e3d5ffd5b506110fc9250505073ffffffffffffffffffffffffffffffffffffffff84167f000000000000000000000000000000000000000000000000000000000000000083611c1e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b81526004016020604051808303815f875af1158015611166573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118a9190614c11565b505b505060019092019150610f389050565b8082018084146111b3576301842f8c5f526004601cfd5b50505050565b5f6801000000000000000082106111d2576111d2611c67565b5090565b5f805f6111e2856113ef565b90955090505f846111f38784614c9f565b6111fd9190614cb2565b9193505060201b841790505b9250929050565b5f8061121b83611346565b90505f805b82811015610f21575f61123b6112368784611351565b6113cc565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16116112a2576040517f80f11acf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9150600101611220565b5f806112b783611346565b9050805f036112c7575090919050565b5f6112da6112d58583611c74565b611c8a565b905060015b82811015610f21575f6112f56112d58784611c74565b90508263ffffffff168163ffffffff161161133c576040517ff35f939900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b91506001016112df565b5f61063b8260201c90565b5f61137460405180606001604052806033815260200161538d6033913983611c95565b61138082845b90611d26565b61138b604483614cea565b63ffffffff84165b61139d9190614c8c565b9392505050565b5f6113b46014835b013560801c90565b6fffffffffffffffffffffffffffffffff1692915050565b5f813560601c61063b565b5f61063b6113e683855c614c8c565b91508382611d7b565b5f8060408051808201909152600f81527f7532342f4c6973742e6c656e67746800000000000000000000000000000000006020820152611433908490600390611d82565b5050600380820192823560e81c9092010190565b5f805f8061146561123661145a88611e28565b879061ffff16611351565b90505f61148261123661147789611e37565b889061ffff16611351565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16109250826114c15780826114c4565b81815b9098909750929550919350505050565b5f6113b46004836113ac565b5f7f800000000000000000000000000000000000000000000000000000000000000082111561153b576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505f0390565b815c818103908082105f84131461155f5763c9654ed45f526004601cfd5b6115698483611d7b565b5092915050565b5f6115b561157c611e43565b60408051604281019091527f19010000000000000000000000000000000000000000000000000000000000008152600281019190915290565b905090565b5f806115c586611f3b565b600181161515606088015290965090506115de86611f8e565b6fffffffffffffffffffffffffffffffff166020870152955061160086611f8e565b6fffffffffffffffffffffffffffffffff16604087015295505f61162387611fe1565b90975090506116396112368561ffff8416611351565b73ffffffffffffffffffffffffffffffffffffffff1660808701525f61165e88611fe1565b90985090506116746112368661ffff8416611351565b73ffffffffffffffffffffffffffffffffffffffff1660a08801525050600281166116a057855f6116a9565b6116a986612034565b73ffffffffffffffffffffffffffffffffffffffff1660c087015295505f6116d5876004841615612087565b60e089015290975090505f61170c6117008867ffffffffffffffff4316610100820152610120902090565b60228801526042872090565b905061171781612132565b5f6080841661172f5761172a8983612183565b611739565b61173989836121f2565b90995090506117488382612236565b6080880151602089015161176391839160018816151561227e565b5f6117738960c0015183811c1890565b9050611797818a60a001518b604001516117928960ff16600116151590565b61232c565b509798975050505050505050565b5f805f805f6117e2565b5f5b60208110156117ca5782811a156117ca576001016117b1565b80825260031b6101000391821c90911b602090910152565b5f519450602051935060405192506060519150608051905063b60e72cc5f526040602052856040526118158760606117af565b611821601c60846123c7565b5f949094526020929092526040526060526080525050565b5f8061184487611f3b565b909750905061187e7f202076617269616e743a202573000000000000000000000000000000000000006118798360ff166123d9565b612491565b6118888682612504565b60018116151560808701525f806118a6858a886008871615156125b7565b73ffffffffffffffffffffffffffffffffffffffff91821660c08d0152911660a08b015290995091506118da90508861264e565b6060890181905290985081101561191d576040517f8e1edfa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002821661192c57875f611935565b61193588612034565b73ffffffffffffffffffffffffffffffffffffffff1660e089015297505f611961896004851615612087565b6101008b01529099509050611977888a856126a7565b6007549099505f9081906119ac908b908d90889088906801000000000000000090046bffffffffffffffffffffffff166126eb565b919c50925090506119bd8a866129bc565b5f6119c98b878c612a11565b90505f608087166119e3576119de8d83612183565b6119ed565b6119ed8d836121f2565b909d5090506010871615611a2457611a108c610140015164ffffffffff16612a33565b611a1f818d6101200151610847565b611a2d565b611a2d82612132565b611a378582612236565b60a08c0151611a4e9082908660018b16151561227e565b5f611a5e8d60e0015183811c1890565b9050611a79818e60c00151866117928c60ff16600116151590565b509b9c9b505050505050505050505050565b5f8080611aaf60405180606001604052806029815260200161510860299139612a6d565b5f80611ad26040518060600160405280602b8152602001615362602b9139612a6d565b5f611adc88611fe1565b90985090505f611aeb89611fe1565b9099509050611b11604051806060016040528060388152602001614f8e60389139612a6d565b611b226112368961ffff8516611351565b9350611bcb611bc43086611b3d6112368d61ffff8816611351565b6040805160a080820183525f80835260208301819052828401819052606083018190526080830152825190810190925290808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff90811682525f6020830152603c6040830152861660609091015290509392505050565b60a0902090565b5f818152600560205260409020909350611be690848b612afc565b909a94995097509295505050505050565b5f61063b6113e683855c614c9f565b5f6113b46024836113ac565b5f6113b46034836113ac565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716611c5e576390b8ec185f526004601cfd5b5f603452505050565b6335278d125f526004601cfd5b5f611c7f828461137a565b61138b602483614cea565b5f813560e01c61063b565b61049b8282604051602401611cab929190614d01565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052612d51565b5f611d318360201c90565b905080821061073c576040517fbc5f997c00000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044015b60405180910390fd5b80825d5050565b823560088302610100031c6111b3611dc97f20000000000000000000000000000000000000000000000000000000000000006006611dc260ff8816612d5a565b9190612d65565b611dd66003875b90612e2b565b604051602001611de7929190614d39565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905283611e238460ff8816612e2b565b612e6f565b5f61063b81835b013560f01c90565b5f61063b600283611e2f565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f0000000000000000000000000000000000000000000000000000000000000000461416611f385750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a0902090565b90565b5f8060408051808201909152600f81527f4f7264657256617269616e744d617000000000000000000000000000000000006020820152611f7f908490600190611d82565b50506001810191903560f81c90565b5f8060408051808201909152600481527f75313238000000000000000000000000000000000000000000000000000000006020820152611fd2908490601090611d82565b50506010810191903560801c90565b5f8060408051808201909152600381527f75313600000000000000000000000000000000000000000000000000000000006020820152612025908490600290611d82565b50506002810191903560f01c90565b5f8060408051808201909152600781527f61646472657373000000000000000000000000000000000000000000000000006020820152612078908490601490611d82565b50506014810191903560601c90565b5f807fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708361212857843560e81c6003860195506040516014606403810182810160405282888237828120935050818701965060448101517f7407905c00000000000000000000000000000000000000000000000000000000825260406024830152601483039250826044830152606483018160201b178260c01b1794505050505b8492509250925092565b5f818152600360205260409020805c15612178576040517f8a2ef11600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61049b816001611d7b565b5f8061218e84612034565b9094509050365f61219e86612f02565b919750925090506121b183868484613009565b6121e7576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509394909350915050565b5f806040518381525f6020820152604185603f8301376041850194506020600160808360015afa519150503d61222f57638baa579f5f526004601cfd5b9293915050565b811561049b5763ffffffff82168260c01c8260048201528360201c60205f84845f855af1925050506324a2e44b5f5114601f3d1116811661073c5763f959fdae5f526004601cfd5b73ffffffffffffffffffffffffffffffffffffffff83165f90815260016020526040902082906122ae90826113d7565b5081156123035773ffffffffffffffffffffffffffffffffffffffff8086165f908152600260209081526040808320938816835292905290812080548392906122f8908490614c9f565b909155506123259050565b61232573ffffffffffffffffffffffffffffffffffffffff851686308461304e565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff83165f908152600160205260409020829061235c9082611bf7565b5081156123a65773ffffffffffffffffffffffffffffffffffffffff8086165f908152600260209081526040808320938816835292905290812080548392906122f8908490614c8c565b61232573ffffffffffffffffffffffffffffffffffffffff85168683611c1e565b6130a6806111b3848463ffffffff8416565b5f601082161561243a57602082161561241357507f5374616e64696e675f5061727469616c00000000000000000000000000000000919050565b507f5374616e64696e675f4578616374000000000000000000000000000000000000919050565b602082161561246a57507f466c6173685f5061727469616c00000000000000000000000000000000000000919050565b507f466c6173685f4578616374000000000000000000000000000000000000000000919050565b5f80516020805160408051606080516080805160a05160c051634b5c4277909b529786905294529596939591949193906124cc908a906117af565b6124d78860a06117af565b6124e3601c60c46123c7565b5f9690965260209490945260409290925260605260805260a05260c0525050565b602081161561256257601081161561253c57507fa9e5294d444fbaeb5ca05f2b24c5d8294410f31413048e445d881e2ef69e60009052565b507febd5091c396f79056e45455f4a93bbb016c217314bb2356b22d1c13833ac88619052565b601081161561259157507fef0cce88fda04ab3f84618823372cf76f64b4511ce8c79630eabc29ebc9b968f9052565b507f5b9d49cfed48f8c9d1a863f61c2479c579fa299c25a33211fc857390cecce6d49052565b5f805f805f6125c588611fe1565b90985061ffff1690505f6125d98a83611c74565b90505f6125e5826130bd565b90505f6126026112366125f785611e28565b8c9061ffff16611351565b90505f61261f61123661261486611e37565b8d9061ffff16611351565b90508961262e57808284612639565b8181612639856130c8565b9d9f919e509c9b509950505050505050505050565b5f8061269b60206040518060400160405280600481526020017f753235360000000000000000000000000000000000000000000000000000000081525085611d829092919063ffffffff16565b50506020810191903590565b5f60108216156126d15760088361013886013760056008840161015b860137600d830192506126e3565b67ffffffffffffffff43166101208501525b509092915050565b5f80808060208716156127e3575f806127038a611f8e565b909a506fffffffffffffffffffffffffffffffff1691506127238a611f8e565b909a506fffffffffffffffffffffffffffffffff1690506127438a611f8e565b60208d0184905260408d01839052909a506fffffffffffffffffffffffffffffffff169250818310156127a2576040517fc4daf00300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808311156127dc576040517f4418233100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050612824565b6127ec88611f8e565b9098506fffffffffffffffffffffffffffffffff16905060408716612811575f612814565b60015b60ff1660208a0152604089018190525b61284e7f70726963653a2025323765000000000000000000000000000000000000000000876117a5565b6040871615158061286157506020871615155b1561290d579150816128937f7175616e7469747920696e3a2025313865000000000000000000000000000000846117a5565b61289d86846130ea565b91506128c97f7175616e74697479206f7574202870726520666565293a202531386500000000836117a5565b6128dc826128d781886130f7565b613102565b91506129087f7175616e74697479206f75742028706f737420666565293a2025313865000000836117a5565b6129af565b90508061293a7f7175616e74697479206f75743a20253138650000000000000000000000000000836117a5565b612944868361310d565b92506129707f7175616e7469747920696e202870726520666565293a20253138650000000000846117a5565b6129838361297e81886130f7565b613118565b92506129af7f7175616e7469747920696e2028706f737420666565293a202531386500000000846117a5565b5095979096509350505050565b5f601082166129cd576101406129d1565b6101605b9050826129fe7f7374727563744c656e6774683a20257300000000000000000000000000000000836117a5565b6111b381612a0c8482614c8c565b613120565b5f612a2b612a1f8585613169565b60228401526042832090565b949350505050565b80421115610278576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027881604051602401612a819190614829565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052612d51565b5f80612b1f6040518060600160405280602a815260200161504d602a9139612a6d565b5f80612b4260405180606001604052806023815260200161513160239139612a6d565b5f612b4c86613189565b9096509050612b736040518060600160405280603081526020016152a16030913988611c95565b5f612b7d886131db565b9050612ba4604051806060016040528060268152602001615027602691398260020b613228565b612bc560405180606001604052806030815260200161517a60309139612a6d565b5f612bcf88611f8e565b9098509050612bf5604051806060016040528060378152602001614fc660379139612a6d565b5f612bff896113ef565b9099509050612c256040518060600160405280602a8152602001614ffd602a9139612a6d565b8260020b8460020b1315612c4757612c428b848b878e87876132b9565b612c56565b612c568b848b878e8787613598565b929b509098509650945050505050612c8560405180608001604052806043815260200161531f60439139612a6d565b5f612c8f87613832565b9050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1614612d0a576040517f6429cfd20000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff808416600483015282166024820152604401611d72565b612d2b6040518060600160405280603b81526020016150cd603b9139612a6d565b82886001015f828254612d3e9190614c8c565b9091555086955050505050935093915050565b61027881613873565b606061063b82613893565b825160609082811015610f2157604080517fff00000000000000000000000000000000000000000000000000000000000000861660208201528151600181830301815260219091019091525f612dbb8386614c9f565b90505b80600116600103612dee578187604051602001612ddc929190614dc9565b60405160208183030381529060405296505b600181901c90508182604051602001612e08929190614dc9565b60405160208183030381529060405291505f8111612dbe57509495945050505050565b6060612e3783836138f3565b805161307882526002017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9091019081529392505050565b61073c838383604051602401612e8793929190614ddd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2ced7cef00000000000000000000000000000000000000000000000000000000179052612d51565b5f368160408051808201909152601081527f7532342f62797465732e6c656e677468000000000000000000000000000000006020820152612f47908590600390611d82565b6040805160608101909152603a808252853560e81c80870160039081019390880192612fb091906152676020830139612fa57f20000000000000000000000000000000000000000000000000000000000000006006611dc286612d5a565b611e23600387611dd0565b612fee82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061399792505050565b5050505050813560e81c808301600390810194930192909150565b5f604051631626ba7e60e01b80825285600483015260248201604081528460448401528486606485013760208160648701858b5afa9051909114169695505050505050565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f5114171661309957637939f4245f526004601cfd5b5f60605260405250505050565b5f8082846a636f6e736f6c652e6c6f675afa505050565b5f600482013561063b565b5f61063b82760a70c3c40a64e6c51999090b65f67d9240000000000000614cb2565b5f61139d83835b90613a26565b5f61139d82846130f1565b5f61139d8284614c9f565b5f61139d8284613a48565b5f8183611393565b815b8181101561073c575f613136826020614c8c565b9050828111156131435750815b613156826131518184614c9f565b613a60565b50613162602082614c8c565b9050613122565b5f806010831661317b5761014061317f565b6101605b9093209392505050565b5f806040805180820190915260038082527f693234000000000000000000000000000000000000000000000000000000000060208301526131cc91859190611d82565b50506003810191903560e81d90565b5f61063b61321f73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001684613c0a565b60a01c60020b90565b61049b828260405160240161323e929190614d01565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167faf7faa3800000000000000000000000000000000000000000000000000000000179052612d51565b5f8080806132de60405180606001604052806026815260200161515460269139612a6d565b60015f805b82156134785761330a6040518060600160405280602b81526020016150a2602b9139612a6d565b5f888d146133335761331b8d611f8e565b909d506fffffffffffffffffffffffffffffffff1690505b61333d8184614c8c565b925061335b818b6fffffffffffffffffffffffffffffffff16613ca9565b6133659083614c8c565b9150818f5f8e60020b60020b81526020019081526020015f205f82825461338c9190614c8c565b909155506133a590508a6133a08d8f613cc4565b613d06565b99506133d56040518060600160405280602581526020016153fe60259139826133d08f60020b613d20565b613d2b565b6134146040518060400160405280601e81526020017f5b52657761726473557064617465725d204e657720746f74616c3a202573000081525084611c95565b6134426040518060600160405280603a81526020016151aa603a913961343c8e60020b613d20565b84613dbe565b61347660405180606001604052806037815260200161520a603791398b6fffffffffffffffffffffffffffffffff16611c95565b505b6134828a8c613e51565b9b50925060028b810b908e900b126132e3576134b56040518060600160405280602b8152602001615077602b9139612a6d565b878c14613556576134dd6040518060600160405280603b8152602001615423603b9139612a6d565b5f6134e78d611f8e565b909d506fffffffffffffffffffffffffffffffff1690506135206040518060600160405280602681526020016152416026913982611c95565b61352a8184614c8c565b9250613548818b6fffffffffffffffffffffffffffffffff16613ca9565b6135529083614c8c565b9150505b6135796040518060600160405280603e81526020016153c0603e91398383613eb3565b6135838c89613f46565b9a9d909c50999a509598975050505050505050565b5f8080806135bd6040518060600160405280602681526020016151e460269139612a6d565b60015f806136006040518060400160405280601a81526020017f5b52657761726473557064617465725d20746f74616c3a20257300000000000081525083611c95565b61366a6040518060800160405280604e81526020016152d1604e9139604080518615156025811882019092525f815265011213191665909102650566616c73651860058201526136528e60020b613d20565b8c6fffffffffffffffffffffffffffffffff16613f7f565b82156137f4576136916040518060600160405280602b81526020016150a2602b9139612a6d565b5f888d146136ba576136a28d611f8e565b909d506fffffffffffffffffffffffffffffffff1690505b6136c48184614c8c565b92506136e2818b6fffffffffffffffffffffffffffffffff16613ca9565b6136ec9083614c8c565b9150818f5f8e60020b60020b81526020019081526020015f205f8282546137139190614c8c565b9091555061372c90508a6137278d8f613cc4565b614014565b99506137576040518060600160405280602581526020016153fe60259139826133d08f60020b613d20565b6137966040518060400160405280601e81526020017f5b52657761726473557064617465725d204e657720746f74616c3a202573000081525084611c95565b6137be6040518060600160405280603a81526020016151aa603a913961343c8e60020b613d20565b6137f260405180606001604052806037815260200161520a603791398b6fffffffffffffffffffffffffffffffff16611c95565b505b6137fe8a8c61402e565b9b50925060028d810b908c900b1315613600576134b56040518060600160405280602b8152602001615077602b9139612a6d565b5f61063b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001683614062565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b60606080604051019050602081016040525f8152805f19835b928101926030600a8206018453600a9004806138ac5750508190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909101908152919050565b6060601f1960428360011b0116604051019050602081016040525f8152806f30313233343536373839616263646566600f528283018203600119855b600f811651948201946001860153600f8160041c1651855360081c84830361392f57801561396457632194895a5f526004601cfd5b5050508190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090910190815292915050565b610278816040516024016139ab9190614829565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be77f5600000000000000000000000000000000000000000000000000000000179052612d51565b5f6b033b2e3c9fd0803ce8000000613a3e8385614cea565b61139d9190614cb2565b5f81613a3e6b033b2e3c9fd0803ce800000085614cea565b60608210613b7b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0820180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0840180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086018051630be77f569095526020909252908490529091613b08613af8604487614c9f565b613b03866044614c8c565b6123c7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08501929092527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301525050565b5f808080613b898587614c8c565b805160208201516040830151919650945092509050613bb386613bad816060614c8c565b8761410e565b630be77f56865260208087015260408601859052613be0613bd587601c614c8c565b613b03876044614c8c565b613bf5613bee876060614c8c565b878761410e565b92835260208301919091526040909101525050565b5f81815260066020526040812081906040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff851690631e2eaeaf90602401602060405180830381865afa158015613c85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a2b9190614c11565b5f61139d82613cc0670de0b6b3a764000086614cea565b0490565b5f612a2b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168484614121565b808203608081901c1561063b5763c9654ed45f526004601cfd5b606061063b826141f7565b61073c838383604051602401613d4393929190614e1f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa3f5c73900000000000000000000000000000000000000000000000000000000179052612d51565b61073c838383604051602401613dd693929190614e49565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff362ca5900000000000000000000000000000000000000000000000000000000179052612d51565b5f808080613e81613e76613e66600188614e7e565b5f603c8083079190911291050390565b600281900b60081d91565b91509150613e9981613e93888561424c565b9061428e565b9094509050613ea88282614355565b925050509250929050565b61073c838383604051602401613ecb93929190614ebf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f969cdd0300000000000000000000000000000000000000000000000000000000179052612d51565b80821461049b576040517f01842f8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111b384848484604051602401613f999493929190614ee3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9fd009f500000000000000000000000000000000000000000000000000000000179052612d51565b818101608081901c1561063b5763c9654ed45f526004601cfd5b5f80808061404a613e76603c8088078413908805036001614f2d565b91509150613e998161405c888561424c565b90614380565b5f81815260066020526040812081906040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526003820160048201529091505f9073ffffffffffffffffffffffffffffffffffffffff861690631e2eaeaf90602401602060405180830381865afa1580156140e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906141059190614c11565b95945050505050565b6144428061232585858563ffffffff8516565b5f8281526006602090815260408083208484526004019091528120819081906040517f1e2eaeaf000000000000000000000000000000000000000000000000000000008152600481018290529091505f9073ffffffffffffffffffffffffffffffffffffffff881690631e2eaeaf90602401602060405180830381865afa1580156141ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906141d29190614c11565b6fffffffffffffffffffffffffffffffff81169860809190911d975095505050505050565b60605f82126142095761063b82613893565b6142168219600101613893565b8051602d82526001017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190815292915050565b5f61139d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168484614450565b5f805f8360ff0390505f61432f8260ff1687901b7f0706060506020504060203020504030106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be831560081b6fffffffffffffffffffffffffffffffff851160071b1784811c67ffffffffffffffff1060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b9050806101001415935083614344575f613ea8565b8160ff168103925050509250929050565b5f603c60ff831661436c600186900b610100614f6e565b6143769190614f2d565b61139d9190614f6e565b5f805f61441b8460ff1686901c7e1f0d1e100c1d070f090b19131c1706010e11080a1a141802121b150316040581196001019091166101e07f804040554300526644320000502061067405302602000010750620017611707760fc7fb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff840260f81c161b60f71c1690811c63d76453e004601f169190911a1790565b90508061010014159250826144315760ff614438565b8360ff1681015b9150509250929050565b8082828560045afa50505050565b5f828152600660209081526040808320848452600501909152812081906040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff861690631e2eaeaf90602401602060405180830381865afa1580156140e1573d5f803e3d5ffd5b5f602082840312156144e9575f80fd5b813567ffffffffffffffff8116811461139d575f80fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610278575f80fd5b5f60a08284031215614531575f80fd5b50919050565b5f60808284031215614531575f80fd5b5f8083601f840112614557575f80fd5b50813567ffffffffffffffff81111561456e575f80fd5b602083019150836020828501011115611209575f80fd5b5f805f805f610160868803121561459a575f80fd5b85356145a581614500565b94506145b48760208801614521565b93506145c38760c08801614537565b925061014086013567ffffffffffffffff8111156145df575f80fd5b6145eb88828901614547565b969995985093965092949392505050565b5f6020828403121561460c575f80fd5b81356bffffffffffffffffffffffff8116811461139d575f80fd5b5f60208284031215614637575f80fd5b813567ffffffffffffffff81111561464d575f80fd5b82016020818503121561139d575f80fd5b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f6146e460e083018961465e565b82810360408401526146f6818961465e565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561475857835183526020938401939092019160010161473a565b50909b9a5050505050505050505050565b5f805f805f80610180878903121561477f575f80fd5b863561478a81614500565b95506147998860208901614521565b94506147a88860c08901614537565b9350610140870135925061016087013567ffffffffffffffff8111156147cc575f80fd5b6147d889828a01614547565b979a9699509497509295939492505050565b5f80602083850312156147fb575f80fd5b823567ffffffffffffffff811115614811575f80fd5b61481d85828601614547565b90969095509350505050565b602081525f61139d602083018461465e565b5f806020838503121561484c575f80fd5b823567ffffffffffffffff811115614862575f80fd5b8301601f81018513614872575f80fd5b803567ffffffffffffffff811115614888575f80fd5b8560208260051b840101111561489c575f80fd5b6020919091019590945092505050565b5f805f60e084860312156148be575f80fd5b83356148c981614500565b92506148d88560208601614521565b915060c08401356148e881614500565b809150509250925092565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614926575f80fd5b83018035915067ffffffffffffffff821115614940575f80fd5b602001915036819003821315611209575f80fd5b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f602082840312156149dd575f80fd5b815167ffffffffffffffff8111156149f3575f80fd5b8201601f81018413614a03575f80fd5b805167ffffffffffffffff811115614a1d57614a1d6149a0565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715614a8957614a896149a0565b604052818152828201602001861015614aa0575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215614afa575f80fd5b813561139d81614500565b5f60208284031215614b15575f80fd5b81358060020b811461139d575f80fd5b5f60208284031215614b35575f80fd5b813562ffffff8116811461139d575f80fd5b73ffffffffffffffffffffffffffffffffffffffff835116815273ffffffffffffffffffffffffffffffffffffffff602084015116602082015262ffffff6040840151166040820152606083015160020b606082015273ffffffffffffffffffffffffffffffffffffffff6080840151166080820152614bf660a08201838051151582526020808201519083015260409081015173ffffffffffffffffffffffffffffffffffffffff16910152565b6101206101008201525f612a2b61012083015f815260200190565b5f60208284031215614c21575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c8557614c85614c28565b5060010190565b8082018082111561063b5761063b614c28565b8181038181111561063b5761063b614c28565b5f82614ce5577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b808202811582820484141761063b5761063b614c28565b604081525f614d13604083018561465e565b90508260208301529392505050565b5f81518060208401855e5f93019283525090919050565b7f5b43414c4c444154415245414445525d2072656164696e67206e65787420000081525f614d6a601e830185614d22565b7f20627974652873292061742000000000000000000000000000000000000000008152614d9a600c820185614d22565b7f206173202573202d3e20257300000000000000000000000000000000000000008152600c0195945050505050565b5f612a2b614dd78386614d22565b84614d22565b606081525f614def606083018661465e565b8281036020840152614e01818661465e565b90508281036040840152614e15818561465e565b9695505050505050565b606081525f614e31606083018661465e565b8460208401528281036040840152614e15818561465e565b606081525f614e5b606083018661465e565b8281036020840152614e6d818661465e565b915050826040830152949350505050565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561063b5761063b614c28565b606081525f614ed1606083018661465e565b60208301949094525060400152919050565b608081525f614ef5608083018761465e565b8281036020840152614f07818761465e565b90508281036040840152614f1b818661465e565b91505082606083015295945050505050565b600281810b9083900b01627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212171561063b5761063b614c28565b5f8260020b8260020b028060020b915080821461156957611569614c2856fe5b506f6f6c526577617264734d616e616765725d2072657472696576696e67206173736574732c206275696c64696e6720706f6f6c2069645b52657761726473557064617465725d204465636f64696e6720626f756e6473206f662072657761726420616d6f756e7473206c6973745b52657761726473557064617465725d205374617274696e6720636f726520726577617264206c6f6f705b52657761726473557064617465725d20506f6f6c2063757272656e74207469636b3a2025645b52657761726473557064617465725d20456e746572696e67205f6465636f6465416e645265776172645b52657761726473557064617465725d204d61696e20726577617264206c6f6f7020636f6d706c6574652e5b52657761726473557064617465725d20496e697469616c697a65642c207570646174696e67207469636b5b52657761726473557064617465725d205570646174696e6720676c6f62616c2067726f7774682062792063756d756c617469766547726f7774685b506f6f6c526577617264734d616e616765725d20656e746572696e67205f726577617264506f6f6c5b52657761726473557064617465725d204465636f64696e672073746172745469636b5b52657761726473557064617465725d20656e746572696e67205f72657761726441626f76655b52657761726473557064617465725d204465636f64696e6720757064617465207374617274206c69717569646974795b52657761726473557064617465725d20496e6372656173696e67207469636b2025732067726f777468206f75747369646520627920256531385b52657761726473557064617465725d20656e746572696e67205f72657761726442656c6f775b52657761726473557064617465725d2052657472696576656420616e642075706461746564206c697175696469747920746f3a2025735b52657761726473557064617465725d2063757272656e745469636b5265776172643a2025735b43414c4c444154415245414445525d2072656164696e67206e6578742025732062797465287329206174202573206173206279746573202d3e5b52657761726473557064617465725d2052657472696576696e6720706f6f6c2025782063757272656e74207469636b5b52657761726473557064617465725d2072657761726420757064617465206c6f6f702028696e697469616c697a65643a2025732c207469636b3a2025732c206c69717569646974793a202573295b52657761726473557064617465725d20436f6d706c6574656420636f726520726577617264206c6f6f702c20636865636b696e6720656e64206c69717569646974795b506f6f6c526577617264734d616e616765725d206465636f64696e6720617373657420696e64696365735b41737365745d20417474656d7074696e6720746f2072657472696576652061737365745b25735d2066726f6d2061727261795b52657761726473557064617465725d2046696e616c2076616c7565732028746f74616c3a2025732c2063756d756c617469766547726f7774683a2073295b52657761726473557064617465725d20416464696e6720257320746f207469636b2025735b52657761726473557064617465725d2052656164696e67206164646974696f6e616c20616d6f756e7420666f722063757272656e74207469636ba164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01``@R4\x80\x15a\0\x10W_\x80\xFD[P`@QaV\xBC8\x03\x80aV\xBC\x839\x81\x01`@\x81\x90Ra\0/\x91a\x01uV[0`\x80RF`\xA0R\x80\x82``\x80a\0z`@\x80Q\x80\x82\x01\x82R`\x08\x81RgAngstrom`\xC0\x1B` \x80\x83\x01\x91\x90\x91R\x82Q\x80\x84\x01\x90\x93R`\x02\x83Rav1`\xF0\x1B\x90\x83\x01R\x91V[\x81Q` \x92\x83\x01 \x81Q\x91\x83\x01\x91\x90\x91 `\xC0\x82\x90R`\xE0\x81\x90R`@\x80Q\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81R\x93\x84\x01\x92\x90\x92R\x90\x82\x01RF``\x82\x01R0`\x80\x82\x01R`\xA0\x90 a\x01\0RPP`\x01`\x01`\xA0\x1B\x03\x16a\x01 Ra\0\xF5a\t\0a\x01\x14V[`\x01`\x01`\xA0\x1B\x03\x16a\x01@Ra\x01\ra \x80a\x01\x14V[PPa\x01\xA6V[\x80`\x01`\x01`\xA0\x1B\x03\x16\x810\x16`\x01`\x01`\xA0\x1B\x03\x16\x14a\x01WW`@Qc\x0E\xA7\x06E`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16`\x04\x82\x01R`$\x01`@Q\x80\x91\x03\x90\xFD[PV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01pW_\x80\xFD[\x91\x90PV[_\x80`@\x83\x85\x03\x12\x15a\x01\x86W_\x80\xFD[a\x01\x8F\x83a\x01ZV[\x91Pa\x01\x9D` \x84\x01a\x01ZV[\x90P\x92P\x92\x90PV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa\x01\0Qa\x01 Qa\x01@QaTja\x02R_9_\x81\x81a\x03.\x01Ra\x06Y\x01R_\x81\x81a\x02\x94\x01R\x81\x81a\x03\xEF\x01R\x81\x81a\x05a\x01R\x81\x81a\x07Z\x01R\x81\x81a\t\xD6\x01R\x81\x81a\x0B:\x01R\x81\x81a\x0F\xEA\x01R\x81\x81a\x10\xD7\x01R\x81\x81a\x10\xFE\x01R\x81\x81a1\xF9\x01R\x81\x81a8M\x01R\x81\x81a<\xDF\x01RaBg\x01R_a\x1EE\x01R_a\x1E\xFF\x01R_a\x1E\xD9\x01R_a\x1E\x89\x01R_a\x1Ef\x01RaTj_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xC4W_5`\xE0\x1C\x80c\x84\xB0\x19n\x11a\0}W\x80c\x97\x12[\xEE\x11a\0XW\x80c\x97\x12[\xEE\x14a\x02\x07W\x80c\xC6\xA9\x8E\xB9\x14a\x02HW\x80c\xDC\x985N\x14a\x02[W_\x80\xFD[\x80c\x84\xB0\x19n\x14a\x01yW\x80c\x8D\xB2\xB6R\x14a\x01\x94W\x80c\x91\xDDsF\x14a\x01\xE7W_\x80\xFD[\x80c*c0\xCF\x11a\0\xADW\x80c*c0\xCF\x14a\x01&W\x80cW}\xB2M\x14a\x019W\x80cv\x0F_'\x14a\x01LW_\x80\xFD[\x80c\x11jUP\x14a\0\xC8W\x80c%\x99\x82\xE5\x14a\0\xDDW[_\x80\xFD[a\0\xDBa\0\xD66`\x04aD\xD9V[a\x02nV[\0[a\0\xF0a\0\xEB6`\x04aE\x85V[a\x02{V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xDBa\x0146`\x04aE\xFCV[a\x03\x16V[a\0\xDBa\x01G6`\x04aF'V[a\x03\xD0V[`\x07Ta\x01`\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01\x1DV[a\x01\x81a\x04\x9FV[`@Qa\x01\x1D\x97\x96\x95\x94\x93\x92\x91\x90aF\xAAV[a\x01\xAFa\x01\xA26`\x04aGiV[_\x80\x96P\x96\x94PPPPPV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x83R` \x83\x01\x91\x90\x91R\x01a\x01\x1DV[a\x01\xFAa\x01\xF56`\x04aG\xEAV[a\x05GV[`@Qa\x01\x1D\x91\x90aH)V[`\x07Ta\x02+\x90h\x01\0\0\0\0\0\0\0\0\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`@Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01\x1DV[a\0\xDBa\x02V6`\x04aH;V[a\x06AV[a\0\xF0a\x02i6`\x04aH\xACV[a\x07AV[a\x02x3\x82a\x08GV[PV[_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x02\xEBW`@Q\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x7F%\x99\x82\xE5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x94PPPPPV[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x03\x85W`@Q\x7F#\x01\x9Eg\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x80Tk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16h\x01\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x90UV[a\x03\xD8a\x08\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16cH\xC8\x94\x91a\x04\x1E\x83\x80aH\xF3V[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04;\x92\x91\x90aITV[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04VW=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x82\x01`@Ra\x04\x9B\x91\x90\x81\x01\x90aI\xCDV[PPV[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x80_\x80\x80\x83a\x055`@\x80Q\x80\x82\x01\x82R`\x08\x81R\x7FAngstrom\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x80\x83\x01\x91\x90\x91R\x82Q\x80\x84\x01\x90\x93R`\x02\x83R\x7Fv1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x83\x01R\x91V[\x97\x98\x90\x97\x96PF\x95P0\x94P\x91\x92P\x90V[``3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x05\xB8W`@Q\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82_a\x05\xC3\x82a\tUV[\x90\x92P\x90P_a\x05\xD2\x83a\t|V[\x90\x93P\x90Pa\x05\xE0\x82a\t\x99V[a\x05\xEA\x83\x83a\n\xF1V[\x92Pa\x05\xF6\x83\x83a\r;V[\x92Pa\x06\x03\x83\x83\x83a\r\xE4V[\x92Pa\x06\x11\x83\x83`\x01a\x0E\xBFV[\x92Pa\x06\x1C\x82a\x0F*V[a\x06'\x83\x87\x87a\x11\x9CV[PP`@\x80Q_\x81R` \x81\x01\x90\x91R\x91PP[\x92\x91PPV[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x06\xB0W`@Q\x7F#\x01\x9Eg\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x81\x81\x10\x15a\x07<W_\x83\x83\x83\x81\x81\x10a\x06\xCDWa\x06\xCDaJ\xBDV[\x90P` \x02\x01` \x81\x01\x90a\x06\xE2\x91\x90aJ\xEAV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x90\x81R`\x06` R`@\x90 \x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81\x16`\xFF\x90\x91\x16\x15\x17\x90UP`\x01\x01a\x06\xB2V[PPPV[_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x07\xB1W`@Q\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`<a\x07\xC3`\x80\x85\x01``\x86\x01aK\x05V[`\x02\x0B\x14\x15\x80a\x07\xE7WP_a\x07\xDF``\x85\x01`@\x86\x01aK%V[b\xFF\xFF\xFF\x16\x14\x15[\x15a\x08\x1EW`@Q\x7F\xC2Vb+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x7F\xDC\x985N\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x92PPPV[\x80`\x0CRc\xDA\xA0P\xE9`\x04R\x81_R`\x1F`\x0C `\x01`\xFF\x83\x16\x1B\x80\x82T\x18\x81\x81\x16a\x08zWc\x8C\xB8\x88r_R`\x04`\x1C\xFD[\x90\x91UPPPV[`\x07TCg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x03a\x08\xC9W`@Q\x7F\xD8\xA6\xB8\x9B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R`\x06` R`@\x90 T`\xFF\x16a\t\x11W`@Q\x7F\\\xD2kh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\t\x1ACa\x11\xB9V[`\x07\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[_\x80_a\tc\x84`Da\x11\xD6V[\x90\x94P\x90P\x83a\tr\x82a\x12\x10V[\x92P\x92PP\x91P\x91V[_\x80_a\t\x8A\x84`$a\x11\xD6V[\x90\x94P\x90P\x83a\tr\x82a\x12\xACV[_a\t\xA3\x82a\x13FV[\x90P_[\x81\x81\x10\x15a\x07<W_a\t\xBA\x84\x83a\x13QV[\x90P_a\t\xC6\x82a\x13\xA4V[\x90P_a\t\xD2\x83a\x13\xCCV[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x0B\r\x9C\ta\n-\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x85\x90R`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\n\x9DW_\x80\xFD[PZ\xF1\x15\x80\x15a\n\xAFW=_\x80>=_\xFD[PPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16_\x90\x81R`\x01` R`@\x90 a\n\xE1\x91P\x83a\x13\xD7V[PP`\x01\x90\x92\x01\x91Pa\t\xA7\x90PV[_\x80a\n\xFC\x84a\x13\xEFV[\x90\x94P\x90P[\x80\x84\x14a\r3W`\x14\x84\x01\x93_\x80\x80a\x0B\x1B\x84\x88a\x14GV[\x91\x94P\x92P\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\xF3\xCD\x91La\x0B\xEC0\x87\x87`@\x80Q`\xA0\x80\x82\x01\x83R_\x80\x83R` \x83\x01\x81\x90R\x82\x84\x01\x81\x90R``\x83\x01\x81\x90R`\x80\x83\x01R\x82Q\x90\x81\x01\x90\x92R\x90\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x82R_` \x83\x01R`<`@\x83\x01R\x86\x16``\x90\x91\x01R\x90P\x93\x92PPPV[`@Q\x80``\x01`@R\x80\x86\x15\x15\x81R` \x01a\x0C\x10a\x0C\x0B\x8Ba\x14\xD4V[a\x14\xE0V[\x81R` \x01\x86a\x0C4Ws\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D%a\x0C;V[d\x01\0\x02v\xA4[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0Cq\x92\x91\x90aKGV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\x8DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xB1\x91\x90aL\x11V[\x90Pa\x0C\xEDa\x0C\xC0\x82`\x80\x1D\x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16_\x90\x81R`\x01` R`@\x90 \x90`\x0F\x0Ba\x15AV[Pa\r(a\x0C\xFB\x82`\x0F\x0B\x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16_\x90\x81R`\x01` R`@\x90 \x90`\x0F\x0Ba\x15AV[PPPPPPa\x0B\x02V[P\x91\x92\x91PPV[_\x80a\rF\x84a\x13\xEFV[\x90\x94P\x90P_a\rTa\x15pV[`@\x80Qa\x01 \x81\x01\x82R_` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x91\x90\x91R\x7F\xD2\x9C\xD8\xAD\x13\x068\xCED\xEA\x18VH\xD2q#E\xE8\xE4V\xFE\xF8\x153(\xEE@\x91m\xF2y\x0E\x81R\x90\x91P[\x82\x86\x14a\r\xDAWa\r\xD3\x86\x82\x84\x88a\x15\xBAV[\x95Pa\r\xC0V[P\x93\x94\x93PPPPV[_\x80a\r\xEEa\x15pV[`@\x80Qa\x01`\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90R\x91\x92Pa\x0EQ\x87a\x13\xEFV[\x90\x97P\x90P_`\x08U[\x80\x87\x14a\x0E\xB4W`\x08\x80Ta\x0E\xA0\x91\x7F[%s]\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90_a\x0E\x97\x83aLUV[\x91\x90PUa\x17\xA5V[a\x0E\xAD\x87\x83\x85\x89\x89a\x189V[\x96Pa\x0E[V[P\x94\x95\x94PPPPPV[_\x80a\x0E\xCA\x85a\x13\xEFV[\x90\x95P\x90P[\x80\x85\x14a\x0F!W_\x80a\x0E\xE3\x87\x87a\x1A\x8BV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16_\x90\x81R` \x89\x90R`@\x90 \x92\x99P\x90\x93P\x91Pa\x0F\x19\x90\x82a\x1B\xF7V[PPPa\x0E\xD0V[P\x92\x93\x92PPPV[_a\x0F4\x82a\x13FV[\x90P_[\x81\x81\x10\x15a\x07<W_a\x0FK\x84\x83a\x13QV[\x90P_a\x0FW\x82a\x13\xCCV[\x90P_a\x0Fc\x83a\x1C\x06V[\x90P_a\x0Fo\x84a\x1C\x12V[\x90Pa\x0F\xA8a\x0F~\x82\x84aL\x8CV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16_\x90\x81R`\x01` R`@\x90 \x90a\x1B\xF7V[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16_\x90\x81R` \x81\x90R`@\x81 \x80T\x84\x92\x90a\x0F\xDD\x90\x84\x90aL\x8CV[\x90\x91UPP\x80\x15a\x11\x8CW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA5\x84\x11\x94a\x10A\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x10\xA4W_\x80\xFD[PZ\xF1\x15\x80\x15a\x10\xB6W=_\x80>=_\xFD[Pa\x10\xFC\x92PPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x1C\x1EV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x11\xDA`\xB4`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x11fW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x8A\x91\x90aL\x11V[P[PP`\x01\x90\x92\x01\x91Pa\x0F8\x90PV[\x80\x82\x01\x80\x84\x14a\x11\xB3Wc\x01\x84/\x8C_R`\x04`\x1C\xFD[PPPPV[_h\x01\0\0\0\0\0\0\0\0\x82\x10a\x11\xD2Wa\x11\xD2a\x1CgV[P\x90V[_\x80_a\x11\xE2\x85a\x13\xEFV[\x90\x95P\x90P_\x84a\x11\xF3\x87\x84aL\x9FV[a\x11\xFD\x91\x90aL\xB2V[\x91\x93PP` \x1B\x84\x17\x90P[\x92P\x92\x90PV[_\x80a\x12\x1B\x83a\x13FV[\x90P_\x80[\x82\x81\x10\x15a\x0F!W_a\x12;a\x126\x87\x84a\x13QV[a\x13\xCCV[\x90P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\x12\xA2W`@Q\x7F\x80\xF1\x1A\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91P`\x01\x01a\x12 V[_\x80a\x12\xB7\x83a\x13FV[\x90P\x80_\x03a\x12\xC7WP\x90\x91\x90PV[_a\x12\xDAa\x12\xD5\x85\x83a\x1CtV[a\x1C\x8AV[\x90P`\x01[\x82\x81\x10\x15a\x0F!W_a\x12\xF5a\x12\xD5\x87\x84a\x1CtV[\x90P\x82c\xFF\xFF\xFF\xFF\x16\x81c\xFF\xFF\xFF\xFF\x16\x11a\x13<W`@Q\x7F\xF3_\x93\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91P`\x01\x01a\x12\xDFV[_a\x06;\x82` \x1C\x90V[_a\x13t`@Q\x80``\x01`@R\x80`3\x81R` \x01aS\x8D`3\x919\x83a\x1C\x95V[a\x13\x80\x82\x84[\x90a\x1D&V[a\x13\x8B`D\x83aL\xEAV[c\xFF\xFF\xFF\xFF\x84\x16[a\x13\x9D\x91\x90aL\x8CV[\x93\x92PPPV[_a\x13\xB4`\x14\x83[\x015`\x80\x1C\x90V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x92\x91PPV[_\x815``\x1Ca\x06;V[_a\x06;a\x13\xE6\x83\x85\\aL\x8CV[\x91P\x83\x82a\x1D{V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7Fu24/List.length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x143\x90\x84\x90`\x03\x90a\x1D\x82V[PP`\x03\x80\x82\x01\x92\x825`\xE8\x1C\x90\x92\x01\x01\x90V[_\x80_\x80a\x14ea\x126a\x14Z\x88a\x1E(V[\x87\x90a\xFF\xFF\x16a\x13QV[\x90P_a\x14\x82a\x126a\x14w\x89a\x1E7V[\x88\x90a\xFF\xFF\x16a\x13QV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x92P\x82a\x14\xC1W\x80\x82a\x14\xC4V[\x81\x81[\x90\x98\x90\x97P\x92\x95P\x91\x93PPPPV[_a\x13\xB4`\x04\x83a\x13\xACV[_\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x11\x15a\x15;W`@Q\x7F5'\x8D\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P_\x03\x90V[\x81\\\x81\x81\x03\x90\x80\x82\x10_\x84\x13\x14a\x15_Wc\xC9eN\xD4_R`\x04`\x1C\xFD[a\x15i\x84\x83a\x1D{V[P\x92\x91PPV[_a\x15\xB5a\x15|a\x1ECV[`@\x80Q`B\x81\x01\x90\x91R\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x02\x81\x01\x91\x90\x91R\x90V[\x90P\x90V[_\x80a\x15\xC5\x86a\x1F;V[`\x01\x81\x16\x15\x15``\x88\x01R\x90\x96P\x90Pa\x15\xDE\x86a\x1F\x8EV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x87\x01R\x95Pa\x16\0\x86a\x1F\x8EV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`@\x87\x01R\x95P_a\x16#\x87a\x1F\xE1V[\x90\x97P\x90Pa\x169a\x126\x85a\xFF\xFF\x84\x16a\x13QV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x87\x01R_a\x16^\x88a\x1F\xE1V[\x90\x98P\x90Pa\x16ta\x126\x86a\xFF\xFF\x84\x16a\x13QV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x88\x01RPP`\x02\x81\x16a\x16\xA0W\x85_a\x16\xA9V[a\x16\xA9\x86a 4V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x87\x01R\x95P_a\x16\xD5\x87`\x04\x84\x16\x15a \x87V[`\xE0\x89\x01R\x90\x97P\x90P_a\x17\x0Ca\x17\0\x88g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16a\x01\0\x82\x01Ra\x01 \x90 \x90V[`\"\x88\x01R`B\x87 \x90V[\x90Pa\x17\x17\x81a!2V[_`\x80\x84\x16a\x17/Wa\x17*\x89\x83a!\x83V[a\x179V[a\x179\x89\x83a!\xF2V[\x90\x99P\x90Pa\x17H\x83\x82a\"6V[`\x80\x88\x01Q` \x89\x01Qa\x17c\x91\x83\x91`\x01\x88\x16\x15\x15a\"~V[_a\x17s\x89`\xC0\x01Q\x83\x81\x1C\x18\x90V[\x90Pa\x17\x97\x81\x8A`\xA0\x01Q\x8B`@\x01Qa\x17\x92\x89`\xFF\x16`\x01\x16\x15\x15\x90V[a#,V[P\x97\x98\x97PPPPPPPPV[_\x80_\x80_a\x17\xE2V[_[` \x81\x10\x15a\x17\xCAW\x82\x81\x1A\x15a\x17\xCAW`\x01\x01a\x17\xB1V[\x80\x82R`\x03\x1Ba\x01\0\x03\x91\x82\x1C\x90\x91\x1B` \x90\x91\x01RV[_Q\x94P` Q\x93P`@Q\x92P``Q\x91P`\x80Q\x90Pc\xB6\x0Er\xCC_R`@` R\x85`@Ra\x18\x15\x87``a\x17\xAFV[a\x18!`\x1C`\x84a#\xC7V[_\x94\x90\x94R` \x92\x90\x92R`@R``R`\x80RPPV[_\x80a\x18D\x87a\x1F;V[\x90\x97P\x90Pa\x18~\x7F  variant: %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x18y\x83`\xFF\x16a#\xD9V[a$\x91V[a\x18\x88\x86\x82a%\x04V[`\x01\x81\x16\x15\x15`\x80\x87\x01R_\x80a\x18\xA6\x85\x8A\x88`\x08\x87\x16\x15\x15a%\xB7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16`\xC0\x8D\x01R\x91\x16`\xA0\x8B\x01R\x90\x99P\x91Pa\x18\xDA\x90P\x88a&NV[``\x89\x01\x81\x90R\x90\x98P\x81\x10\x15a\x19\x1DW`@Q\x7F\x8E\x1E\xDF\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x82\x16a\x19,W\x87_a\x195V[a\x195\x88a 4V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x89\x01R\x97P_a\x19a\x89`\x04\x85\x16\x15a \x87V[a\x01\0\x8B\x01R\x90\x99P\x90Pa\x19w\x88\x8A\x85a&\xA7V[`\x07T\x90\x99P_\x90\x81\x90a\x19\xAC\x90\x8B\x90\x8D\x90\x88\x90\x88\x90h\x01\0\0\0\0\0\0\0\0\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a&\xEBV[\x91\x9CP\x92P\x90Pa\x19\xBD\x8A\x86a)\xBCV[_a\x19\xC9\x8B\x87\x8Ca*\x11V[\x90P_`\x80\x87\x16a\x19\xE3Wa\x19\xDE\x8D\x83a!\x83V[a\x19\xEDV[a\x19\xED\x8D\x83a!\xF2V[\x90\x9DP\x90P`\x10\x87\x16\x15a\x1A$Wa\x1A\x10\x8Ca\x01@\x01Qd\xFF\xFF\xFF\xFF\xFF\x16a*3V[a\x1A\x1F\x81\x8Da\x01 \x01Qa\x08GV[a\x1A-V[a\x1A-\x82a!2V[a\x1A7\x85\x82a\"6V[`\xA0\x8C\x01Qa\x1AN\x90\x82\x90\x86`\x01\x8B\x16\x15\x15a\"~V[_a\x1A^\x8D`\xE0\x01Q\x83\x81\x1C\x18\x90V[\x90Pa\x1Ay\x81\x8E`\xC0\x01Q\x86a\x17\x92\x8C`\xFF\x16`\x01\x16\x15\x15\x90V[P\x9B\x9C\x9BPPPPPPPPPPPPV[_\x80\x80a\x1A\xAF`@Q\x80``\x01`@R\x80`)\x81R` \x01aQ\x08`)\x919a*mV[_\x80a\x1A\xD2`@Q\x80``\x01`@R\x80`+\x81R` \x01aSb`+\x919a*mV[_a\x1A\xDC\x88a\x1F\xE1V[\x90\x98P\x90P_a\x1A\xEB\x89a\x1F\xE1V[\x90\x99P\x90Pa\x1B\x11`@Q\x80``\x01`@R\x80`8\x81R` \x01aO\x8E`8\x919a*mV[a\x1B\"a\x126\x89a\xFF\xFF\x85\x16a\x13QV[\x93Pa\x1B\xCBa\x1B\xC40\x86a\x1B=a\x126\x8Da\xFF\xFF\x88\x16a\x13QV[`@\x80Q`\xA0\x80\x82\x01\x83R_\x80\x83R` \x83\x01\x81\x90R\x82\x84\x01\x81\x90R``\x83\x01\x81\x90R`\x80\x83\x01R\x82Q\x90\x81\x01\x90\x92R\x90\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x82R_` \x83\x01R`<`@\x83\x01R\x86\x16``\x90\x91\x01R\x90P\x93\x92PPPV[`\xA0\x90 \x90V[_\x81\x81R`\x05` R`@\x90 \x90\x93Pa\x1B\xE6\x90\x84\x8Ba*\xFCV[\x90\x9A\x94\x99P\x97P\x92\x95PPPPPPV[_a\x06;a\x13\xE6\x83\x85\\aL\x9FV[_a\x13\xB4`$\x83a\x13\xACV[_a\x13\xB4`4\x83a\x13\xACV[\x81`\x14R\x80`4Ro\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0_R` _`D`\x10_\x87Z\xF1=\x15`\x01_Q\x14\x17\x16a\x1C^Wc\x90\xB8\xEC\x18_R`\x04`\x1C\xFD[_`4RPPPV[c5'\x8D\x12_R`\x04`\x1C\xFD[_a\x1C\x7F\x82\x84a\x13zV[a\x13\x8B`$\x83aL\xEAV[_\x815`\xE0\x1Ca\x06;V[a\x04\x9B\x82\x82`@Q`$\x01a\x1C\xAB\x92\x91\x90aM\x01V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x97\x10\xA9\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_a\x1D1\x83` \x1C\x90V[\x90P\x80\x82\x10a\x07<W`@Q\x7F\xBC_\x99|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x83\x90R`$\x81\x01\x82\x90R`D\x01[`@Q\x80\x91\x03\x90\xFD[\x80\x82]PPV[\x825`\x08\x83\x02a\x01\0\x03\x1Ca\x11\xB3a\x1D\xC9\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x06a\x1D\xC2`\xFF\x88\x16a-ZV[\x91\x90a-eV[a\x1D\xD6`\x03\x87[\x90a.+V[`@Q` \x01a\x1D\xE7\x92\x91\x90aM9V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R\x83a\x1E#\x84`\xFF\x88\x16a.+V[a.oV[_a\x06;\x81\x83[\x015`\xF0\x1C\x90V[_a\x06;`\x02\x83a\x1E/V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0F\x14\x16a\x1F8WP`@\x80Q\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91RF``\x82\x01R0`\x80\x82\x01R`\xA0\x90 \x90V[\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7FOrderVariantMap\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x1F\x7F\x90\x84\x90`\x01\x90a\x1D\x82V[PP`\x01\x81\x01\x91\x905`\xF8\x1C\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x04\x81R\x7Fu128\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x1F\xD2\x90\x84\x90`\x10\x90a\x1D\x82V[PP`\x10\x81\x01\x91\x905`\x80\x1C\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x03\x81R\x7Fu16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra %\x90\x84\x90`\x02\x90a\x1D\x82V[PP`\x02\x81\x01\x91\x905`\xF0\x1C\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x07\x81R\x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra x\x90\x84\x90`\x14\x90a\x1D\x82V[PP`\x14\x81\x01\x91\x905``\x1C\x90V[_\x80\x7F\xC5\xD2F\x01\x86\xF7#<\x92~}\xB2\xDC\xC7\x03\xC0\xE5\0\xB6S\xCA\x82';{\xFA\xD8\x04]\x85\xA4p\x83a!(W\x845`\xE8\x1C`\x03\x86\x01\x95P`@Q`\x14`d\x03\x81\x01\x82\x81\x01`@R\x82\x88\x827\x82\x81 \x93PP\x81\x87\x01\x96P`D\x81\x01Q\x7Ft\x07\x90\\\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`@`$\x83\x01R`\x14\x83\x03\x92P\x82`D\x83\x01R`d\x83\x01\x81` \x1B\x17\x82`\xC0\x1B\x17\x94PPPP[\x84\x92P\x92P\x92P\x92V[_\x81\x81R`\x03` R`@\x90 \x80\\\x15a!xW`@Q\x7F\x8A.\xF1\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x04\x9B\x81`\x01a\x1D{V[_\x80a!\x8E\x84a 4V[\x90\x94P\x90P6_a!\x9E\x86a/\x02V[\x91\x97P\x92P\x90Pa!\xB1\x83\x86\x84\x84a0\tV[a!\xE7W`@Q\x7F\x8B\xAAW\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x93\x94\x90\x93P\x91PPV[_\x80`@Q\x83\x81R_` \x82\x01R`A\x85`?\x83\x017`A\x85\x01\x94P` `\x01`\x80\x83`\x01Z\xFAQ\x91PP=a\"/Wc\x8B\xAAW\x9F_R`\x04`\x1C\xFD[\x92\x93\x91PPV[\x81\x15a\x04\x9BWc\xFF\xFF\xFF\xFF\x82\x16\x82`\xC0\x1C\x82`\x04\x82\x01R\x83` \x1C` _\x84\x84_\x85Z\xF1\x92PPPc$\xA2\xE4K_Q\x14`\x1F=\x11\x16\x81\x16a\x07<Wc\xF9Y\xFD\xAE_R`\x04`\x1C\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16_\x90\x81R`\x01` R`@\x90 \x82\x90a\"\xAE\x90\x82a\x13\xD7V[P\x81\x15a#\x03Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 \x93\x88\x16\x83R\x92\x90R\x90\x81 \x80T\x83\x92\x90a\"\xF8\x90\x84\x90aL\x9FV[\x90\x91UPa#%\x90PV[a#%s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x860\x84a0NV[PPPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16_\x90\x81R`\x01` R`@\x90 \x82\x90a#\\\x90\x82a\x1B\xF7V[P\x81\x15a#\xA6Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 \x93\x88\x16\x83R\x92\x90R\x90\x81 \x80T\x83\x92\x90a\"\xF8\x90\x84\x90aL\x8CV[a#%s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x86\x83a\x1C\x1EV[a0\xA6\x80a\x11\xB3\x84\x84c\xFF\xFF\xFF\xFF\x84\x16V[_`\x10\x82\x16\x15a$:W` \x82\x16\x15a$\x13WP\x7FStanding_Partial\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[P\x7FStanding_Exact\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[` \x82\x16\x15a$jWP\x7FFlash_Partial\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[P\x7FFlash_Exact\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[_\x80Q` \x80Q`@\x80Q``\x80Q`\x80\x80Q`\xA0Q`\xC0QcK\\Bw\x90\x9BR\x97\x86\x90R\x94R\x95\x96\x93\x95\x91\x94\x91\x93\x90a$\xCC\x90\x8A\x90a\x17\xAFV[a$\xD7\x88`\xA0a\x17\xAFV[a$\xE3`\x1C`\xC4a#\xC7V[_\x96\x90\x96R` \x94\x90\x94R`@\x92\x90\x92R``R`\x80R`\xA0R`\xC0RPPV[` \x81\x16\x15a%bW`\x10\x81\x16\x15a%<WP\x7F\xA9\xE5)MDO\xBA\xEB\\\xA0_+$\xC5\xD8)D\x10\xF3\x14\x13\x04\x8ED]\x88\x1E.\xF6\x9E`\0\x90RV[P\x7F\xEB\xD5\t\x1C9oy\x05nEE_J\x93\xBB\xB0\x16\xC2\x171K\xB25k\"\xD1\xC183\xAC\x88a\x90RV[`\x10\x81\x16\x15a%\x91WP\x7F\xEF\x0C\xCE\x88\xFD\xA0J\xB3\xF8F\x18\x823r\xCFv\xF6KE\x11\xCE\x8Cyc\x0E\xAB\xC2\x9E\xBC\x9B\x96\x8F\x90RV[P\x7F[\x9DI\xCF\xEDH\xF8\xC9\xD1\xA8c\xF6\x1C$y\xC5y\xFA)\x9C%\xA32\x11\xFC\x85s\x90\xCE\xCC\xE6\xD4\x90RV[_\x80_\x80_a%\xC5\x88a\x1F\xE1V[\x90\x98Pa\xFF\xFF\x16\x90P_a%\xD9\x8A\x83a\x1CtV[\x90P_a%\xE5\x82a0\xBDV[\x90P_a&\x02a\x126a%\xF7\x85a\x1E(V[\x8C\x90a\xFF\xFF\x16a\x13QV[\x90P_a&\x1Fa\x126a&\x14\x86a\x1E7V[\x8D\x90a\xFF\xFF\x16a\x13QV[\x90P\x89a&.W\x80\x82\x84a&9V[\x81\x81a&9\x85a0\xC8V[\x9D\x9F\x91\x9EP\x9C\x9BP\x99PPPPPPPPPPV[_\x80a&\x9B` `@Q\x80`@\x01`@R\x80`\x04\x81R` \x01\x7Fu256\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x1D\x82\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[PP` \x81\x01\x91\x905\x90V[_`\x10\x82\x16\x15a&\xD1W`\x08\x83a\x018\x86\x017`\x05`\x08\x84\x01a\x01[\x86\x017`\r\x83\x01\x92Pa&\xE3V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16a\x01 \x85\x01R[P\x90\x92\x91PPV[_\x80\x80\x80` \x87\x16\x15a'\xE3W_\x80a'\x03\x8Aa\x1F\x8EV[\x90\x9APo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91Pa'#\x8Aa\x1F\x8EV[\x90\x9APo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90Pa'C\x8Aa\x1F\x8EV[` \x8D\x01\x84\x90R`@\x8D\x01\x83\x90R\x90\x9APo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x92P\x81\x83\x10\x15a'\xA2W`@Q\x7F\xC4\xDA\xF0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x83\x11\x15a'\xDCW`@Q\x7FD\x18#1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPa($V[a'\xEC\x88a\x1F\x8EV[\x90\x98Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P`@\x87\x16a(\x11W_a(\x14V[`\x01[`\xFF\x16` \x8A\x01R`@\x89\x01\x81\x90R[a(N\x7Fprice: %27e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87a\x17\xA5V[`@\x87\x16\x15\x15\x80a(aWP` \x87\x16\x15\x15[\x15a)\rW\x91P\x81a(\x93\x7Fquantity in: %18e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84a\x17\xA5V[a(\x9D\x86\x84a0\xEAV[\x91Pa(\xC9\x7Fquantity out (pre fee): %18e\0\0\0\0\x83a\x17\xA5V[a(\xDC\x82a(\xD7\x81\x88a0\xF7V[a1\x02V[\x91Pa)\x08\x7Fquantity out (post fee): %18e\0\0\0\x83a\x17\xA5V[a)\xAFV[\x90P\x80a):\x7Fquantity out: %18e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x17\xA5V[a)D\x86\x83a1\rV[\x92Pa)p\x7Fquantity in (pre fee): %18e\0\0\0\0\0\x84a\x17\xA5V[a)\x83\x83a)~\x81\x88a0\xF7V[a1\x18V[\x92Pa)\xAF\x7Fquantity in (post fee): %18e\0\0\0\0\x84a\x17\xA5V[P\x95\x97\x90\x96P\x93PPPPV[_`\x10\x82\x16a)\xCDWa\x01@a)\xD1V[a\x01`[\x90P\x82a)\xFE\x7FstructLength: %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x17\xA5V[a\x11\xB3\x81a*\x0C\x84\x82aL\x8CV[a1 V[_a*+a*\x1F\x85\x85a1iV[`\"\x84\x01R`B\x83 \x90V[\x94\x93PPPPV[\x80B\x11\x15a\x02xW`@Q\x7F =\x82\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x02x\x81`@Q`$\x01a*\x81\x91\x90aH)V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_\x80a+\x1F`@Q\x80``\x01`@R\x80`*\x81R` \x01aPM`*\x919a*mV[_\x80a+B`@Q\x80``\x01`@R\x80`#\x81R` \x01aQ1`#\x919a*mV[_a+L\x86a1\x89V[\x90\x96P\x90Pa+s`@Q\x80``\x01`@R\x80`0\x81R` \x01aR\xA1`0\x919\x88a\x1C\x95V[_a+}\x88a1\xDBV[\x90Pa+\xA4`@Q\x80``\x01`@R\x80`&\x81R` \x01aP'`&\x919\x82`\x02\x0Ba2(V[a+\xC5`@Q\x80``\x01`@R\x80`0\x81R` \x01aQz`0\x919a*mV[_a+\xCF\x88a\x1F\x8EV[\x90\x98P\x90Pa+\xF5`@Q\x80``\x01`@R\x80`7\x81R` \x01aO\xC6`7\x919a*mV[_a+\xFF\x89a\x13\xEFV[\x90\x99P\x90Pa,%`@Q\x80``\x01`@R\x80`*\x81R` \x01aO\xFD`*\x919a*mV[\x82`\x02\x0B\x84`\x02\x0B\x13\x15a,GWa,B\x8B\x84\x8B\x87\x8E\x87\x87a2\xB9V[a,VV[a,V\x8B\x84\x8B\x87\x8E\x87\x87a5\x98V[\x92\x9BP\x90\x98P\x96P\x94PPPPPa,\x85`@Q\x80`\x80\x01`@R\x80`C\x81R` \x01aS\x1F`C\x919a*mV[_a,\x8F\x87a82V[\x90P\x80o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a-\nW`@Q\x7Fd)\xCF\xD2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ro\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16`\x04\x83\x01R\x82\x16`$\x82\x01R`D\x01a\x1DrV[a-+`@Q\x80``\x01`@R\x80`;\x81R` \x01aP\xCD`;\x919a*mV[\x82\x88`\x01\x01_\x82\x82Ta->\x91\x90aL\x8CV[\x90\x91UP\x86\x95PPPPP\x93P\x93\x91PPV[a\x02x\x81a8sV[``a\x06;\x82a8\x93V[\x82Q``\x90\x82\x81\x10\x15a\x0F!W`@\x80Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x16` \x82\x01R\x81Q`\x01\x81\x83\x03\x01\x81R`!\x90\x91\x01\x90\x91R_a-\xBB\x83\x86aL\x9FV[\x90P[\x80`\x01\x16`\x01\x03a-\xEEW\x81\x87`@Q` \x01a-\xDC\x92\x91\x90aM\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x96P[`\x01\x81\x90\x1C\x90P\x81\x82`@Q` \x01a.\x08\x92\x91\x90aM\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P_\x81\x11a-\xBEWP\x94\x95\x94PPPPPV[``a.7\x83\x83a8\xF3V[\x80Qa0x\x82R`\x02\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x90\x91\x01\x90\x81R\x93\x92PPPV[a\x07<\x83\x83\x83`@Q`$\x01a.\x87\x93\x92\x91\x90aM\xDDV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F,\xED|\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_6\x81`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81R\x7Fu24/bytes.length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra/G\x90\x85\x90`\x03\x90a\x1D\x82V[`@\x80Q``\x81\x01\x90\x91R`:\x80\x82R\x855`\xE8\x1C\x80\x87\x01`\x03\x90\x81\x01\x93\x90\x88\x01\x92a/\xB0\x91\x90aRg` \x83\x019a/\xA5\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x06a\x1D\xC2\x86a-ZV[a\x1E#`\x03\x87a\x1D\xD0V[a/\xEE\x82\x82\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa9\x97\x92PPPV[PPPPP\x815`\xE8\x1C\x80\x83\x01`\x03\x90\x81\x01\x94\x93\x01\x92\x90\x91PV[_`@Qc\x16&\xBA~`\xE0\x1B\x80\x82R\x85`\x04\x83\x01R`$\x82\x01`@\x81R\x84`D\x84\x01R\x84\x86`d\x85\x017` \x81`d\x87\x01\x85\x8BZ\xFA\x90Q\x90\x91\x14\x16\x96\x95PPPPPPV[`@Q\x81``R\x82`@R\x83``\x1B`,Ro#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0`\x0CR` _`d`\x1C_\x89Z\xF1=\x15`\x01_Q\x14\x17\x16a0\x99Wcy9\xF4$_R`\x04`\x1C\xFD[_``R`@RPPPPV[_\x80\x82\x84jconsole.logZ\xFAPPPV[_`\x04\x82\x015a\x06;V[_a\x06;\x82v\np\xC3\xC4\nd\xE6\xC5\x19\x99\t\x0Be\xF6}\x92@\0\0\0\0\0\0aL\xB2V[_a\x13\x9D\x83\x83[\x90a:&V[_a\x13\x9D\x82\x84a0\xF1V[_a\x13\x9D\x82\x84aL\x9FV[_a\x13\x9D\x82\x84a:HV[_\x81\x83a\x13\x93V[\x81[\x81\x81\x10\x15a\x07<W_a16\x82` aL\x8CV[\x90P\x82\x81\x11\x15a1CWP\x81[a1V\x82a1Q\x81\x84aL\x9FV[a:`V[Pa1b` \x82aL\x8CV[\x90Pa1\"V[_\x80`\x10\x83\x16a1{Wa\x01@a1\x7FV[a\x01`[\x90\x93 \x93\x92PPPV[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x03\x80\x82R\x7Fi24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01Ra1\xCC\x91\x85\x91\x90a\x1D\x82V[PP`\x03\x81\x01\x91\x905`\xE8\x1D\x90V[_a\x06;a2\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x84a<\nV[`\xA0\x1C`\x02\x0B\x90V[a\x04\x9B\x82\x82`@Q`$\x01a2>\x92\x91\x90aM\x01V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xAF\x7F\xAA8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_\x80\x80\x80a2\xDE`@Q\x80``\x01`@R\x80`&\x81R` \x01aQT`&\x919a*mV[`\x01_\x80[\x82\x15a4xWa3\n`@Q\x80``\x01`@R\x80`+\x81R` \x01aP\xA2`+\x919a*mV[_\x88\x8D\x14a33Wa3\x1B\x8Da\x1F\x8EV[\x90\x9DPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P[a3=\x81\x84aL\x8CV[\x92Pa3[\x81\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a<\xA9V[a3e\x90\x83aL\x8CV[\x91P\x81\x8F_\x8E`\x02\x0B`\x02\x0B\x81R` \x01\x90\x81R` \x01_ _\x82\x82Ta3\x8C\x91\x90aL\x8CV[\x90\x91UPa3\xA5\x90P\x8Aa3\xA0\x8D\x8Fa<\xC4V[a=\x06V[\x99Pa3\xD5`@Q\x80``\x01`@R\x80`%\x81R` \x01aS\xFE`%\x919\x82a3\xD0\x8F`\x02\x0Ba= V[a=+V[a4\x14`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F[RewardsUpdater] New total: %s\0\0\x81RP\x84a\x1C\x95V[a4B`@Q\x80``\x01`@R\x80`:\x81R` \x01aQ\xAA`:\x919a4<\x8E`\x02\x0Ba= V[\x84a=\xBEV[a4v`@Q\x80``\x01`@R\x80`7\x81R` \x01aR\n`7\x919\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1C\x95V[P[a4\x82\x8A\x8Ca>QV[\x9BP\x92P`\x02\x8B\x81\x0B\x90\x8E\x90\x0B\x12a2\xE3Wa4\xB5`@Q\x80``\x01`@R\x80`+\x81R` \x01aPw`+\x919a*mV[\x87\x8C\x14a5VWa4\xDD`@Q\x80``\x01`@R\x80`;\x81R` \x01aT#`;\x919a*mV[_a4\xE7\x8Da\x1F\x8EV[\x90\x9DPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90Pa5 `@Q\x80``\x01`@R\x80`&\x81R` \x01aRA`&\x919\x82a\x1C\x95V[a5*\x81\x84aL\x8CV[\x92Pa5H\x81\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a<\xA9V[a5R\x90\x83aL\x8CV[\x91PP[a5y`@Q\x80``\x01`@R\x80`>\x81R` \x01aS\xC0`>\x919\x83\x83a>\xB3V[a5\x83\x8C\x89a?FV[\x9A\x9D\x90\x9CP\x99\x9AP\x95\x98\x97PPPPPPPPV[_\x80\x80\x80a5\xBD`@Q\x80``\x01`@R\x80`&\x81R` \x01aQ\xE4`&\x919a*mV[`\x01_\x80a6\0`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F[RewardsUpdater] total: %s\0\0\0\0\0\0\x81RP\x83a\x1C\x95V[a6j`@Q\x80`\x80\x01`@R\x80`N\x81R` \x01aR\xD1`N\x919`@\x80Q\x86\x15\x15`%\x81\x18\x82\x01\x90\x92R_\x81Re\x01\x12\x13\x19\x16e\x90\x91\x02e\x05false\x18`\x05\x82\x01Ra6R\x8E`\x02\x0Ba= V[\x8Co\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a?\x7FV[\x82\x15a7\xF4Wa6\x91`@Q\x80``\x01`@R\x80`+\x81R` \x01aP\xA2`+\x919a*mV[_\x88\x8D\x14a6\xBAWa6\xA2\x8Da\x1F\x8EV[\x90\x9DPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P[a6\xC4\x81\x84aL\x8CV[\x92Pa6\xE2\x81\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a<\xA9V[a6\xEC\x90\x83aL\x8CV[\x91P\x81\x8F_\x8E`\x02\x0B`\x02\x0B\x81R` \x01\x90\x81R` \x01_ _\x82\x82Ta7\x13\x91\x90aL\x8CV[\x90\x91UPa7,\x90P\x8Aa7'\x8D\x8Fa<\xC4V[a@\x14V[\x99Pa7W`@Q\x80``\x01`@R\x80`%\x81R` \x01aS\xFE`%\x919\x82a3\xD0\x8F`\x02\x0Ba= V[a7\x96`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F[RewardsUpdater] New total: %s\0\0\x81RP\x84a\x1C\x95V[a7\xBE`@Q\x80``\x01`@R\x80`:\x81R` \x01aQ\xAA`:\x919a4<\x8E`\x02\x0Ba= V[a7\xF2`@Q\x80``\x01`@R\x80`7\x81R` \x01aR\n`7\x919\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1C\x95V[P[a7\xFE\x8A\x8Ca@.V[\x9BP\x92P`\x02\x8D\x81\x0B\x90\x8C\x90\x0B\x13\x15a6\0Wa4\xB5`@Q\x80``\x01`@R\x80`+\x81R` \x01aPw`+\x919a*mV[_a\x06;s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x83a@bV[\x80Qjconsole.log` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[```\x80`@Q\x01\x90P` \x81\x01`@R_\x81R\x80_\x19\x83[\x92\x81\x01\x92`0`\n\x82\x06\x01\x84S`\n\x90\x04\x80a8\xACWPP\x81\x90\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x90\x91\x01\x90\x81R\x91\x90PV[```\x1F\x19`B\x83`\x01\x1B\x01\x16`@Q\x01\x90P` \x81\x01`@R_\x81R\x80o0123456789abcdef`\x0FR\x82\x83\x01\x82\x03`\x01\x19\x85[`\x0F\x81\x16Q\x94\x82\x01\x94`\x01\x86\x01S`\x0F\x81`\x04\x1C\x16Q\x85S`\x08\x1C\x84\x83\x03a9/W\x80\x15a9dWc!\x94\x89Z_R`\x04`\x1C\xFD[PPP\x81\x90\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x90\x91\x01\x90\x81R\x92\x91PPV[a\x02x\x81`@Q`$\x01a9\xAB\x91\x90aH)V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x0B\xE7\x7FV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_k\x03;.<\x9F\xD0\x80<\xE8\0\0\0a:>\x83\x85aL\xEAV[a\x13\x9D\x91\x90aL\xB2V[_\x81a:>k\x03;.<\x9F\xD0\x80<\xE8\0\0\0\x85aL\xEAV[``\x82\x10a;{W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x82\x01\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x84\x01\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x86\x01\x80Qc\x0B\xE7\x7FV\x90\x95R` \x90\x92R\x90\x84\x90R\x90\x91a;\x08a:\xF8`D\x87aL\x9FV[a;\x03\x86`DaL\x8CV[a#\xC7V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x85\x01\x92\x90\x92R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x84\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x83\x01RPPV[_\x80\x80\x80a;\x89\x85\x87aL\x8CV[\x80Q` \x82\x01Q`@\x83\x01Q\x91\x96P\x94P\x92P\x90Pa;\xB3\x86a;\xAD\x81``aL\x8CV[\x87aA\x0EV[c\x0B\xE7\x7FV\x86R` \x80\x87\x01R`@\x86\x01\x85\x90Ra;\xE0a;\xD5\x87`\x1CaL\x8CV[a;\x03\x87`DaL\x8CV[a;\xF5a;\xEE\x87``aL\x8CV[\x87\x87aA\x0EV[\x92\x83R` \x83\x01\x91\x90\x91R`@\x90\x91\x01RPPV[_\x81\x81R`\x06` R`@\x81 \x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a<\x85W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a*+\x91\x90aL\x11V[_a\x13\x9D\x82a<\xC0g\r\xE0\xB6\xB3\xA7d\0\0\x86aL\xEAV[\x04\x90V[_a*+s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x84\x84aA!V[\x80\x82\x03`\x80\x81\x90\x1C\x15a\x06;Wc\xC9eN\xD4_R`\x04`\x1C\xFD[``a\x06;\x82aA\xF7V[a\x07<\x83\x83\x83`@Q`$\x01a=C\x93\x92\x91\x90aN\x1FV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xA3\xF5\xC79\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[a\x07<\x83\x83\x83`@Q`$\x01a=\xD6\x93\x92\x91\x90aNIV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xF3b\xCAY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_\x80\x80\x80a>\x81a>va>f`\x01\x88aN~V[_`<\x80\x83\x07\x91\x90\x91\x12\x91\x05\x03\x90V[`\x02\x81\x90\x0B`\x08\x1D\x91V[\x91P\x91Pa>\x99\x81a>\x93\x88\x85aBLV[\x90aB\x8EV[\x90\x94P\x90Pa>\xA8\x82\x82aCUV[\x92PPP\x92P\x92\x90PV[a\x07<\x83\x83\x83`@Q`$\x01a>\xCB\x93\x92\x91\x90aN\xBFV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x96\x9C\xDD\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[\x80\x82\x14a\x04\x9BW`@Q\x7F\x01\x84/\x8C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x11\xB3\x84\x84\x84\x84`@Q`$\x01a?\x99\x94\x93\x92\x91\x90aN\xE3V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x9F\xD0\t\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[\x81\x81\x01`\x80\x81\x90\x1C\x15a\x06;Wc\xC9eN\xD4_R`\x04`\x1C\xFD[_\x80\x80\x80a@Ja>v`<\x80\x88\x07\x84\x13\x90\x88\x05\x03`\x01aO-V[\x91P\x91Pa>\x99\x81a@\\\x88\x85aBLV[\x90aC\x80V[_\x81\x81R`\x06` R`@\x81 \x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x03\x82\x01`\x04\x82\x01R\x90\x91P_\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a@\xE1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90aA\x05\x91\x90aL\x11V[\x95\x94PPPPPV[aDB\x80a#%\x85\x85\x85c\xFF\xFF\xFF\xFF\x85\x16V[_\x82\x81R`\x06` \x90\x81R`@\x80\x83 \x84\x84R`\x04\x01\x90\x91R\x81 \x81\x90\x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x90\x91P_\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15aA\xAEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90aA\xD2\x91\x90aL\x11V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x98`\x80\x91\x90\x91\x1D\x97P\x95PPPPPPV[``_\x82\x12aB\tWa\x06;\x82a8\x93V[aB\x16\x82\x19`\x01\x01a8\x93V[\x80Q`-\x82R`\x01\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x01\x90\x81R\x92\x91PPV[_a\x13\x9Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x84\x84aDPV[_\x80_\x83`\xFF\x03\x90P_aC/\x82`\xFF\x16\x87\x90\x1B\x7F\x07\x06\x06\x05\x06\x02\x05\x04\x06\x02\x03\x02\x05\x04\x03\x01\x06\x05\x02\x05\x03\x03\x04\x01\x05\x05\x03\x04\0\0\0\0`\x1Fo\x84!\x08B\x10\x84!\x08\xCCc\x18\xC6\xDBmT\xBE\x83\x15`\x08\x1Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11`\x07\x1B\x17\x84\x81\x1Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x10`\x06\x1B\x17\x84\x81\x1Cc\xFF\xFF\xFF\xFF\x10`\x05\x1B\x17\x84\x81\x1Ca\xFF\xFF\x10`\x04\x1B\x17\x84\x81\x1C`\xFF\x10`\x03\x1B\x17\x93\x84\x1C\x1C\x16\x1A\x17\x90V[\x90P\x80a\x01\0\x14\x15\x93P\x83aCDW_a>\xA8V[\x81`\xFF\x16\x81\x03\x92PPP\x92P\x92\x90PV[_`<`\xFF\x83\x16aCl`\x01\x86\x90\x0Ba\x01\0aOnV[aCv\x91\x90aO-V[a\x13\x9D\x91\x90aOnV[_\x80_aD\x1B\x84`\xFF\x16\x86\x90\x1C~\x1F\r\x1E\x10\x0C\x1D\x07\x0F\t\x0B\x19\x13\x1C\x17\x06\x01\x0E\x11\x08\n\x1A\x14\x18\x02\x12\x1B\x15\x03\x16\x04\x05\x81\x19`\x01\x01\x90\x91\x16a\x01\xE0\x7F\x80@@UC\0RfD2\0\0P a\x06t\x050&\x02\0\0\x10u\x06 \x01v\x11pw`\xFC\x7F\xB6\xDBm\xB6\xDD\xDD\xDD\xDD\xD3M4\xD3I$\x92I!\x08B\x10\x8Cc\x18\xC69\xCEs\x9C\xFF\xFF\xFF\xFF\x84\x02`\xF8\x1C\x16\x1B`\xF7\x1C\x16\x90\x81\x1Cc\xD7dS\xE0\x04`\x1F\x16\x91\x90\x91\x1A\x17\x90V[\x90P\x80a\x01\0\x14\x15\x92P\x82aD1W`\xFFaD8V[\x83`\xFF\x16\x81\x01[\x91PP\x92P\x92\x90PV[\x80\x82\x82\x85`\x04Z\xFAPPPPV[_\x82\x81R`\x06` \x90\x81R`@\x80\x83 \x84\x84R`\x05\x01\x90\x91R\x81 \x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a@\xE1W=_\x80>=_\xFD[_` \x82\x84\x03\x12\x15aD\xE9W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\x9DW_\x80\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02xW_\x80\xFD[_`\xA0\x82\x84\x03\x12\x15aE1W_\x80\xFD[P\x91\x90PV[_`\x80\x82\x84\x03\x12\x15aE1W_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aEWW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aEnW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x12\tW_\x80\xFD[_\x80_\x80_a\x01`\x86\x88\x03\x12\x15aE\x9AW_\x80\xFD[\x855aE\xA5\x81aE\0V[\x94PaE\xB4\x87` \x88\x01aE!V[\x93PaE\xC3\x87`\xC0\x88\x01aE7V[\x92Pa\x01@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aE\xDFW_\x80\xFD[aE\xEB\x88\x82\x89\x01aEGV[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[_` \x82\x84\x03\x12\x15aF\x0CW_\x80\xFD[\x815k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\x9DW_\x80\xFD[_` \x82\x84\x03\x12\x15aF7W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aFMW_\x80\xFD[\x82\x01` \x81\x85\x03\x12\x15a\x13\x9DW_\x80\xFD[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x16\x81R`\xE0` \x82\x01R_aF\xE4`\xE0\x83\x01\x89aF^V[\x82\x81\x03`@\x84\x01RaF\xF6\x81\x89aF^V[``\x84\x01\x88\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`\x80\x85\x01R`\xA0\x84\x01\x86\x90R\x83\x81\x03`\xC0\x85\x01R\x84Q\x80\x82R` \x80\x87\x01\x93P\x90\x91\x01\x90_[\x81\x81\x10\x15aGXW\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aG:V[P\x90\x9B\x9APPPPPPPPPPPV[_\x80_\x80_\x80a\x01\x80\x87\x89\x03\x12\x15aG\x7FW_\x80\xFD[\x865aG\x8A\x81aE\0V[\x95PaG\x99\x88` \x89\x01aE!V[\x94PaG\xA8\x88`\xC0\x89\x01aE7V[\x93Pa\x01@\x87\x015\x92Pa\x01`\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aG\xCCW_\x80\xFD[aG\xD8\x89\x82\x8A\x01aEGV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[_\x80` \x83\x85\x03\x12\x15aG\xFBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aH\x11W_\x80\xFD[aH\x1D\x85\x82\x86\x01aEGV[\x90\x96\x90\x95P\x93PPPPV[` \x81R_a\x13\x9D` \x83\x01\x84aF^V[_\x80` \x83\x85\x03\x12\x15aHLW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aHbW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13aHrW_\x80\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aH\x88W_\x80\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15aH\x9CW_\x80\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x80_`\xE0\x84\x86\x03\x12\x15aH\xBEW_\x80\xFD[\x835aH\xC9\x81aE\0V[\x92PaH\xD8\x85` \x86\x01aE!V[\x91P`\xC0\x84\x015aH\xE8\x81aE\0V[\x80\x91PP\x92P\x92P\x92V[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12aI&W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aI@W_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x12\tW_\x80\xFD[` \x81R\x81` \x82\x01R\x81\x83`@\x83\x017_\x81\x83\x01`@\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x01\x01\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15aI\xDDW_\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aI\xF3W_\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13aJ\x03W_\x80\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aJ\x1DWaJ\x1DaI\xA0V[`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`?\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x85\x01\x16\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15aJ\x89WaJ\x89aI\xA0V[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15aJ\xA0W_\x80\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15aJ\xFAW_\x80\xFD[\x815a\x13\x9D\x81aE\0V[_` \x82\x84\x03\x12\x15aK\x15W_\x80\xFD[\x815\x80`\x02\x0B\x81\x14a\x13\x9DW_\x80\xFD[_` \x82\x84\x03\x12\x15aK5W_\x80\xFD[\x815b\xFF\xFF\xFF\x81\x16\x81\x14a\x13\x9DW_\x80\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x16\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x84\x01Q\x16` \x82\x01Rb\xFF\xFF\xFF`@\x84\x01Q\x16`@\x82\x01R``\x83\x01Q`\x02\x0B``\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x84\x01Q\x16`\x80\x82\x01RaK\xF6`\xA0\x82\x01\x83\x80Q\x15\x15\x82R` \x80\x82\x01Q\x90\x83\x01R`@\x90\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91\x01RV[a\x01 a\x01\0\x82\x01R_a*+a\x01 \x83\x01_\x81R` \x01\x90V[_` \x82\x84\x03\x12\x15aL!W_\x80\xFD[PQ\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aL\x85WaL\x85aL(V[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x06;Wa\x06;aL(V[\x81\x81\x03\x81\x81\x11\x15a\x06;Wa\x06;aL(V[_\x82aL\xE5W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[P\x04\x90V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x06;Wa\x06;aL(V[`@\x81R_aM\x13`@\x83\x01\x85aF^V[\x90P\x82` \x83\x01R\x93\x92PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x7F[CALLDATAREADER] reading next \0\0\x81R_aMj`\x1E\x83\x01\x85aM\"V[\x7F byte(s) at \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RaM\x9A`\x0C\x82\x01\x85aM\"V[\x7F as %s -> %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x0C\x01\x95\x94PPPPPV[_a*+aM\xD7\x83\x86aM\"V[\x84aM\"V[``\x81R_aM\xEF``\x83\x01\x86aF^V[\x82\x81\x03` \x84\x01RaN\x01\x81\x86aF^V[\x90P\x82\x81\x03`@\x84\x01RaN\x15\x81\x85aF^V[\x96\x95PPPPPPV[``\x81R_aN1``\x83\x01\x86aF^V[\x84` \x84\x01R\x82\x81\x03`@\x84\x01RaN\x15\x81\x85aF^V[``\x81R_aN[``\x83\x01\x86aF^V[\x82\x81\x03` \x84\x01RaNm\x81\x86aF^V[\x91PP\x82`@\x83\x01R\x94\x93PPPPV[`\x02\x82\x81\x0B\x90\x82\x90\x0B\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x81\x12b\x7F\xFF\xFF\x82\x13\x17\x15a\x06;Wa\x06;aL(V[``\x81R_aN\xD1``\x83\x01\x86aF^V[` \x83\x01\x94\x90\x94RP`@\x01R\x91\x90PV[`\x80\x81R_aN\xF5`\x80\x83\x01\x87aF^V[\x82\x81\x03` \x84\x01RaO\x07\x81\x87aF^V[\x90P\x82\x81\x03`@\x84\x01RaO\x1B\x81\x86aF^V[\x91PP\x82``\x83\x01R\x95\x94PPPPPV[`\x02\x81\x81\x0B\x90\x83\x90\x0B\x01b\x7F\xFF\xFF\x81\x13\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x82\x12\x17\x15a\x06;Wa\x06;aL(V[_\x82`\x02\x0B\x82`\x02\x0B\x02\x80`\x02\x0B\x91P\x80\x82\x14a\x15iWa\x15iaL(V\xFE[PoolRewardsManager] retrieving assets, building pool id[RewardsUpdater] Decoding bounds of reward amounts list[RewardsUpdater] Starting core reward loop[RewardsUpdater] Pool current tick: %d[RewardsUpdater] Entering _decodeAndReward[RewardsUpdater] Main reward loop complete.[RewardsUpdater] Initialized, updating tick[RewardsUpdater] Updating global growth by cumulativeGrowth[PoolRewardsManager] entering _rewardPool[RewardsUpdater] Decoding startTick[RewardsUpdater] entering _rewardAbove[RewardsUpdater] Decoding update start liquidity[RewardsUpdater] Increasing tick %s growth outside by %e18[RewardsUpdater] entering _rewardBelow[RewardsUpdater] Retrieved and updated liquidity to: %s[RewardsUpdater] currentTickReward: %s[CALLDATAREADER] reading next %s byte(s) at %s as bytes ->[RewardsUpdater] Retrieving pool %x current tick[RewardsUpdater] reward update loop (initialized: %s, tick: %s, liquidity: %s)[RewardsUpdater] Completed core reward loop, checking end liquidity[PoolRewardsManager] decoding asset indices[Asset] Attempting to retrieve asset[%s] from array[RewardsUpdater] Final values (total: %s, cumulativeGrowth: s)[RewardsUpdater] Adding %s to tick %s[RewardsUpdater] Reading additional amount for current tick\xA1dsolcC\0\x08\x1A\0\n",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50600436106100c4575f3560e01c806384b0196e1161007d57806397125bee1161005857806397125bee14610207578063c6a98eb914610248578063dc98354e1461025b575f80fd5b806384b0196e146101795780638db2b6521461019457806391dd7346146101e7575f80fd5b80632a6330cf116100ad5780632a6330cf14610126578063577db24d14610139578063760f5f271461014c575f80fd5b8063116a5550146100c8578063259982e5146100dd575b5f80fd5b6100db6100d63660046144d9565b61026e565b005b6100f06100eb366004614585565b61027b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100db6101343660046145fc565b610316565b6100db610147366004614627565b6103d0565b6007546101609067ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161011d565b61018161049f565b60405161011d97969594939291906146aa565b6101af6101a2366004614769565b5f80965096945050505050565b604080517fffffffff00000000000000000000000000000000000000000000000000000000909316835260208301919091520161011d565b6101fa6101f53660046147ea565b610547565b60405161011d9190614829565b60075461022b906801000000000000000090046bffffffffffffffffffffffff1681565b6040516bffffffffffffffffffffffff909116815260200161011d565b6100db61025636600461483b565b610641565b6100f06102693660046148ac565b610741565b6102783382610847565b50565b5f3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146102eb576040517ff832861400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f259982e50000000000000000000000000000000000000000000000000000000095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610385576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600780546bffffffffffffffffffffffff90921668010000000000000000027fffffffffffffffffffffffff000000000000000000000000ffffffffffffffff909216919091179055565b6103d8610882565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166348c8949161041e83806148f3565b6040518363ffffffff1660e01b815260040161043b929190614954565b5f604051808303815f875af1158015610456573d5f803e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261049b91908101906149cd565b5050565b7f0f000000000000000000000000000000000000000000000000000000000000006060805f808083610535604080518082018252600881527f416e677374726f6d0000000000000000000000000000000000000000000000006020808301919091528251808401909352600283527f76310000000000000000000000000000000000000000000000000000000000009083015291565b97989097965046955030945091925090565b60603373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105b8576040517ff832861400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825f6105c382610955565b90925090505f6105d28361097c565b90935090506105e082610999565b6105ea8383610af1565b92506105f68383610d3b565b9250610603838383610de4565b925061061183836001610ebf565b925061061c82610f2a565b61062783878761119c565b5050604080515f8152602081019091529150505b92915050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146106b0576040517f23019e6700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181101561073c575f8383838181106106cd576106cd614abd565b90506020020160208101906106e29190614aea565b73ffffffffffffffffffffffffffffffffffffffff165f90815260066020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00811660ff90911615179055506001016106b2565b505050565b5f3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146107b1576040517ff832861400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b603c6107c36080850160608601614b05565b60020b1415806107e757505f6107df6060850160408601614b25565b62ffffff1614155b1561081e576040517fc256622b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fdc98354e000000000000000000000000000000000000000000000000000000009392505050565b80600c5263daa050e9600452815f52601f600c20600160ff83161b8082541881811661087a57638cb888725f526004601cfd5b909155505050565b6007544367ffffffffffffffff909116036108c9576040517fd8a6b89b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b335f9081526006602052604090205460ff16610911576040517f5cd26b6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61091a436111b9565b600780547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff92909216919091179055565b5f805f6109638460446111d6565b90945090508361097282611210565b9250925050915091565b5f805f61098a8460246111d6565b909450905083610972826112ac565b5f6109a382611346565b90505f5b8181101561073c575f6109ba8483611351565b90505f6109c6826113a4565b90505f6109d2836113cc565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630b0d9c09610a2d8373ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604481018590526064015f604051808303815f87803b158015610a9d575f80fd5b505af1158015610aaf573d5f803e3d5ffd5b50505073ffffffffffffffffffffffffffffffffffffffff82165f908152600160205260409020610ae19150836113d7565b5050600190920191506109a79050565b5f80610afc846113ef565b90945090505b808414610d335760148401935f8080610b1b8488611447565b919450925090505f73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663f3cd914c610bec3087876040805160a080820183525f80835260208301819052828401819052606083018190526080830152825190810190925290808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff90811682525f6020830152603c6040830152861660609091015290509392505050565b60405180606001604052808615158152602001610c10610c0b8b6114d4565b6114e0565b815260200186610c345773fffd8963efd1fc6a506488495d951d5263988d25610c3b565b6401000276a45b73ffffffffffffffffffffffffffffffffffffffff168152506040518363ffffffff1660e01b8152600401610c71929190614b47565b6020604051808303815f875af1158015610c8d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cb19190614c11565b9050610ced610cc08260801d90565b73ffffffffffffffffffffffffffffffffffffffff86165f90815260016020526040902090600f0b611541565b50610d28610cfb82600f0b90565b73ffffffffffffffffffffffffffffffffffffffff85165f90815260016020526040902090600f0b611541565b505050505050610b02565b509192915050565b5f80610d46846113ef565b90945090505f610d54611570565b60408051610120810182525f60208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101919091527fd29cd8ad130638ce44ea185648d2712345e8e456fef8153328ee40916df2790e81529091505b828614610dda57610dd3868284886115ba565b9550610dc0565b5093949350505050565b5f80610dee611570565b60408051610160810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290526101408101829052919250610e51876113ef565b90975090505f6008555b808714610eb45760088054610ea0917f5b25735d0000000000000000000000000000000000000000000000000000000091905f610e9783614c55565b919050556117a5565b610ead8783858989611839565b9650610e5b565b509495945050505050565b5f80610eca856113ef565b90955090505b808514610f21575f80610ee38787611a8b565b73ffffffffffffffffffffffffffffffffffffffff82165f9081526020899052604090209299509093509150610f199082611bf7565b505050610ed0565b50929392505050565b5f610f3482611346565b90505f5b8181101561073c575f610f4b8483611351565b90505f610f57826113cc565b90505f610f6383611c06565b90505f610f6f84611c12565b9050610fa8610f7e8284614c8c565b73ffffffffffffffffffffffffffffffffffffffff85165f90815260016020526040902090611bf7565b5073ffffffffffffffffffffffffffffffffffffffff83165f9081526020819052604081208054849290610fdd908490614c8c565b9091555050801561118c577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a58411946110418573ffffffffffffffffffffffffffffffffffffffff1690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015f604051808303815f87803b1580156110a4575f80fd5b505af11580156110b6573d5f803e3d5ffd5b506110fc9250505073ffffffffffffffffffffffffffffffffffffffff84167f000000000000000000000000000000000000000000000000000000000000000083611c1e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166311da60b46040518163ffffffff1660e01b81526004016020604051808303815f875af1158015611166573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061118a9190614c11565b505b505060019092019150610f389050565b8082018084146111b3576301842f8c5f526004601cfd5b50505050565b5f6801000000000000000082106111d2576111d2611c67565b5090565b5f805f6111e2856113ef565b90955090505f846111f38784614c9f565b6111fd9190614cb2565b9193505060201b841790505b9250929050565b5f8061121b83611346565b90505f805b82811015610f21575f61123b6112368784611351565b6113cc565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16116112a2576040517f80f11acf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b9150600101611220565b5f806112b783611346565b9050805f036112c7575090919050565b5f6112da6112d58583611c74565b611c8a565b905060015b82811015610f21575f6112f56112d58784611c74565b90508263ffffffff168163ffffffff161161133c576040517ff35f939900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b91506001016112df565b5f61063b8260201c90565b5f61137460405180606001604052806033815260200161538d6033913983611c95565b61138082845b90611d26565b61138b604483614cea565b63ffffffff84165b61139d9190614c8c565b9392505050565b5f6113b46014835b013560801c90565b6fffffffffffffffffffffffffffffffff1692915050565b5f813560601c61063b565b5f61063b6113e683855c614c8c565b91508382611d7b565b5f8060408051808201909152600f81527f7532342f4c6973742e6c656e67746800000000000000000000000000000000006020820152611433908490600390611d82565b5050600380820192823560e81c9092010190565b5f805f8061146561123661145a88611e28565b879061ffff16611351565b90505f61148261123661147789611e37565b889061ffff16611351565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16109250826114c15780826114c4565b81815b9098909750929550919350505050565b5f6113b46004836113ac565b5f7f800000000000000000000000000000000000000000000000000000000000000082111561153b576040517f35278d1200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505f0390565b815c818103908082105f84131461155f5763c9654ed45f526004601cfd5b6115698483611d7b565b5092915050565b5f6115b561157c611e43565b60408051604281019091527f19010000000000000000000000000000000000000000000000000000000000008152600281019190915290565b905090565b5f806115c586611f3b565b600181161515606088015290965090506115de86611f8e565b6fffffffffffffffffffffffffffffffff166020870152955061160086611f8e565b6fffffffffffffffffffffffffffffffff16604087015295505f61162387611fe1565b90975090506116396112368561ffff8416611351565b73ffffffffffffffffffffffffffffffffffffffff1660808701525f61165e88611fe1565b90985090506116746112368661ffff8416611351565b73ffffffffffffffffffffffffffffffffffffffff1660a08801525050600281166116a057855f6116a9565b6116a986612034565b73ffffffffffffffffffffffffffffffffffffffff1660c087015295505f6116d5876004841615612087565b60e089015290975090505f61170c6117008867ffffffffffffffff4316610100820152610120902090565b60228801526042872090565b905061171781612132565b5f6080841661172f5761172a8983612183565b611739565b61173989836121f2565b90995090506117488382612236565b6080880151602089015161176391839160018816151561227e565b5f6117738960c0015183811c1890565b9050611797818a60a001518b604001516117928960ff16600116151590565b61232c565b509798975050505050505050565b5f805f805f6117e2565b5f5b60208110156117ca5782811a156117ca576001016117b1565b80825260031b6101000391821c90911b602090910152565b5f519450602051935060405192506060519150608051905063b60e72cc5f526040602052856040526118158760606117af565b611821601c60846123c7565b5f949094526020929092526040526060526080525050565b5f8061184487611f3b565b909750905061187e7f202076617269616e743a202573000000000000000000000000000000000000006118798360ff166123d9565b612491565b6118888682612504565b60018116151560808701525f806118a6858a886008871615156125b7565b73ffffffffffffffffffffffffffffffffffffffff91821660c08d0152911660a08b015290995091506118da90508861264e565b6060890181905290985081101561191d576040517f8e1edfa400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002821661192c57875f611935565b61193588612034565b73ffffffffffffffffffffffffffffffffffffffff1660e089015297505f611961896004851615612087565b6101008b01529099509050611977888a856126a7565b6007549099505f9081906119ac908b908d90889088906801000000000000000090046bffffffffffffffffffffffff166126eb565b919c50925090506119bd8a866129bc565b5f6119c98b878c612a11565b90505f608087166119e3576119de8d83612183565b6119ed565b6119ed8d836121f2565b909d5090506010871615611a2457611a108c610140015164ffffffffff16612a33565b611a1f818d6101200151610847565b611a2d565b611a2d82612132565b611a378582612236565b60a08c0151611a4e9082908660018b16151561227e565b5f611a5e8d60e0015183811c1890565b9050611a79818e60c00151866117928c60ff16600116151590565b509b9c9b505050505050505050505050565b5f8080611aaf60405180606001604052806029815260200161510860299139612a6d565b5f80611ad26040518060600160405280602b8152602001615362602b9139612a6d565b5f611adc88611fe1565b90985090505f611aeb89611fe1565b9099509050611b11604051806060016040528060388152602001614f8e60389139612a6d565b611b226112368961ffff8516611351565b9350611bcb611bc43086611b3d6112368d61ffff8816611351565b6040805160a080820183525f80835260208301819052828401819052606083018190526080830152825190810190925290808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff90811682525f6020830152603c6040830152861660609091015290509392505050565b60a0902090565b5f818152600560205260409020909350611be690848b612afc565b909a94995097509295505050505050565b5f61063b6113e683855c614c9f565b5f6113b46024836113ac565b5f6113b46034836113ac565b81601452806034526fa9059cbb0000000000000000000000005f5260205f604460105f875af13d1560015f51141716611c5e576390b8ec185f526004601cfd5b5f603452505050565b6335278d125f526004601cfd5b5f611c7f828461137a565b61138b602483614cea565b5f813560e01c61063b565b61049b8282604051602401611cab929190614d01565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9710a9d000000000000000000000000000000000000000000000000000000000179052612d51565b5f611d318360201c90565b905080821061073c576040517fbc5f997c00000000000000000000000000000000000000000000000000000000815260048101839052602481018290526044015b60405180910390fd5b80825d5050565b823560088302610100031c6111b3611dc97f20000000000000000000000000000000000000000000000000000000000000006006611dc260ff8816612d5a565b9190612d65565b611dd66003875b90612e2b565b604051602001611de7929190614d39565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905283611e238460ff8816612e2b565b612e6f565b5f61063b81835b013560f01c90565b5f61063b600283611e2f565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f0000000000000000000000000000000000000000000000000000000000000000461416611f385750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a0902090565b90565b5f8060408051808201909152600f81527f4f7264657256617269616e744d617000000000000000000000000000000000006020820152611f7f908490600190611d82565b50506001810191903560f81c90565b5f8060408051808201909152600481527f75313238000000000000000000000000000000000000000000000000000000006020820152611fd2908490601090611d82565b50506010810191903560801c90565b5f8060408051808201909152600381527f75313600000000000000000000000000000000000000000000000000000000006020820152612025908490600290611d82565b50506002810191903560f01c90565b5f8060408051808201909152600781527f61646472657373000000000000000000000000000000000000000000000000006020820152612078908490601490611d82565b50506014810191903560601c90565b5f807fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708361212857843560e81c6003860195506040516014606403810182810160405282888237828120935050818701965060448101517f7407905c00000000000000000000000000000000000000000000000000000000825260406024830152601483039250826044830152606483018160201b178260c01b1794505050505b8492509250925092565b5f818152600360205260409020805c15612178576040517f8a2ef11600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61049b816001611d7b565b5f8061218e84612034565b9094509050365f61219e86612f02565b919750925090506121b183868484613009565b6121e7576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509394909350915050565b5f806040518381525f6020820152604185603f8301376041850194506020600160808360015afa519150503d61222f57638baa579f5f526004601cfd5b9293915050565b811561049b5763ffffffff82168260c01c8260048201528360201c60205f84845f855af1925050506324a2e44b5f5114601f3d1116811661073c5763f959fdae5f526004601cfd5b73ffffffffffffffffffffffffffffffffffffffff83165f90815260016020526040902082906122ae90826113d7565b5081156123035773ffffffffffffffffffffffffffffffffffffffff8086165f908152600260209081526040808320938816835292905290812080548392906122f8908490614c9f565b909155506123259050565b61232573ffffffffffffffffffffffffffffffffffffffff851686308461304e565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff83165f908152600160205260409020829061235c9082611bf7565b5081156123a65773ffffffffffffffffffffffffffffffffffffffff8086165f908152600260209081526040808320938816835292905290812080548392906122f8908490614c8c565b61232573ffffffffffffffffffffffffffffffffffffffff85168683611c1e565b6130a6806111b3848463ffffffff8416565b5f601082161561243a57602082161561241357507f5374616e64696e675f5061727469616c00000000000000000000000000000000919050565b507f5374616e64696e675f4578616374000000000000000000000000000000000000919050565b602082161561246a57507f466c6173685f5061727469616c00000000000000000000000000000000000000919050565b507f466c6173685f4578616374000000000000000000000000000000000000000000919050565b5f80516020805160408051606080516080805160a05160c051634b5c4277909b529786905294529596939591949193906124cc908a906117af565b6124d78860a06117af565b6124e3601c60c46123c7565b5f9690965260209490945260409290925260605260805260a05260c0525050565b602081161561256257601081161561253c57507fa9e5294d444fbaeb5ca05f2b24c5d8294410f31413048e445d881e2ef69e60009052565b507febd5091c396f79056e45455f4a93bbb016c217314bb2356b22d1c13833ac88619052565b601081161561259157507fef0cce88fda04ab3f84618823372cf76f64b4511ce8c79630eabc29ebc9b968f9052565b507f5b9d49cfed48f8c9d1a863f61c2479c579fa299c25a33211fc857390cecce6d49052565b5f805f805f6125c588611fe1565b90985061ffff1690505f6125d98a83611c74565b90505f6125e5826130bd565b90505f6126026112366125f785611e28565b8c9061ffff16611351565b90505f61261f61123661261486611e37565b8d9061ffff16611351565b90508961262e57808284612639565b8181612639856130c8565b9d9f919e509c9b509950505050505050505050565b5f8061269b60206040518060400160405280600481526020017f753235360000000000000000000000000000000000000000000000000000000081525085611d829092919063ffffffff16565b50506020810191903590565b5f60108216156126d15760088361013886013760056008840161015b860137600d830192506126e3565b67ffffffffffffffff43166101208501525b509092915050565b5f80808060208716156127e3575f806127038a611f8e565b909a506fffffffffffffffffffffffffffffffff1691506127238a611f8e565b909a506fffffffffffffffffffffffffffffffff1690506127438a611f8e565b60208d0184905260408d01839052909a506fffffffffffffffffffffffffffffffff169250818310156127a2576040517fc4daf00300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808311156127dc576040517f4418233100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050612824565b6127ec88611f8e565b9098506fffffffffffffffffffffffffffffffff16905060408716612811575f612814565b60015b60ff1660208a0152604089018190525b61284e7f70726963653a2025323765000000000000000000000000000000000000000000876117a5565b6040871615158061286157506020871615155b1561290d579150816128937f7175616e7469747920696e3a2025313865000000000000000000000000000000846117a5565b61289d86846130ea565b91506128c97f7175616e74697479206f7574202870726520666565293a202531386500000000836117a5565b6128dc826128d781886130f7565b613102565b91506129087f7175616e74697479206f75742028706f737420666565293a2025313865000000836117a5565b6129af565b90508061293a7f7175616e74697479206f75743a20253138650000000000000000000000000000836117a5565b612944868361310d565b92506129707f7175616e7469747920696e202870726520666565293a20253138650000000000846117a5565b6129838361297e81886130f7565b613118565b92506129af7f7175616e7469747920696e2028706f737420666565293a202531386500000000846117a5565b5095979096509350505050565b5f601082166129cd576101406129d1565b6101605b9050826129fe7f7374727563744c656e6774683a20257300000000000000000000000000000000836117a5565b6111b381612a0c8482614c8c565b613120565b5f612a2b612a1f8585613169565b60228401526042832090565b949350505050565b80421115610278576040517f203d82d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61027881604051602401612a819190614829565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052612d51565b5f80612b1f6040518060600160405280602a815260200161504d602a9139612a6d565b5f80612b4260405180606001604052806023815260200161513160239139612a6d565b5f612b4c86613189565b9096509050612b736040518060600160405280603081526020016152a16030913988611c95565b5f612b7d886131db565b9050612ba4604051806060016040528060268152602001615027602691398260020b613228565b612bc560405180606001604052806030815260200161517a60309139612a6d565b5f612bcf88611f8e565b9098509050612bf5604051806060016040528060378152602001614fc660379139612a6d565b5f612bff896113ef565b9099509050612c256040518060600160405280602a8152602001614ffd602a9139612a6d565b8260020b8460020b1315612c4757612c428b848b878e87876132b9565b612c56565b612c568b848b878e8787613598565b929b509098509650945050505050612c8560405180608001604052806043815260200161531f60439139612a6d565b5f612c8f87613832565b9050806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1614612d0a576040517f6429cfd20000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff808416600483015282166024820152604401611d72565b612d2b6040518060600160405280603b81526020016150cd603b9139612a6d565b82886001015f828254612d3e9190614c8c565b9091555086955050505050935093915050565b61027881613873565b606061063b82613893565b825160609082811015610f2157604080517fff00000000000000000000000000000000000000000000000000000000000000861660208201528151600181830301815260219091019091525f612dbb8386614c9f565b90505b80600116600103612dee578187604051602001612ddc929190614dc9565b60405160208183030381529060405296505b600181901c90508182604051602001612e08929190614dc9565b60405160208183030381529060405291505f8111612dbe57509495945050505050565b6060612e3783836138f3565b805161307882526002017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9091019081529392505050565b61073c838383604051602401612e8793929190614ddd565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2ced7cef00000000000000000000000000000000000000000000000000000000179052612d51565b5f368160408051808201909152601081527f7532342f62797465732e6c656e677468000000000000000000000000000000006020820152612f47908590600390611d82565b6040805160608101909152603a808252853560e81c80870160039081019390880192612fb091906152676020830139612fa57f20000000000000000000000000000000000000000000000000000000000000006006611dc286612d5a565b611e23600387611dd0565b612fee82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061399792505050565b5050505050813560e81c808301600390810194930192909150565b5f604051631626ba7e60e01b80825285600483015260248201604081528460448401528486606485013760208160648701858b5afa9051909114169695505050505050565b60405181606052826040528360601b602c526f23b872dd000000000000000000000000600c5260205f6064601c5f895af13d1560015f5114171661309957637939f4245f526004601cfd5b5f60605260405250505050565b5f8082846a636f6e736f6c652e6c6f675afa505050565b5f600482013561063b565b5f61063b82760a70c3c40a64e6c51999090b65f67d9240000000000000614cb2565b5f61139d83835b90613a26565b5f61139d82846130f1565b5f61139d8284614c9f565b5f61139d8284613a48565b5f8183611393565b815b8181101561073c575f613136826020614c8c565b9050828111156131435750815b613156826131518184614c9f565b613a60565b50613162602082614c8c565b9050613122565b5f806010831661317b5761014061317f565b6101605b9093209392505050565b5f806040805180820190915260038082527f693234000000000000000000000000000000000000000000000000000000000060208301526131cc91859190611d82565b50506003810191903560e81d90565b5f61063b61321f73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001684613c0a565b60a01c60020b90565b61049b828260405160240161323e929190614d01565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167faf7faa3800000000000000000000000000000000000000000000000000000000179052612d51565b5f8080806132de60405180606001604052806026815260200161515460269139612a6d565b60015f805b82156134785761330a6040518060600160405280602b81526020016150a2602b9139612a6d565b5f888d146133335761331b8d611f8e565b909d506fffffffffffffffffffffffffffffffff1690505b61333d8184614c8c565b925061335b818b6fffffffffffffffffffffffffffffffff16613ca9565b6133659083614c8c565b9150818f5f8e60020b60020b81526020019081526020015f205f82825461338c9190614c8c565b909155506133a590508a6133a08d8f613cc4565b613d06565b99506133d56040518060600160405280602581526020016153fe60259139826133d08f60020b613d20565b613d2b565b6134146040518060400160405280601e81526020017f5b52657761726473557064617465725d204e657720746f74616c3a202573000081525084611c95565b6134426040518060600160405280603a81526020016151aa603a913961343c8e60020b613d20565b84613dbe565b61347660405180606001604052806037815260200161520a603791398b6fffffffffffffffffffffffffffffffff16611c95565b505b6134828a8c613e51565b9b50925060028b810b908e900b126132e3576134b56040518060600160405280602b8152602001615077602b9139612a6d565b878c14613556576134dd6040518060600160405280603b8152602001615423603b9139612a6d565b5f6134e78d611f8e565b909d506fffffffffffffffffffffffffffffffff1690506135206040518060600160405280602681526020016152416026913982611c95565b61352a8184614c8c565b9250613548818b6fffffffffffffffffffffffffffffffff16613ca9565b6135529083614c8c565b9150505b6135796040518060600160405280603e81526020016153c0603e91398383613eb3565b6135838c89613f46565b9a9d909c50999a509598975050505050505050565b5f8080806135bd6040518060600160405280602681526020016151e460269139612a6d565b60015f806136006040518060400160405280601a81526020017f5b52657761726473557064617465725d20746f74616c3a20257300000000000081525083611c95565b61366a6040518060800160405280604e81526020016152d1604e9139604080518615156025811882019092525f815265011213191665909102650566616c73651860058201526136528e60020b613d20565b8c6fffffffffffffffffffffffffffffffff16613f7f565b82156137f4576136916040518060600160405280602b81526020016150a2602b9139612a6d565b5f888d146136ba576136a28d611f8e565b909d506fffffffffffffffffffffffffffffffff1690505b6136c48184614c8c565b92506136e2818b6fffffffffffffffffffffffffffffffff16613ca9565b6136ec9083614c8c565b9150818f5f8e60020b60020b81526020019081526020015f205f8282546137139190614c8c565b9091555061372c90508a6137278d8f613cc4565b614014565b99506137576040518060600160405280602581526020016153fe60259139826133d08f60020b613d20565b6137966040518060400160405280601e81526020017f5b52657761726473557064617465725d204e657720746f74616c3a202573000081525084611c95565b6137be6040518060600160405280603a81526020016151aa603a913961343c8e60020b613d20565b6137f260405180606001604052806037815260200161520a603791398b6fffffffffffffffffffffffffffffffff16611c95565b505b6137fe8a8c61402e565b9b50925060028d810b908c900b1315613600576134b56040518060600160405280602b8152602001615077602b9139612a6d565b5f61063b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001683614062565b80516a636f6e736f6c652e6c6f67602083015f808483855afa5050505050565b60606080604051019050602081016040525f8152805f19835b928101926030600a8206018453600a9004806138ac5750508190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909101908152919050565b6060601f1960428360011b0116604051019050602081016040525f8152806f30313233343536373839616263646566600f528283018203600119855b600f811651948201946001860153600f8160041c1651855360081c84830361392f57801561396457632194895a5f526004601cfd5b5050508190037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090910190815292915050565b610278816040516024016139ab9190614829565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f0be77f5600000000000000000000000000000000000000000000000000000000179052612d51565b5f6b033b2e3c9fd0803ce8000000613a3e8385614cea565b61139d9190614cb2565b5f81613a3e6b033b2e3c9fd0803ce800000085614cea565b60608210613b7b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0820180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0840180517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe086018051630be77f569095526020909252908490529091613b08613af8604487614c9f565b613b03866044614c8c565b6123c7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08501929092527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08401527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08301525050565b5f808080613b898587614c8c565b805160208201516040830151919650945092509050613bb386613bad816060614c8c565b8761410e565b630be77f56865260208087015260408601859052613be0613bd587601c614c8c565b613b03876044614c8c565b613bf5613bee876060614c8c565b878761410e565b92835260208301919091526040909101525050565b5f81815260066020526040812081906040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff851690631e2eaeaf90602401602060405180830381865afa158015613c85573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a2b9190614c11565b5f61139d82613cc0670de0b6b3a764000086614cea565b0490565b5f612a2b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168484614121565b808203608081901c1561063b5763c9654ed45f526004601cfd5b606061063b826141f7565b61073c838383604051602401613d4393929190614e1f565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa3f5c73900000000000000000000000000000000000000000000000000000000179052612d51565b61073c838383604051602401613dd693929190614e49565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff362ca5900000000000000000000000000000000000000000000000000000000179052612d51565b5f808080613e81613e76613e66600188614e7e565b5f603c8083079190911291050390565b600281900b60081d91565b91509150613e9981613e93888561424c565b9061428e565b9094509050613ea88282614355565b925050509250929050565b61073c838383604051602401613ecb93929190614ebf565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f969cdd0300000000000000000000000000000000000000000000000000000000179052612d51565b80821461049b576040517f01842f8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6111b384848484604051602401613f999493929190614ee3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f9fd009f500000000000000000000000000000000000000000000000000000000179052612d51565b818101608081901c1561063b5763c9654ed45f526004601cfd5b5f80808061404a613e76603c8088078413908805036001614f2d565b91509150613e998161405c888561424c565b90614380565b5f81815260066020526040812081906040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526003820160048201529091505f9073ffffffffffffffffffffffffffffffffffffffff861690631e2eaeaf90602401602060405180830381865afa1580156140e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906141059190614c11565b95945050505050565b6144428061232585858563ffffffff8516565b5f8281526006602090815260408083208484526004019091528120819081906040517f1e2eaeaf000000000000000000000000000000000000000000000000000000008152600481018290529091505f9073ffffffffffffffffffffffffffffffffffffffff881690631e2eaeaf90602401602060405180830381865afa1580156141ae573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906141d29190614c11565b6fffffffffffffffffffffffffffffffff81169860809190911d975095505050505050565b60605f82126142095761063b82613893565b6142168219600101613893565b8051602d82526001017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90910190815292915050565b5f61139d73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168484614450565b5f805f8360ff0390505f61432f8260ff1687901b7f0706060506020504060203020504030106050205030304010505030400000000601f6f8421084210842108cc6318c6db6d54be831560081b6fffffffffffffffffffffffffffffffff851160071b1784811c67ffffffffffffffff1060061b1784811c63ffffffff1060051b1784811c61ffff1060041b1784811c60ff1060031b1793841c1c161a1790565b9050806101001415935083614344575f613ea8565b8160ff168103925050509250929050565b5f603c60ff831661436c600186900b610100614f6e565b6143769190614f2d565b61139d9190614f6e565b5f805f61441b8460ff1686901c7e1f0d1e100c1d070f090b19131c1706010e11080a1a141802121b150316040581196001019091166101e07f804040554300526644320000502061067405302602000010750620017611707760fc7fb6db6db6ddddddddd34d34d349249249210842108c6318c639ce739cffffffff840260f81c161b60f71c1690811c63d76453e004601f169190911a1790565b90508061010014159250826144315760ff614438565b8360ff1681015b9150509250929050565b8082828560045afa50505050565b5f828152600660209081526040808320848452600501909152812081906040517f1e2eaeaf0000000000000000000000000000000000000000000000000000000081526004810182905290915073ffffffffffffffffffffffffffffffffffffffff861690631e2eaeaf90602401602060405180830381865afa1580156140e1573d5f803e3d5ffd5b5f602082840312156144e9575f80fd5b813567ffffffffffffffff8116811461139d575f80fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610278575f80fd5b5f60a08284031215614531575f80fd5b50919050565b5f60808284031215614531575f80fd5b5f8083601f840112614557575f80fd5b50813567ffffffffffffffff81111561456e575f80fd5b602083019150836020828501011115611209575f80fd5b5f805f805f610160868803121561459a575f80fd5b85356145a581614500565b94506145b48760208801614521565b93506145c38760c08801614537565b925061014086013567ffffffffffffffff8111156145df575f80fd5b6145eb88828901614547565b969995985093965092949392505050565b5f6020828403121561460c575f80fd5b81356bffffffffffffffffffffffff8116811461139d575f80fd5b5f60208284031215614637575f80fd5b813567ffffffffffffffff81111561464d575f80fd5b82016020818503121561139d575f80fd5b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f6146e460e083018961465e565b82810360408401526146f6818961465e565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561475857835183526020938401939092019160010161473a565b50909b9a5050505050505050505050565b5f805f805f80610180878903121561477f575f80fd5b863561478a81614500565b95506147998860208901614521565b94506147a88860c08901614537565b9350610140870135925061016087013567ffffffffffffffff8111156147cc575f80fd5b6147d889828a01614547565b979a9699509497509295939492505050565b5f80602083850312156147fb575f80fd5b823567ffffffffffffffff811115614811575f80fd5b61481d85828601614547565b90969095509350505050565b602081525f61139d602083018461465e565b5f806020838503121561484c575f80fd5b823567ffffffffffffffff811115614862575f80fd5b8301601f81018513614872575f80fd5b803567ffffffffffffffff811115614888575f80fd5b8560208260051b840101111561489c575f80fd5b6020919091019590945092505050565b5f805f60e084860312156148be575f80fd5b83356148c981614500565b92506148d88560208601614521565b915060c08401356148e881614500565b809150509250925092565b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614926575f80fd5b83018035915067ffffffffffffffff821115614940575f80fd5b602001915036819003821315611209575f80fd5b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f602082840312156149dd575f80fd5b815167ffffffffffffffff8111156149f3575f80fd5b8201601f81018413614a03575f80fd5b805167ffffffffffffffff811115614a1d57614a1d6149a0565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715614a8957614a896149a0565b604052818152828201602001861015614aa0575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215614afa575f80fd5b813561139d81614500565b5f60208284031215614b15575f80fd5b81358060020b811461139d575f80fd5b5f60208284031215614b35575f80fd5b813562ffffff8116811461139d575f80fd5b73ffffffffffffffffffffffffffffffffffffffff835116815273ffffffffffffffffffffffffffffffffffffffff602084015116602082015262ffffff6040840151166040820152606083015160020b606082015273ffffffffffffffffffffffffffffffffffffffff6080840151166080820152614bf660a08201838051151582526020808201519083015260409081015173ffffffffffffffffffffffffffffffffffffffff16910152565b6101206101008201525f612a2b61012083015f815260200190565b5f60208284031215614c21575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c8557614c85614c28565b5060010190565b8082018082111561063b5761063b614c28565b8181038181111561063b5761063b614c28565b5f82614ce5577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b808202811582820484141761063b5761063b614c28565b604081525f614d13604083018561465e565b90508260208301529392505050565b5f81518060208401855e5f93019283525090919050565b7f5b43414c4c444154415245414445525d2072656164696e67206e65787420000081525f614d6a601e830185614d22565b7f20627974652873292061742000000000000000000000000000000000000000008152614d9a600c820185614d22565b7f206173202573202d3e20257300000000000000000000000000000000000000008152600c0195945050505050565b5f612a2b614dd78386614d22565b84614d22565b606081525f614def606083018661465e565b8281036020840152614e01818661465e565b90508281036040840152614e15818561465e565b9695505050505050565b606081525f614e31606083018661465e565b8460208401528281036040840152614e15818561465e565b606081525f614e5b606083018661465e565b8281036020840152614e6d818661465e565b915050826040830152949350505050565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff8213171561063b5761063b614c28565b606081525f614ed1606083018661465e565b60208301949094525060400152919050565b608081525f614ef5608083018761465e565b8281036020840152614f07818761465e565b90508281036040840152614f1b818661465e565b91505082606083015295945050505050565b600281810b9083900b01627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008212171561063b5761063b614c28565b5f8260020b8260020b028060020b915080821461156957611569614c2856fe5b506f6f6c526577617264734d616e616765725d2072657472696576696e67206173736574732c206275696c64696e6720706f6f6c2069645b52657761726473557064617465725d204465636f64696e6720626f756e6473206f662072657761726420616d6f756e7473206c6973745b52657761726473557064617465725d205374617274696e6720636f726520726577617264206c6f6f705b52657761726473557064617465725d20506f6f6c2063757272656e74207469636b3a2025645b52657761726473557064617465725d20456e746572696e67205f6465636f6465416e645265776172645b52657761726473557064617465725d204d61696e20726577617264206c6f6f7020636f6d706c6574652e5b52657761726473557064617465725d20496e697469616c697a65642c207570646174696e67207469636b5b52657761726473557064617465725d205570646174696e6720676c6f62616c2067726f7774682062792063756d756c617469766547726f7774685b506f6f6c526577617264734d616e616765725d20656e746572696e67205f726577617264506f6f6c5b52657761726473557064617465725d204465636f64696e672073746172745469636b5b52657761726473557064617465725d20656e746572696e67205f72657761726441626f76655b52657761726473557064617465725d204465636f64696e6720757064617465207374617274206c69717569646974795b52657761726473557064617465725d20496e6372656173696e67207469636b2025732067726f777468206f75747369646520627920256531385b52657761726473557064617465725d20656e746572696e67205f72657761726442656c6f775b52657761726473557064617465725d2052657472696576656420616e642075706461746564206c697175696469747920746f3a2025735b52657761726473557064617465725d2063757272656e745469636b5265776172643a2025735b43414c4c444154415245414445525d2072656164696e67206e6578742025732062797465287329206174202573206173206279746573202d3e5b52657761726473557064617465725d2052657472696576696e6720706f6f6c2025782063757272656e74207469636b5b52657761726473557064617465725d2072657761726420757064617465206c6f6f702028696e697469616c697a65643a2025732c207469636b3a2025732c206c69717569646974793a202573295b52657761726473557064617465725d20436f6d706c6574656420636f726520726577617264206c6f6f702c20636865636b696e6720656e64206c69717569646974795b506f6f6c526577617264734d616e616765725d206465636f64696e6720617373657420696e64696365735b41737365745d20417474656d7074696e6720746f2072657472696576652061737365745b25735d2066726f6d2061727261795b52657761726473557064617465725d2046696e616c2076616c7565732028746f74616c3a2025732c2063756d756c617469766547726f7774683a2073295b52657761726473557064617465725d20416464696e6720257320746f207469636b2025735b52657761726473557064617465725d2052656164696e67206164646974696f6e616c20616d6f756e7420666f722063757272656e74207469636ba164736f6c634300081a000a
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0\xC4W_5`\xE0\x1C\x80c\x84\xB0\x19n\x11a\0}W\x80c\x97\x12[\xEE\x11a\0XW\x80c\x97\x12[\xEE\x14a\x02\x07W\x80c\xC6\xA9\x8E\xB9\x14a\x02HW\x80c\xDC\x985N\x14a\x02[W_\x80\xFD[\x80c\x84\xB0\x19n\x14a\x01yW\x80c\x8D\xB2\xB6R\x14a\x01\x94W\x80c\x91\xDDsF\x14a\x01\xE7W_\x80\xFD[\x80c*c0\xCF\x11a\0\xADW\x80c*c0\xCF\x14a\x01&W\x80cW}\xB2M\x14a\x019W\x80cv\x0F_'\x14a\x01LW_\x80\xFD[\x80c\x11jUP\x14a\0\xC8W\x80c%\x99\x82\xE5\x14a\0\xDDW[_\x80\xFD[a\0\xDBa\0\xD66`\x04aD\xD9V[a\x02nV[\0[a\0\xF0a\0\xEB6`\x04aE\x85V[a\x02{V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xDBa\x0146`\x04aE\xFCV[a\x03\x16V[a\0\xDBa\x01G6`\x04aF'V[a\x03\xD0V[`\x07Ta\x01`\x90g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`@Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01\x1DV[a\x01\x81a\x04\x9FV[`@Qa\x01\x1D\x97\x96\x95\x94\x93\x92\x91\x90aF\xAAV[a\x01\xAFa\x01\xA26`\x04aGiV[_\x80\x96P\x96\x94PPPPPV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x93\x16\x83R` \x83\x01\x91\x90\x91R\x01a\x01\x1DV[a\x01\xFAa\x01\xF56`\x04aG\xEAV[a\x05GV[`@Qa\x01\x1D\x91\x90aH)V[`\x07Ta\x02+\x90h\x01\0\0\0\0\0\0\0\0\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[`@Qk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x81R` \x01a\x01\x1DV[a\0\xDBa\x02V6`\x04aH;V[a\x06AV[a\0\xF0a\x02i6`\x04aH\xACV[a\x07AV[a\x02x3\x82a\x08GV[PV[_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x02\xEBW`@Q\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x7F%\x99\x82\xE5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x95\x94PPPPPV[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x03\x85W`@Q\x7F#\x01\x9Eg\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x07\x80Tk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16h\x01\0\0\0\0\0\0\0\0\x02\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x92\x16\x91\x90\x91\x17\x90UV[a\x03\xD8a\x08\x82V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16cH\xC8\x94\x91a\x04\x1E\x83\x80aH\xF3V[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04;\x92\x91\x90aITV[_`@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04VW=_\x80>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x82\x01`@Ra\x04\x9B\x91\x90\x81\x01\x90aI\xCDV[PPV[\x7F\x0F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0``\x80_\x80\x80\x83a\x055`@\x80Q\x80\x82\x01\x82R`\x08\x81R\x7FAngstrom\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x80\x83\x01\x91\x90\x91R\x82Q\x80\x84\x01\x90\x93R`\x02\x83R\x7Fv1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x83\x01R\x91V[\x97\x98\x90\x97\x96PF\x95P0\x94P\x91\x92P\x90V[``3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x05\xB8W`@Q\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82_a\x05\xC3\x82a\tUV[\x90\x92P\x90P_a\x05\xD2\x83a\t|V[\x90\x93P\x90Pa\x05\xE0\x82a\t\x99V[a\x05\xEA\x83\x83a\n\xF1V[\x92Pa\x05\xF6\x83\x83a\r;V[\x92Pa\x06\x03\x83\x83\x83a\r\xE4V[\x92Pa\x06\x11\x83\x83`\x01a\x0E\xBFV[\x92Pa\x06\x1C\x82a\x0F*V[a\x06'\x83\x87\x87a\x11\x9CV[PP`@\x80Q_\x81R` \x81\x01\x90\x91R\x91PP[\x92\x91PPV[3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x06\xB0W`@Q\x7F#\x01\x9Eg\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x81\x81\x10\x15a\x07<W_\x83\x83\x83\x81\x81\x10a\x06\xCDWa\x06\xCDaJ\xBDV[\x90P` \x02\x01` \x81\x01\x90a\x06\xE2\x91\x90aJ\xEAV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_\x90\x81R`\x06` R`@\x90 \x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\x81\x16`\xFF\x90\x91\x16\x15\x17\x90UP`\x01\x01a\x06\xB2V[PPPV[_3s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x07\xB1W`@Q\x7F\xF82\x86\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`<a\x07\xC3`\x80\x85\x01``\x86\x01aK\x05V[`\x02\x0B\x14\x15\x80a\x07\xE7WP_a\x07\xDF``\x85\x01`@\x86\x01aK%V[b\xFF\xFF\xFF\x16\x14\x15[\x15a\x08\x1EW`@Q\x7F\xC2Vb+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x7F\xDC\x985N\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x92PPPV[\x80`\x0CRc\xDA\xA0P\xE9`\x04R\x81_R`\x1F`\x0C `\x01`\xFF\x83\x16\x1B\x80\x82T\x18\x81\x81\x16a\x08zWc\x8C\xB8\x88r_R`\x04`\x1C\xFD[\x90\x91UPPPV[`\x07TCg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16\x03a\x08\xC9W`@Q\x7F\xD8\xA6\xB8\x9B\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[3_\x90\x81R`\x06` R`@\x90 T`\xFF\x16a\t\x11W`@Q\x7F\\\xD2kh\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\t\x1ACa\x11\xB9V[`\x07\x80T\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[_\x80_a\tc\x84`Da\x11\xD6V[\x90\x94P\x90P\x83a\tr\x82a\x12\x10V[\x92P\x92PP\x91P\x91V[_\x80_a\t\x8A\x84`$a\x11\xD6V[\x90\x94P\x90P\x83a\tr\x82a\x12\xACV[_a\t\xA3\x82a\x13FV[\x90P_[\x81\x81\x10\x15a\x07<W_a\t\xBA\x84\x83a\x13QV[\x90P_a\t\xC6\x82a\x13\xA4V[\x90P_a\t\xD2\x83a\x13\xCCV[\x90P\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x0B\r\x9C\ta\n-\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x85\x90R`d\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\n\x9DW_\x80\xFD[PZ\xF1\x15\x80\x15a\n\xAFW=_\x80>=_\xFD[PPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16_\x90\x81R`\x01` R`@\x90 a\n\xE1\x91P\x83a\x13\xD7V[PP`\x01\x90\x92\x01\x91Pa\t\xA7\x90PV[_\x80a\n\xFC\x84a\x13\xEFV[\x90\x94P\x90P[\x80\x84\x14a\r3W`\x14\x84\x01\x93_\x80\x80a\x0B\x1B\x84\x88a\x14GV[\x91\x94P\x92P\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\xF3\xCD\x91La\x0B\xEC0\x87\x87`@\x80Q`\xA0\x80\x82\x01\x83R_\x80\x83R` \x83\x01\x81\x90R\x82\x84\x01\x81\x90R``\x83\x01\x81\x90R`\x80\x83\x01R\x82Q\x90\x81\x01\x90\x92R\x90\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x82R_` \x83\x01R`<`@\x83\x01R\x86\x16``\x90\x91\x01R\x90P\x93\x92PPPV[`@Q\x80``\x01`@R\x80\x86\x15\x15\x81R` \x01a\x0C\x10a\x0C\x0B\x8Ba\x14\xD4V[a\x14\xE0V[\x81R` \x01\x86a\x0C4Ws\xFF\xFD\x89c\xEF\xD1\xFCjPd\x88I]\x95\x1DRc\x98\x8D%a\x0C;V[d\x01\0\x02v\xA4[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0Cq\x92\x91\x90aKGV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x0C\x8DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\xB1\x91\x90aL\x11V[\x90Pa\x0C\xEDa\x0C\xC0\x82`\x80\x1D\x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16_\x90\x81R`\x01` R`@\x90 \x90`\x0F\x0Ba\x15AV[Pa\r(a\x0C\xFB\x82`\x0F\x0B\x90V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16_\x90\x81R`\x01` R`@\x90 \x90`\x0F\x0Ba\x15AV[PPPPPPa\x0B\x02V[P\x91\x92\x91PPV[_\x80a\rF\x84a\x13\xEFV[\x90\x94P\x90P_a\rTa\x15pV[`@\x80Qa\x01 \x81\x01\x82R_` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x91\x90\x91R\x7F\xD2\x9C\xD8\xAD\x13\x068\xCED\xEA\x18VH\xD2q#E\xE8\xE4V\xFE\xF8\x153(\xEE@\x91m\xF2y\x0E\x81R\x90\x91P[\x82\x86\x14a\r\xDAWa\r\xD3\x86\x82\x84\x88a\x15\xBAV[\x95Pa\r\xC0V[P\x93\x94\x93PPPPV[_\x80a\r\xEEa\x15pV[`@\x80Qa\x01`\x81\x01\x82R_\x80\x82R` \x82\x01\x81\x90R\x91\x81\x01\x82\x90R``\x81\x01\x82\x90R`\x80\x81\x01\x82\x90R`\xA0\x81\x01\x82\x90R`\xC0\x81\x01\x82\x90R`\xE0\x81\x01\x82\x90Ra\x01\0\x81\x01\x82\x90Ra\x01 \x81\x01\x82\x90Ra\x01@\x81\x01\x82\x90R\x91\x92Pa\x0EQ\x87a\x13\xEFV[\x90\x97P\x90P_`\x08U[\x80\x87\x14a\x0E\xB4W`\x08\x80Ta\x0E\xA0\x91\x7F[%s]\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90_a\x0E\x97\x83aLUV[\x91\x90PUa\x17\xA5V[a\x0E\xAD\x87\x83\x85\x89\x89a\x189V[\x96Pa\x0E[V[P\x94\x95\x94PPPPPV[_\x80a\x0E\xCA\x85a\x13\xEFV[\x90\x95P\x90P[\x80\x85\x14a\x0F!W_\x80a\x0E\xE3\x87\x87a\x1A\x8BV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16_\x90\x81R` \x89\x90R`@\x90 \x92\x99P\x90\x93P\x91Pa\x0F\x19\x90\x82a\x1B\xF7V[PPPa\x0E\xD0V[P\x92\x93\x92PPPV[_a\x0F4\x82a\x13FV[\x90P_[\x81\x81\x10\x15a\x07<W_a\x0FK\x84\x83a\x13QV[\x90P_a\x0FW\x82a\x13\xCCV[\x90P_a\x0Fc\x83a\x1C\x06V[\x90P_a\x0Fo\x84a\x1C\x12V[\x90Pa\x0F\xA8a\x0F~\x82\x84aL\x8CV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16_\x90\x81R`\x01` R`@\x90 \x90a\x1B\xF7V[Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16_\x90\x81R` \x81\x90R`@\x81 \x80T\x84\x92\x90a\x0F\xDD\x90\x84\x90aL\x8CV[\x90\x91UPP\x80\x15a\x11\x8CW\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xA5\x84\x11\x94a\x10A\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90V[`@Q\x7F\xFF\xFF\xFF\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\xE0\x84\x90\x1B\x16\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x16`\x04\x82\x01R`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x10\xA4W_\x80\xFD[PZ\xF1\x15\x80\x15a\x10\xB6W=_\x80>=_\xFD[Pa\x10\xFC\x92PPPs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x1C\x1EV[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x11\xDA`\xB4`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x11fW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\x8A\x91\x90aL\x11V[P[PP`\x01\x90\x92\x01\x91Pa\x0F8\x90PV[\x80\x82\x01\x80\x84\x14a\x11\xB3Wc\x01\x84/\x8C_R`\x04`\x1C\xFD[PPPPV[_h\x01\0\0\0\0\0\0\0\0\x82\x10a\x11\xD2Wa\x11\xD2a\x1CgV[P\x90V[_\x80_a\x11\xE2\x85a\x13\xEFV[\x90\x95P\x90P_\x84a\x11\xF3\x87\x84aL\x9FV[a\x11\xFD\x91\x90aL\xB2V[\x91\x93PP` \x1B\x84\x17\x90P[\x92P\x92\x90PV[_\x80a\x12\x1B\x83a\x13FV[\x90P_\x80[\x82\x81\x10\x15a\x0F!W_a\x12;a\x126\x87\x84a\x13QV[a\x13\xCCV[\x90P\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\x12\xA2W`@Q\x7F\x80\xF1\x1A\xCF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91P`\x01\x01a\x12 V[_\x80a\x12\xB7\x83a\x13FV[\x90P\x80_\x03a\x12\xC7WP\x90\x91\x90PV[_a\x12\xDAa\x12\xD5\x85\x83a\x1CtV[a\x1C\x8AV[\x90P`\x01[\x82\x81\x10\x15a\x0F!W_a\x12\xF5a\x12\xD5\x87\x84a\x1CtV[\x90P\x82c\xFF\xFF\xFF\xFF\x16\x81c\xFF\xFF\xFF\xFF\x16\x11a\x13<W`@Q\x7F\xF3_\x93\x99\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x91P`\x01\x01a\x12\xDFV[_a\x06;\x82` \x1C\x90V[_a\x13t`@Q\x80``\x01`@R\x80`3\x81R` \x01aS\x8D`3\x919\x83a\x1C\x95V[a\x13\x80\x82\x84[\x90a\x1D&V[a\x13\x8B`D\x83aL\xEAV[c\xFF\xFF\xFF\xFF\x84\x16[a\x13\x9D\x91\x90aL\x8CV[\x93\x92PPPV[_a\x13\xB4`\x14\x83[\x015`\x80\x1C\x90V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x92\x91PPV[_\x815``\x1Ca\x06;V[_a\x06;a\x13\xE6\x83\x85\\aL\x8CV[\x91P\x83\x82a\x1D{V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7Fu24/List.length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x143\x90\x84\x90`\x03\x90a\x1D\x82V[PP`\x03\x80\x82\x01\x92\x825`\xE8\x1C\x90\x92\x01\x01\x90V[_\x80_\x80a\x14ea\x126a\x14Z\x88a\x1E(V[\x87\x90a\xFF\xFF\x16a\x13QV[\x90P_a\x14\x82a\x126a\x14w\x89a\x1E7V[\x88\x90a\xFF\xFF\x16a\x13QV[\x90P\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x92P\x82a\x14\xC1W\x80\x82a\x14\xC4V[\x81\x81[\x90\x98\x90\x97P\x92\x95P\x91\x93PPPPV[_a\x13\xB4`\x04\x83a\x13\xACV[_\x7F\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x11\x15a\x15;W`@Q\x7F5'\x8D\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P_\x03\x90V[\x81\\\x81\x81\x03\x90\x80\x82\x10_\x84\x13\x14a\x15_Wc\xC9eN\xD4_R`\x04`\x1C\xFD[a\x15i\x84\x83a\x1D{V[P\x92\x91PPV[_a\x15\xB5a\x15|a\x1ECV[`@\x80Q`B\x81\x01\x90\x91R\x7F\x19\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x02\x81\x01\x91\x90\x91R\x90V[\x90P\x90V[_\x80a\x15\xC5\x86a\x1F;V[`\x01\x81\x16\x15\x15``\x88\x01R\x90\x96P\x90Pa\x15\xDE\x86a\x1F\x8EV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16` \x87\x01R\x95Pa\x16\0\x86a\x1F\x8EV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`@\x87\x01R\x95P_a\x16#\x87a\x1F\xE1V[\x90\x97P\x90Pa\x169a\x126\x85a\xFF\xFF\x84\x16a\x13QV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\x80\x87\x01R_a\x16^\x88a\x1F\xE1V[\x90\x98P\x90Pa\x16ta\x126\x86a\xFF\xFF\x84\x16a\x13QV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xA0\x88\x01RPP`\x02\x81\x16a\x16\xA0W\x85_a\x16\xA9V[a\x16\xA9\x86a 4V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xC0\x87\x01R\x95P_a\x16\xD5\x87`\x04\x84\x16\x15a \x87V[`\xE0\x89\x01R\x90\x97P\x90P_a\x17\x0Ca\x17\0\x88g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16a\x01\0\x82\x01Ra\x01 \x90 \x90V[`\"\x88\x01R`B\x87 \x90V[\x90Pa\x17\x17\x81a!2V[_`\x80\x84\x16a\x17/Wa\x17*\x89\x83a!\x83V[a\x179V[a\x179\x89\x83a!\xF2V[\x90\x99P\x90Pa\x17H\x83\x82a\"6V[`\x80\x88\x01Q` \x89\x01Qa\x17c\x91\x83\x91`\x01\x88\x16\x15\x15a\"~V[_a\x17s\x89`\xC0\x01Q\x83\x81\x1C\x18\x90V[\x90Pa\x17\x97\x81\x8A`\xA0\x01Q\x8B`@\x01Qa\x17\x92\x89`\xFF\x16`\x01\x16\x15\x15\x90V[a#,V[P\x97\x98\x97PPPPPPPPV[_\x80_\x80_a\x17\xE2V[_[` \x81\x10\x15a\x17\xCAW\x82\x81\x1A\x15a\x17\xCAW`\x01\x01a\x17\xB1V[\x80\x82R`\x03\x1Ba\x01\0\x03\x91\x82\x1C\x90\x91\x1B` \x90\x91\x01RV[_Q\x94P` Q\x93P`@Q\x92P``Q\x91P`\x80Q\x90Pc\xB6\x0Er\xCC_R`@` R\x85`@Ra\x18\x15\x87``a\x17\xAFV[a\x18!`\x1C`\x84a#\xC7V[_\x94\x90\x94R` \x92\x90\x92R`@R``R`\x80RPPV[_\x80a\x18D\x87a\x1F;V[\x90\x97P\x90Pa\x18~\x7F  variant: %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0a\x18y\x83`\xFF\x16a#\xD9V[a$\x91V[a\x18\x88\x86\x82a%\x04V[`\x01\x81\x16\x15\x15`\x80\x87\x01R_\x80a\x18\xA6\x85\x8A\x88`\x08\x87\x16\x15\x15a%\xB7V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16`\xC0\x8D\x01R\x91\x16`\xA0\x8B\x01R\x90\x99P\x91Pa\x18\xDA\x90P\x88a&NV[``\x89\x01\x81\x90R\x90\x98P\x81\x10\x15a\x19\x1DW`@Q\x7F\x8E\x1E\xDF\xA4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x82\x16a\x19,W\x87_a\x195V[a\x195\x88a 4V[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16`\xE0\x89\x01R\x97P_a\x19a\x89`\x04\x85\x16\x15a \x87V[a\x01\0\x8B\x01R\x90\x99P\x90Pa\x19w\x88\x8A\x85a&\xA7V[`\x07T\x90\x99P_\x90\x81\x90a\x19\xAC\x90\x8B\x90\x8D\x90\x88\x90\x88\x90h\x01\0\0\0\0\0\0\0\0\x90\x04k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a&\xEBV[\x91\x9CP\x92P\x90Pa\x19\xBD\x8A\x86a)\xBCV[_a\x19\xC9\x8B\x87\x8Ca*\x11V[\x90P_`\x80\x87\x16a\x19\xE3Wa\x19\xDE\x8D\x83a!\x83V[a\x19\xEDV[a\x19\xED\x8D\x83a!\xF2V[\x90\x9DP\x90P`\x10\x87\x16\x15a\x1A$Wa\x1A\x10\x8Ca\x01@\x01Qd\xFF\xFF\xFF\xFF\xFF\x16a*3V[a\x1A\x1F\x81\x8Da\x01 \x01Qa\x08GV[a\x1A-V[a\x1A-\x82a!2V[a\x1A7\x85\x82a\"6V[`\xA0\x8C\x01Qa\x1AN\x90\x82\x90\x86`\x01\x8B\x16\x15\x15a\"~V[_a\x1A^\x8D`\xE0\x01Q\x83\x81\x1C\x18\x90V[\x90Pa\x1Ay\x81\x8E`\xC0\x01Q\x86a\x17\x92\x8C`\xFF\x16`\x01\x16\x15\x15\x90V[P\x9B\x9C\x9BPPPPPPPPPPPPV[_\x80\x80a\x1A\xAF`@Q\x80``\x01`@R\x80`)\x81R` \x01aQ\x08`)\x919a*mV[_\x80a\x1A\xD2`@Q\x80``\x01`@R\x80`+\x81R` \x01aSb`+\x919a*mV[_a\x1A\xDC\x88a\x1F\xE1V[\x90\x98P\x90P_a\x1A\xEB\x89a\x1F\xE1V[\x90\x99P\x90Pa\x1B\x11`@Q\x80``\x01`@R\x80`8\x81R` \x01aO\x8E`8\x919a*mV[a\x1B\"a\x126\x89a\xFF\xFF\x85\x16a\x13QV[\x93Pa\x1B\xCBa\x1B\xC40\x86a\x1B=a\x126\x8Da\xFF\xFF\x88\x16a\x13QV[`@\x80Q`\xA0\x80\x82\x01\x83R_\x80\x83R` \x83\x01\x81\x90R\x82\x84\x01\x81\x90R``\x83\x01\x81\x90R`\x80\x83\x01R\x82Q\x90\x81\x01\x90\x92R\x90\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x81\x16\x82R_` \x83\x01R`<`@\x83\x01R\x86\x16``\x90\x91\x01R\x90P\x93\x92PPPV[`\xA0\x90 \x90V[_\x81\x81R`\x05` R`@\x90 \x90\x93Pa\x1B\xE6\x90\x84\x8Ba*\xFCV[\x90\x9A\x94\x99P\x97P\x92\x95PPPPPPV[_a\x06;a\x13\xE6\x83\x85\\aL\x9FV[_a\x13\xB4`$\x83a\x13\xACV[_a\x13\xB4`4\x83a\x13\xACV[\x81`\x14R\x80`4Ro\xA9\x05\x9C\xBB\0\0\0\0\0\0\0\0\0\0\0\0_R` _`D`\x10_\x87Z\xF1=\x15`\x01_Q\x14\x17\x16a\x1C^Wc\x90\xB8\xEC\x18_R`\x04`\x1C\xFD[_`4RPPPV[c5'\x8D\x12_R`\x04`\x1C\xFD[_a\x1C\x7F\x82\x84a\x13zV[a\x13\x8B`$\x83aL\xEAV[_\x815`\xE0\x1Ca\x06;V[a\x04\x9B\x82\x82`@Q`$\x01a\x1C\xAB\x92\x91\x90aM\x01V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x97\x10\xA9\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_a\x1D1\x83` \x1C\x90V[\x90P\x80\x82\x10a\x07<W`@Q\x7F\xBC_\x99|\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x83\x90R`$\x81\x01\x82\x90R`D\x01[`@Q\x80\x91\x03\x90\xFD[\x80\x82]PPV[\x825`\x08\x83\x02a\x01\0\x03\x1Ca\x11\xB3a\x1D\xC9\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x06a\x1D\xC2`\xFF\x88\x16a-ZV[\x91\x90a-eV[a\x1D\xD6`\x03\x87[\x90a.+V[`@Q` \x01a\x1D\xE7\x92\x91\x90aM9V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R\x83a\x1E#\x84`\xFF\x88\x16a.+V[a.oV[_a\x06;\x81\x83[\x015`\xF0\x1C\x90V[_a\x06;`\x02\x83a\x1E/V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0F\x14\x16a\x1F8WP`@\x80Q\x7F\x8Bs\xC3\xC6\x9B\xB8\xFE=Q.\xCCL\xF7Y\xCCy#\x9F{\x17\x9B\x0F\xFA\xCA\xA9\xA7]R+9@\x0F\x81R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x81\x01\x91\x90\x91RF``\x82\x01R0`\x80\x82\x01R`\xA0\x90 \x90V[\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81R\x7FOrderVariantMap\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x1F\x7F\x90\x84\x90`\x01\x90a\x1D\x82V[PP`\x01\x81\x01\x91\x905`\xF8\x1C\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x04\x81R\x7Fu128\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra\x1F\xD2\x90\x84\x90`\x10\x90a\x1D\x82V[PP`\x10\x81\x01\x91\x905`\x80\x1C\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x03\x81R\x7Fu16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra %\x90\x84\x90`\x02\x90a\x1D\x82V[PP`\x02\x81\x01\x91\x905`\xF0\x1C\x90V[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x07\x81R\x7Faddress\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra x\x90\x84\x90`\x14\x90a\x1D\x82V[PP`\x14\x81\x01\x91\x905``\x1C\x90V[_\x80\x7F\xC5\xD2F\x01\x86\xF7#<\x92~}\xB2\xDC\xC7\x03\xC0\xE5\0\xB6S\xCA\x82';{\xFA\xD8\x04]\x85\xA4p\x83a!(W\x845`\xE8\x1C`\x03\x86\x01\x95P`@Q`\x14`d\x03\x81\x01\x82\x81\x01`@R\x82\x88\x827\x82\x81 \x93PP\x81\x87\x01\x96P`D\x81\x01Q\x7Ft\x07\x90\\\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82R`@`$\x83\x01R`\x14\x83\x03\x92P\x82`D\x83\x01R`d\x83\x01\x81` \x1B\x17\x82`\xC0\x1B\x17\x94PPPP[\x84\x92P\x92P\x92P\x92V[_\x81\x81R`\x03` R`@\x90 \x80\\\x15a!xW`@Q\x7F\x8A.\xF1\x16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x04\x9B\x81`\x01a\x1D{V[_\x80a!\x8E\x84a 4V[\x90\x94P\x90P6_a!\x9E\x86a/\x02V[\x91\x97P\x92P\x90Pa!\xB1\x83\x86\x84\x84a0\tV[a!\xE7W`@Q\x7F\x8B\xAAW\x9F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[P\x93\x94\x90\x93P\x91PPV[_\x80`@Q\x83\x81R_` \x82\x01R`A\x85`?\x83\x017`A\x85\x01\x94P` `\x01`\x80\x83`\x01Z\xFAQ\x91PP=a\"/Wc\x8B\xAAW\x9F_R`\x04`\x1C\xFD[\x92\x93\x91PPV[\x81\x15a\x04\x9BWc\xFF\xFF\xFF\xFF\x82\x16\x82`\xC0\x1C\x82`\x04\x82\x01R\x83` \x1C` _\x84\x84_\x85Z\xF1\x92PPPc$\xA2\xE4K_Q\x14`\x1F=\x11\x16\x81\x16a\x07<Wc\xF9Y\xFD\xAE_R`\x04`\x1C\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16_\x90\x81R`\x01` R`@\x90 \x82\x90a\"\xAE\x90\x82a\x13\xD7V[P\x81\x15a#\x03Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 \x93\x88\x16\x83R\x92\x90R\x90\x81 \x80T\x83\x92\x90a\"\xF8\x90\x84\x90aL\x9FV[\x90\x91UPa#%\x90PV[a#%s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x860\x84a0NV[PPPPPV[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x16_\x90\x81R`\x01` R`@\x90 \x82\x90a#\\\x90\x82a\x1B\xF7V[P\x81\x15a#\xA6Ws\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x86\x16_\x90\x81R`\x02` \x90\x81R`@\x80\x83 \x93\x88\x16\x83R\x92\x90R\x90\x81 \x80T\x83\x92\x90a\"\xF8\x90\x84\x90aL\x8CV[a#%s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x86\x83a\x1C\x1EV[a0\xA6\x80a\x11\xB3\x84\x84c\xFF\xFF\xFF\xFF\x84\x16V[_`\x10\x82\x16\x15a$:W` \x82\x16\x15a$\x13WP\x7FStanding_Partial\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[P\x7FStanding_Exact\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[` \x82\x16\x15a$jWP\x7FFlash_Partial\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[P\x7FFlash_Exact\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90PV[_\x80Q` \x80Q`@\x80Q``\x80Q`\x80\x80Q`\xA0Q`\xC0QcK\\Bw\x90\x9BR\x97\x86\x90R\x94R\x95\x96\x93\x95\x91\x94\x91\x93\x90a$\xCC\x90\x8A\x90a\x17\xAFV[a$\xD7\x88`\xA0a\x17\xAFV[a$\xE3`\x1C`\xC4a#\xC7V[_\x96\x90\x96R` \x94\x90\x94R`@\x92\x90\x92R``R`\x80R`\xA0R`\xC0RPPV[` \x81\x16\x15a%bW`\x10\x81\x16\x15a%<WP\x7F\xA9\xE5)MDO\xBA\xEB\\\xA0_+$\xC5\xD8)D\x10\xF3\x14\x13\x04\x8ED]\x88\x1E.\xF6\x9E`\0\x90RV[P\x7F\xEB\xD5\t\x1C9oy\x05nEE_J\x93\xBB\xB0\x16\xC2\x171K\xB25k\"\xD1\xC183\xAC\x88a\x90RV[`\x10\x81\x16\x15a%\x91WP\x7F\xEF\x0C\xCE\x88\xFD\xA0J\xB3\xF8F\x18\x823r\xCFv\xF6KE\x11\xCE\x8Cyc\x0E\xAB\xC2\x9E\xBC\x9B\x96\x8F\x90RV[P\x7F[\x9DI\xCF\xEDH\xF8\xC9\xD1\xA8c\xF6\x1C$y\xC5y\xFA)\x9C%\xA32\x11\xFC\x85s\x90\xCE\xCC\xE6\xD4\x90RV[_\x80_\x80_a%\xC5\x88a\x1F\xE1V[\x90\x98Pa\xFF\xFF\x16\x90P_a%\xD9\x8A\x83a\x1CtV[\x90P_a%\xE5\x82a0\xBDV[\x90P_a&\x02a\x126a%\xF7\x85a\x1E(V[\x8C\x90a\xFF\xFF\x16a\x13QV[\x90P_a&\x1Fa\x126a&\x14\x86a\x1E7V[\x8D\x90a\xFF\xFF\x16a\x13QV[\x90P\x89a&.W\x80\x82\x84a&9V[\x81\x81a&9\x85a0\xC8V[\x9D\x9F\x91\x9EP\x9C\x9BP\x99PPPPPPPPPPV[_\x80a&\x9B` `@Q\x80`@\x01`@R\x80`\x04\x81R` \x01\x7Fu256\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RP\x85a\x1D\x82\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[PP` \x81\x01\x91\x905\x90V[_`\x10\x82\x16\x15a&\xD1W`\x08\x83a\x018\x86\x017`\x05`\x08\x84\x01a\x01[\x86\x017`\r\x83\x01\x92Pa&\xE3V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFFC\x16a\x01 \x85\x01R[P\x90\x92\x91PPV[_\x80\x80\x80` \x87\x16\x15a'\xE3W_\x80a'\x03\x8Aa\x1F\x8EV[\x90\x9APo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91Pa'#\x8Aa\x1F\x8EV[\x90\x9APo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90Pa'C\x8Aa\x1F\x8EV[` \x8D\x01\x84\x90R`@\x8D\x01\x83\x90R\x90\x9APo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x92P\x81\x83\x10\x15a'\xA2W`@Q\x7F\xC4\xDA\xF0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80\x83\x11\x15a'\xDCW`@Q\x7FD\x18#1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPa($V[a'\xEC\x88a\x1F\x8EV[\x90\x98Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P`@\x87\x16a(\x11W_a(\x14V[`\x01[`\xFF\x16` \x8A\x01R`@\x89\x01\x81\x90R[a(N\x7Fprice: %27e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x87a\x17\xA5V[`@\x87\x16\x15\x15\x80a(aWP` \x87\x16\x15\x15[\x15a)\rW\x91P\x81a(\x93\x7Fquantity in: %18e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x84a\x17\xA5V[a(\x9D\x86\x84a0\xEAV[\x91Pa(\xC9\x7Fquantity out (pre fee): %18e\0\0\0\0\x83a\x17\xA5V[a(\xDC\x82a(\xD7\x81\x88a0\xF7V[a1\x02V[\x91Pa)\x08\x7Fquantity out (post fee): %18e\0\0\0\x83a\x17\xA5V[a)\xAFV[\x90P\x80a):\x7Fquantity out: %18e\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x17\xA5V[a)D\x86\x83a1\rV[\x92Pa)p\x7Fquantity in (pre fee): %18e\0\0\0\0\0\x84a\x17\xA5V[a)\x83\x83a)~\x81\x88a0\xF7V[a1\x18V[\x92Pa)\xAF\x7Fquantity in (post fee): %18e\0\0\0\0\x84a\x17\xA5V[P\x95\x97\x90\x96P\x93PPPPV[_`\x10\x82\x16a)\xCDWa\x01@a)\xD1V[a\x01`[\x90P\x82a)\xFE\x7FstructLength: %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83a\x17\xA5V[a\x11\xB3\x81a*\x0C\x84\x82aL\x8CV[a1 V[_a*+a*\x1F\x85\x85a1iV[`\"\x84\x01R`B\x83 \x90V[\x94\x93PPPPV[\x80B\x11\x15a\x02xW`@Q\x7F =\x82\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x02x\x81`@Q`$\x01a*\x81\x91\x90aH)V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7FA0O\xAC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_\x80a+\x1F`@Q\x80``\x01`@R\x80`*\x81R` \x01aPM`*\x919a*mV[_\x80a+B`@Q\x80``\x01`@R\x80`#\x81R` \x01aQ1`#\x919a*mV[_a+L\x86a1\x89V[\x90\x96P\x90Pa+s`@Q\x80``\x01`@R\x80`0\x81R` \x01aR\xA1`0\x919\x88a\x1C\x95V[_a+}\x88a1\xDBV[\x90Pa+\xA4`@Q\x80``\x01`@R\x80`&\x81R` \x01aP'`&\x919\x82`\x02\x0Ba2(V[a+\xC5`@Q\x80``\x01`@R\x80`0\x81R` \x01aQz`0\x919a*mV[_a+\xCF\x88a\x1F\x8EV[\x90\x98P\x90Pa+\xF5`@Q\x80``\x01`@R\x80`7\x81R` \x01aO\xC6`7\x919a*mV[_a+\xFF\x89a\x13\xEFV[\x90\x99P\x90Pa,%`@Q\x80``\x01`@R\x80`*\x81R` \x01aO\xFD`*\x919a*mV[\x82`\x02\x0B\x84`\x02\x0B\x13\x15a,GWa,B\x8B\x84\x8B\x87\x8E\x87\x87a2\xB9V[a,VV[a,V\x8B\x84\x8B\x87\x8E\x87\x87a5\x98V[\x92\x9BP\x90\x98P\x96P\x94PPPPPa,\x85`@Q\x80`\x80\x01`@R\x80`C\x81R` \x01aS\x1F`C\x919a*mV[_a,\x8F\x87a82V[\x90P\x80o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a-\nW`@Q\x7Fd)\xCF\xD2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81Ro\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x84\x16`\x04\x83\x01R\x82\x16`$\x82\x01R`D\x01a\x1DrV[a-+`@Q\x80``\x01`@R\x80`;\x81R` \x01aP\xCD`;\x919a*mV[\x82\x88`\x01\x01_\x82\x82Ta->\x91\x90aL\x8CV[\x90\x91UP\x86\x95PPPPP\x93P\x93\x91PPV[a\x02x\x81a8sV[``a\x06;\x82a8\x93V[\x82Q``\x90\x82\x81\x10\x15a\x0F!W`@\x80Q\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x86\x16` \x82\x01R\x81Q`\x01\x81\x83\x03\x01\x81R`!\x90\x91\x01\x90\x91R_a-\xBB\x83\x86aL\x9FV[\x90P[\x80`\x01\x16`\x01\x03a-\xEEW\x81\x87`@Q` \x01a-\xDC\x92\x91\x90aM\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x96P[`\x01\x81\x90\x1C\x90P\x81\x82`@Q` \x01a.\x08\x92\x91\x90aM\xC9V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91P_\x81\x11a-\xBEWP\x94\x95\x94PPPPPV[``a.7\x83\x83a8\xF3V[\x80Qa0x\x82R`\x02\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFE\x90\x91\x01\x90\x81R\x93\x92PPPV[a\x07<\x83\x83\x83`@Q`$\x01a.\x87\x93\x92\x91\x90aM\xDDV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F,\xED|\xEF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_6\x81`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81R\x7Fu24/bytes.length\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x82\x01Ra/G\x90\x85\x90`\x03\x90a\x1D\x82V[`@\x80Q``\x81\x01\x90\x91R`:\x80\x82R\x855`\xE8\x1C\x80\x87\x01`\x03\x90\x81\x01\x93\x90\x88\x01\x92a/\xB0\x91\x90aRg` \x83\x019a/\xA5\x7F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x06a\x1D\xC2\x86a-ZV[a\x1E#`\x03\x87a\x1D\xD0V[a/\xEE\x82\x82\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa9\x97\x92PPPV[PPPPP\x815`\xE8\x1C\x80\x83\x01`\x03\x90\x81\x01\x94\x93\x01\x92\x90\x91PV[_`@Qc\x16&\xBA~`\xE0\x1B\x80\x82R\x85`\x04\x83\x01R`$\x82\x01`@\x81R\x84`D\x84\x01R\x84\x86`d\x85\x017` \x81`d\x87\x01\x85\x8BZ\xFA\x90Q\x90\x91\x14\x16\x96\x95PPPPPPV[`@Q\x81``R\x82`@R\x83``\x1B`,Ro#\xB8r\xDD\0\0\0\0\0\0\0\0\0\0\0\0`\x0CR` _`d`\x1C_\x89Z\xF1=\x15`\x01_Q\x14\x17\x16a0\x99Wcy9\xF4$_R`\x04`\x1C\xFD[_``R`@RPPPPV[_\x80\x82\x84jconsole.logZ\xFAPPPV[_`\x04\x82\x015a\x06;V[_a\x06;\x82v\np\xC3\xC4\nd\xE6\xC5\x19\x99\t\x0Be\xF6}\x92@\0\0\0\0\0\0aL\xB2V[_a\x13\x9D\x83\x83[\x90a:&V[_a\x13\x9D\x82\x84a0\xF1V[_a\x13\x9D\x82\x84aL\x9FV[_a\x13\x9D\x82\x84a:HV[_\x81\x83a\x13\x93V[\x81[\x81\x81\x10\x15a\x07<W_a16\x82` aL\x8CV[\x90P\x82\x81\x11\x15a1CWP\x81[a1V\x82a1Q\x81\x84aL\x9FV[a:`V[Pa1b` \x82aL\x8CV[\x90Pa1\"V[_\x80`\x10\x83\x16a1{Wa\x01@a1\x7FV[a\x01`[\x90\x93 \x93\x92PPPV[_\x80`@\x80Q\x80\x82\x01\x90\x91R`\x03\x80\x82R\x7Fi24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0` \x83\x01Ra1\xCC\x91\x85\x91\x90a\x1D\x82V[PP`\x03\x81\x01\x91\x905`\xE8\x1D\x90V[_a\x06;a2\x1Fs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x84a<\nV[`\xA0\x1C`\x02\x0B\x90V[a\x04\x9B\x82\x82`@Q`$\x01a2>\x92\x91\x90aM\x01V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xAF\x7F\xAA8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_\x80\x80\x80a2\xDE`@Q\x80``\x01`@R\x80`&\x81R` \x01aQT`&\x919a*mV[`\x01_\x80[\x82\x15a4xWa3\n`@Q\x80``\x01`@R\x80`+\x81R` \x01aP\xA2`+\x919a*mV[_\x88\x8D\x14a33Wa3\x1B\x8Da\x1F\x8EV[\x90\x9DPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P[a3=\x81\x84aL\x8CV[\x92Pa3[\x81\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a<\xA9V[a3e\x90\x83aL\x8CV[\x91P\x81\x8F_\x8E`\x02\x0B`\x02\x0B\x81R` \x01\x90\x81R` \x01_ _\x82\x82Ta3\x8C\x91\x90aL\x8CV[\x90\x91UPa3\xA5\x90P\x8Aa3\xA0\x8D\x8Fa<\xC4V[a=\x06V[\x99Pa3\xD5`@Q\x80``\x01`@R\x80`%\x81R` \x01aS\xFE`%\x919\x82a3\xD0\x8F`\x02\x0Ba= V[a=+V[a4\x14`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F[RewardsUpdater] New total: %s\0\0\x81RP\x84a\x1C\x95V[a4B`@Q\x80``\x01`@R\x80`:\x81R` \x01aQ\xAA`:\x919a4<\x8E`\x02\x0Ba= V[\x84a=\xBEV[a4v`@Q\x80``\x01`@R\x80`7\x81R` \x01aR\n`7\x919\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1C\x95V[P[a4\x82\x8A\x8Ca>QV[\x9BP\x92P`\x02\x8B\x81\x0B\x90\x8E\x90\x0B\x12a2\xE3Wa4\xB5`@Q\x80``\x01`@R\x80`+\x81R` \x01aPw`+\x919a*mV[\x87\x8C\x14a5VWa4\xDD`@Q\x80``\x01`@R\x80`;\x81R` \x01aT#`;\x919a*mV[_a4\xE7\x8Da\x1F\x8EV[\x90\x9DPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90Pa5 `@Q\x80``\x01`@R\x80`&\x81R` \x01aRA`&\x919\x82a\x1C\x95V[a5*\x81\x84aL\x8CV[\x92Pa5H\x81\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a<\xA9V[a5R\x90\x83aL\x8CV[\x91PP[a5y`@Q\x80``\x01`@R\x80`>\x81R` \x01aS\xC0`>\x919\x83\x83a>\xB3V[a5\x83\x8C\x89a?FV[\x9A\x9D\x90\x9CP\x99\x9AP\x95\x98\x97PPPPPPPPV[_\x80\x80\x80a5\xBD`@Q\x80``\x01`@R\x80`&\x81R` \x01aQ\xE4`&\x919a*mV[`\x01_\x80a6\0`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7F[RewardsUpdater] total: %s\0\0\0\0\0\0\x81RP\x83a\x1C\x95V[a6j`@Q\x80`\x80\x01`@R\x80`N\x81R` \x01aR\xD1`N\x919`@\x80Q\x86\x15\x15`%\x81\x18\x82\x01\x90\x92R_\x81Re\x01\x12\x13\x19\x16e\x90\x91\x02e\x05false\x18`\x05\x82\x01Ra6R\x8E`\x02\x0Ba= V[\x8Co\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a?\x7FV[\x82\x15a7\xF4Wa6\x91`@Q\x80``\x01`@R\x80`+\x81R` \x01aP\xA2`+\x919a*mV[_\x88\x8D\x14a6\xBAWa6\xA2\x8Da\x1F\x8EV[\x90\x9DPo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P[a6\xC4\x81\x84aL\x8CV[\x92Pa6\xE2\x81\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a<\xA9V[a6\xEC\x90\x83aL\x8CV[\x91P\x81\x8F_\x8E`\x02\x0B`\x02\x0B\x81R` \x01\x90\x81R` \x01_ _\x82\x82Ta7\x13\x91\x90aL\x8CV[\x90\x91UPa7,\x90P\x8Aa7'\x8D\x8Fa<\xC4V[a@\x14V[\x99Pa7W`@Q\x80``\x01`@R\x80`%\x81R` \x01aS\xFE`%\x919\x82a3\xD0\x8F`\x02\x0Ba= V[a7\x96`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7F[RewardsUpdater] New total: %s\0\0\x81RP\x84a\x1C\x95V[a7\xBE`@Q\x80``\x01`@R\x80`:\x81R` \x01aQ\xAA`:\x919a4<\x8E`\x02\x0Ba= V[a7\xF2`@Q\x80``\x01`@R\x80`7\x81R` \x01aR\n`7\x919\x8Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x1C\x95V[P[a7\xFE\x8A\x8Ca@.V[\x9BP\x92P`\x02\x8D\x81\x0B\x90\x8C\x90\x0B\x13\x15a6\0Wa4\xB5`@Q\x80``\x01`@R\x80`+\x81R` \x01aPw`+\x919a*mV[_a\x06;s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x83a@bV[\x80Qjconsole.log` \x83\x01_\x80\x84\x83\x85Z\xFAPPPPPV[```\x80`@Q\x01\x90P` \x81\x01`@R_\x81R\x80_\x19\x83[\x92\x81\x01\x92`0`\n\x82\x06\x01\x84S`\n\x90\x04\x80a8\xACWPP\x81\x90\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x90\x91\x01\x90\x81R\x91\x90PV[```\x1F\x19`B\x83`\x01\x1B\x01\x16`@Q\x01\x90P` \x81\x01`@R_\x81R\x80o0123456789abcdef`\x0FR\x82\x83\x01\x82\x03`\x01\x19\x85[`\x0F\x81\x16Q\x94\x82\x01\x94`\x01\x86\x01S`\x0F\x81`\x04\x1C\x16Q\x85S`\x08\x1C\x84\x83\x03a9/W\x80\x15a9dWc!\x94\x89Z_R`\x04`\x1C\xFD[PPP\x81\x90\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x90\x91\x01\x90\x81R\x92\x91PPV[a\x02x\x81`@Q`$\x01a9\xAB\x91\x90aH)V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x0B\xE7\x7FV\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_k\x03;.<\x9F\xD0\x80<\xE8\0\0\0a:>\x83\x85aL\xEAV[a\x13\x9D\x91\x90aL\xB2V[_\x81a:>k\x03;.<\x9F\xD0\x80<\xE8\0\0\0\x85aL\xEAV[``\x82\x10a;{W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x82\x01\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x84\x01\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x86\x01\x80Qc\x0B\xE7\x7FV\x90\x95R` \x90\x92R\x90\x84\x90R\x90\x91a;\x08a:\xF8`D\x87aL\x9FV[a;\x03\x86`DaL\x8CV[a#\xC7V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xA0\x85\x01\x92\x90\x92R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xC0\x84\x01R\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x83\x01RPPV[_\x80\x80\x80a;\x89\x85\x87aL\x8CV[\x80Q` \x82\x01Q`@\x83\x01Q\x91\x96P\x94P\x92P\x90Pa;\xB3\x86a;\xAD\x81``aL\x8CV[\x87aA\x0EV[c\x0B\xE7\x7FV\x86R` \x80\x87\x01R`@\x86\x01\x85\x90Ra;\xE0a;\xD5\x87`\x1CaL\x8CV[a;\x03\x87`DaL\x8CV[a;\xF5a;\xEE\x87``aL\x8CV[\x87\x87aA\x0EV[\x92\x83R` \x83\x01\x91\x90\x91R`@\x90\x91\x01RPPV[_\x81\x81R`\x06` R`@\x81 \x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a<\x85W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a*+\x91\x90aL\x11V[_a\x13\x9D\x82a<\xC0g\r\xE0\xB6\xB3\xA7d\0\0\x86aL\xEAV[\x04\x90V[_a*+s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x84\x84aA!V[\x80\x82\x03`\x80\x81\x90\x1C\x15a\x06;Wc\xC9eN\xD4_R`\x04`\x1C\xFD[``a\x06;\x82aA\xF7V[a\x07<\x83\x83\x83`@Q`$\x01a=C\x93\x92\x91\x90aN\x1FV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xA3\xF5\xC79\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[a\x07<\x83\x83\x83`@Q`$\x01a=\xD6\x93\x92\x91\x90aNIV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\xF3b\xCAY\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[_\x80\x80\x80a>\x81a>va>f`\x01\x88aN~V[_`<\x80\x83\x07\x91\x90\x91\x12\x91\x05\x03\x90V[`\x02\x81\x90\x0B`\x08\x1D\x91V[\x91P\x91Pa>\x99\x81a>\x93\x88\x85aBLV[\x90aB\x8EV[\x90\x94P\x90Pa>\xA8\x82\x82aCUV[\x92PPP\x92P\x92\x90PV[a\x07<\x83\x83\x83`@Q`$\x01a>\xCB\x93\x92\x91\x90aN\xBFV[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x96\x9C\xDD\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[\x80\x82\x14a\x04\x9BW`@Q\x7F\x01\x84/\x8C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x11\xB3\x84\x84\x84\x84`@Q`$\x01a?\x99\x94\x93\x92\x91\x90aN\xE3V[`@\x80Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x7F\x9F\xD0\t\xF5\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\x90Ra-QV[\x81\x81\x01`\x80\x81\x90\x1C\x15a\x06;Wc\xC9eN\xD4_R`\x04`\x1C\xFD[_\x80\x80\x80a@Ja>v`<\x80\x88\x07\x84\x13\x90\x88\x05\x03`\x01aO-V[\x91P\x91Pa>\x99\x81a@\\\x88\x85aBLV[\x90aC\x80V[_\x81\x81R`\x06` R`@\x81 \x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x03\x82\x01`\x04\x82\x01R\x90\x91P_\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a@\xE1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90aA\x05\x91\x90aL\x11V[\x95\x94PPPPPV[aDB\x80a#%\x85\x85\x85c\xFF\xFF\xFF\xFF\x85\x16V[_\x82\x81R`\x06` \x90\x81R`@\x80\x83 \x84\x84R`\x04\x01\x90\x91R\x81 \x81\x90\x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x90\x91P_\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15aA\xAEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90aA\xD2\x91\x90aL\x11V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x98`\x80\x91\x90\x91\x1D\x97P\x95PPPPPPV[``_\x82\x12aB\tWa\x06;\x82a8\x93V[aB\x16\x82\x19`\x01\x01a8\x93V[\x80Q`-\x82R`\x01\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x90\x91\x01\x90\x81R\x92\x91PPV[_a\x13\x9Ds\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x84\x84aDPV[_\x80_\x83`\xFF\x03\x90P_aC/\x82`\xFF\x16\x87\x90\x1B\x7F\x07\x06\x06\x05\x06\x02\x05\x04\x06\x02\x03\x02\x05\x04\x03\x01\x06\x05\x02\x05\x03\x03\x04\x01\x05\x05\x03\x04\0\0\0\0`\x1Fo\x84!\x08B\x10\x84!\x08\xCCc\x18\xC6\xDBmT\xBE\x83\x15`\x08\x1Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x85\x11`\x07\x1B\x17\x84\x81\x1Cg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x10`\x06\x1B\x17\x84\x81\x1Cc\xFF\xFF\xFF\xFF\x10`\x05\x1B\x17\x84\x81\x1Ca\xFF\xFF\x10`\x04\x1B\x17\x84\x81\x1C`\xFF\x10`\x03\x1B\x17\x93\x84\x1C\x1C\x16\x1A\x17\x90V[\x90P\x80a\x01\0\x14\x15\x93P\x83aCDW_a>\xA8V[\x81`\xFF\x16\x81\x03\x92PPP\x92P\x92\x90PV[_`<`\xFF\x83\x16aCl`\x01\x86\x90\x0Ba\x01\0aOnV[aCv\x91\x90aO-V[a\x13\x9D\x91\x90aOnV[_\x80_aD\x1B\x84`\xFF\x16\x86\x90\x1C~\x1F\r\x1E\x10\x0C\x1D\x07\x0F\t\x0B\x19\x13\x1C\x17\x06\x01\x0E\x11\x08\n\x1A\x14\x18\x02\x12\x1B\x15\x03\x16\x04\x05\x81\x19`\x01\x01\x90\x91\x16a\x01\xE0\x7F\x80@@UC\0RfD2\0\0P a\x06t\x050&\x02\0\0\x10u\x06 \x01v\x11pw`\xFC\x7F\xB6\xDBm\xB6\xDD\xDD\xDD\xDD\xD3M4\xD3I$\x92I!\x08B\x10\x8Cc\x18\xC69\xCEs\x9C\xFF\xFF\xFF\xFF\x84\x02`\xF8\x1C\x16\x1B`\xF7\x1C\x16\x90\x81\x1Cc\xD7dS\xE0\x04`\x1F\x16\x91\x90\x91\x1A\x17\x90V[\x90P\x80a\x01\0\x14\x15\x92P\x82aD1W`\xFFaD8V[\x83`\xFF\x16\x81\x01[\x91PP\x92P\x92\x90PV[\x80\x82\x82\x85`\x04Z\xFAPPPPV[_\x82\x81R`\x06` \x90\x81R`@\x80\x83 \x84\x84R`\x05\x01\x90\x91R\x81 \x81\x90`@Q\x7F\x1E.\xAE\xAF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x81\x01\x82\x90R\x90\x91Ps\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x86\x16\x90c\x1E.\xAE\xAF\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a@\xE1W=_\x80>=_\xFD[_` \x82\x84\x03\x12\x15aD\xE9W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\x9DW_\x80\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x02xW_\x80\xFD[_`\xA0\x82\x84\x03\x12\x15aE1W_\x80\xFD[P\x91\x90PV[_`\x80\x82\x84\x03\x12\x15aE1W_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12aEWW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aEnW_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x12\tW_\x80\xFD[_\x80_\x80_a\x01`\x86\x88\x03\x12\x15aE\x9AW_\x80\xFD[\x855aE\xA5\x81aE\0V[\x94PaE\xB4\x87` \x88\x01aE!V[\x93PaE\xC3\x87`\xC0\x88\x01aE7V[\x92Pa\x01@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aE\xDFW_\x80\xFD[aE\xEB\x88\x82\x89\x01aEGV[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[_` \x82\x84\x03\x12\x15aF\x0CW_\x80\xFD[\x815k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x13\x9DW_\x80\xFD[_` \x82\x84\x03\x12\x15aF7W_\x80\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aFMW_\x80\xFD[\x82\x01` \x81\x85\x03\x12\x15a\x13\x9DW_\x80\xFD[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` \x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x7F\xFF\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x16\x81R`\xE0` \x82\x01R_aF\xE4`\xE0\x83\x01\x89aF^V[\x82\x81\x03`@\x84\x01RaF\xF6\x81\x89aF^V[``\x84\x01\x88\x90Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16`\x80\x85\x01R`\xA0\x84\x01\x86\x90R\x83\x81\x03`\xC0\x85\x01R\x84Q\x80\x82R` \x80\x87\x01\x93P\x90\x91\x01\x90_[\x81\x81\x10\x15aGXW\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01aG:V[P\x90\x9B\x9APPPPPPPPPPPV[_\x80_\x80_\x80a\x01\x80\x87\x89\x03\x12\x15aG\x7FW_\x80\xFD[\x865aG\x8A\x81aE\0V[\x95PaG\x99\x88` \x89\x01aE!V[\x94PaG\xA8\x88`\xC0\x89\x01aE7V[\x93Pa\x01@\x87\x015\x92Pa\x01`\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aG\xCCW_\x80\xFD[aG\xD8\x89\x82\x8A\x01aEGV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[_\x80` \x83\x85\x03\x12\x15aG\xFBW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aH\x11W_\x80\xFD[aH\x1D\x85\x82\x86\x01aEGV[\x90\x96\x90\x95P\x93PPPPV[` \x81R_a\x13\x9D` \x83\x01\x84aF^V[_\x80` \x83\x85\x03\x12\x15aHLW_\x80\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aHbW_\x80\xFD[\x83\x01`\x1F\x81\x01\x85\x13aHrW_\x80\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aH\x88W_\x80\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15aH\x9CW_\x80\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x80_`\xE0\x84\x86\x03\x12\x15aH\xBEW_\x80\xFD[\x835aH\xC9\x81aE\0V[\x92PaH\xD8\x85` \x86\x01aE!V[\x91P`\xC0\x84\x015aH\xE8\x81aE\0V[\x80\x91PP\x92P\x92P\x92V[_\x80\x835\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE1\x846\x03\x01\x81\x12aI&W_\x80\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15aI@W_\x80\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x12\tW_\x80\xFD[` \x81R\x81` \x82\x01R\x81\x83`@\x83\x017_\x81\x83\x01`@\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0\x16\x01\x01\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15aI\xDDW_\x80\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aI\xF3W_\x80\xFD[\x82\x01`\x1F\x81\x01\x84\x13aJ\x03W_\x80\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15aJ\x1DWaJ\x1DaI\xA0V[`@Q\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`?\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xE0`\x1F\x85\x01\x16\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15aJ\x89WaJ\x89aI\xA0V[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15aJ\xA0W_\x80\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15aJ\xFAW_\x80\xFD[\x815a\x13\x9D\x81aE\0V[_` \x82\x84\x03\x12\x15aK\x15W_\x80\xFD[\x815\x80`\x02\x0B\x81\x14a\x13\x9DW_\x80\xFD[_` \x82\x84\x03\x12\x15aK5W_\x80\xFD[\x815b\xFF\xFF\xFF\x81\x16\x81\x14a\x13\x9DW_\x80\xFD[s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83Q\x16\x81Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF` \x84\x01Q\x16` \x82\x01Rb\xFF\xFF\xFF`@\x84\x01Q\x16`@\x82\x01R``\x83\x01Q`\x02\x0B``\x82\x01Rs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x80\x84\x01Q\x16`\x80\x82\x01RaK\xF6`\xA0\x82\x01\x83\x80Q\x15\x15\x82R` \x80\x82\x01Q\x90\x83\x01R`@\x90\x81\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91\x01RV[a\x01 a\x01\0\x82\x01R_a*+a\x01 \x83\x01_\x81R` \x01\x90V[_` \x82\x84\x03\x12\x15aL!W_\x80\xFD[PQ\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03aL\x85WaL\x85aL(V[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x06;Wa\x06;aL(V[\x81\x81\x03\x81\x81\x11\x15a\x06;Wa\x06;aL(V[_\x82aL\xE5W\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[P\x04\x90V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x06;Wa\x06;aL(V[`@\x81R_aM\x13`@\x83\x01\x85aF^V[\x90P\x82` \x83\x01R\x93\x92PPPV[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x7F[CALLDATAREADER] reading next \0\0\x81R_aMj`\x1E\x83\x01\x85aM\"V[\x7F byte(s) at \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81RaM\x9A`\x0C\x82\x01\x85aM\"V[\x7F as %s -> %s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x0C\x01\x95\x94PPPPPV[_a*+aM\xD7\x83\x86aM\"V[\x84aM\"V[``\x81R_aM\xEF``\x83\x01\x86aF^V[\x82\x81\x03` \x84\x01RaN\x01\x81\x86aF^V[\x90P\x82\x81\x03`@\x84\x01RaN\x15\x81\x85aF^V[\x96\x95PPPPPPV[``\x81R_aN1``\x83\x01\x86aF^V[\x84` \x84\x01R\x82\x81\x03`@\x84\x01RaN\x15\x81\x85aF^V[``\x81R_aN[``\x83\x01\x86aF^V[\x82\x81\x03` \x84\x01RaNm\x81\x86aF^V[\x91PP\x82`@\x83\x01R\x94\x93PPPPV[`\x02\x82\x81\x0B\x90\x82\x90\x0B\x03\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x81\x12b\x7F\xFF\xFF\x82\x13\x17\x15a\x06;Wa\x06;aL(V[``\x81R_aN\xD1``\x83\x01\x86aF^V[` \x83\x01\x94\x90\x94RP`@\x01R\x91\x90PV[`\x80\x81R_aN\xF5`\x80\x83\x01\x87aF^V[\x82\x81\x03` \x84\x01RaO\x07\x81\x87aF^V[\x90P\x82\x81\x03`@\x84\x01RaO\x1B\x81\x86aF^V[\x91PP\x82``\x83\x01R\x95\x94PPPPPV[`\x02\x81\x81\x0B\x90\x83\x90\x0B\x01b\x7F\xFF\xFF\x81\x13\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x82\x12\x17\x15a\x06;Wa\x06;aL(V[_\x82`\x02\x0B\x82`\x02\x0B\x02\x80`\x02\x0B\x91P\x80\x82\x14a\x15iWa\x15iaL(V\xFE[PoolRewardsManager] retrieving assets, building pool id[RewardsUpdater] Decoding bounds of reward amounts list[RewardsUpdater] Starting core reward loop[RewardsUpdater] Pool current tick: %d[RewardsUpdater] Entering _decodeAndReward[RewardsUpdater] Main reward loop complete.[RewardsUpdater] Initialized, updating tick[RewardsUpdater] Updating global growth by cumulativeGrowth[PoolRewardsManager] entering _rewardPool[RewardsUpdater] Decoding startTick[RewardsUpdater] entering _rewardAbove[RewardsUpdater] Decoding update start liquidity[RewardsUpdater] Increasing tick %s growth outside by %e18[RewardsUpdater] entering _rewardBelow[RewardsUpdater] Retrieved and updated liquidity to: %s[RewardsUpdater] currentTickReward: %s[CALLDATAREADER] reading next %s byte(s) at %s as bytes ->[RewardsUpdater] Retrieving pool %x current tick[RewardsUpdater] reward update loop (initialized: %s, tick: %s, liquidity: %s)[RewardsUpdater] Completed core reward loop, checking end liquidity[PoolRewardsManager] decoding asset indices[Asset] Attempting to retrieve asset[%s] from array[RewardsUpdater] Final values (total: %s, cumulativeGrowth: s)[RewardsUpdater] Adding %s to tick %s[RewardsUpdater] Reading additional amount for current tick\xA1dsolcC\0\x08\x1A\0\n",
    );
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct BalanceDelta(alloy::sol_types::private::I256);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<BalanceDelta>
        for alloy::sol_types::private::I256 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Int<256>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl BalanceDelta {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::I256) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::I256 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for BalanceDelta {
            type RustType = alloy::sol_types::private::I256;
            type Token<'a> = <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Int<
                256,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for BalanceDelta {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Currency(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Currency>
        for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                '_,
            > {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        self,
                    )
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl Currency {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Currency {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                'a,
            >;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Currency {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**```solidity
struct ModifyLiquidityParams { int24 tickLower; int24 tickUpper; int256 liquidityDelta; bytes32 salt; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ModifyLiquidityParams {
        pub tickLower: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickUpper: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub liquidityDelta: alloy::sol_types::private::I256,
        pub salt: alloy::sol_types::private::FixedBytes<32>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Int<256>,
            alloy::sol_types::sol_data::FixedBytes<32>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::I256,
            alloy::sol_types::private::FixedBytes<32>,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ModifyLiquidityParams> for UnderlyingRustTuple<'_> {
            fn from(value: ModifyLiquidityParams) -> Self {
                (value.tickLower, value.tickUpper, value.liquidityDelta, value.salt)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ModifyLiquidityParams {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    tickLower: tuple.0,
                    tickUpper: tuple.1,
                    liquidityDelta: tuple.2,
                    salt: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for ModifyLiquidityParams {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for ModifyLiquidityParams {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.liquidityDelta),
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::tokenize(&self.salt),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for ModifyLiquidityParams {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for ModifyLiquidityParams {
            const NAME: &'static str = "ModifyLiquidityParams";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "ModifyLiquidityParams(int24 tickLower,int24 tickUpper,int256 liquidityDelta,bytes32 salt)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickLower)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickUpper)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.liquidityDelta,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.salt)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for ModifyLiquidityParams {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickLower,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickUpper,
                    )
                    + <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.liquidityDelta,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        32,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.salt)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickLower,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickUpper,
                    out,
                );
                <alloy::sol_types::sol_data::Int<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.liquidityDelta,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    32,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.salt,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct PadeEncoded { bytes data; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PadeEncoded {
        pub data: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PadeEncoded> for UnderlyingRustTuple<'_> {
            fn from(value: PadeEncoded) -> Self {
                (value.data,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PadeEncoded {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { data: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PadeEncoded {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PadeEncoded {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PadeEncoded {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PadeEncoded {
            const NAME: &'static str = "PadeEncoded";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed("PadeEncoded(bytes data)")
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                        &self.data,
                    )
                    .0
                    .to_vec()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PadeEncoded {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.data,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct PoolKey { Currency currency0; Currency currency1; uint24 fee; int24 tickSpacing; address hooks; }
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct PoolKey {
        pub currency0: <Currency as alloy::sol_types::SolType>::RustType,
        pub currency1: <Currency as alloy::sol_types::SolType>::RustType,
        pub fee: <alloy::sol_types::sol_data::Uint<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub tickSpacing: <alloy::sol_types::sol_data::Int<
            24,
        > as alloy::sol_types::SolType>::RustType,
        pub hooks: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            Currency,
            Currency,
            alloy::sol_types::sol_data::Uint<24>,
            alloy::sol_types::sol_data::Int<24>,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <Currency as alloy::sol_types::SolType>::RustType,
            <Currency as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Uint<
                24,
            > as alloy::sol_types::SolType>::RustType,
            <alloy::sol_types::sol_data::Int<24> as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<PoolKey> for UnderlyingRustTuple<'_> {
            fn from(value: PoolKey) -> Self {
                (
                    value.currency0,
                    value.currency1,
                    value.fee,
                    value.tickSpacing,
                    value.hooks,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for PoolKey {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    currency0: tuple.0,
                    currency1: tuple.1,
                    fee: tuple.2,
                    tickSpacing: tuple.3,
                    hooks: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for PoolKey {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for PoolKey {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency0),
                    <Currency as alloy_sol_types::SolType>::tokenize(&self.currency1),
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickSpacing),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.hooks,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for PoolKey {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for PoolKey {
            const NAME: &'static str = "PoolKey";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "PoolKey(address currency0,address currency1,uint24 fee,int24 tickSpacing,address hooks)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency0,
                        )
                        .0,
                    <Currency as alloy_sol_types::SolType>::eip712_data_word(
                            &self.currency1,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tickSpacing)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.hooks,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for PoolKey {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency0,
                    )
                    + <Currency as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.currency1,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tickSpacing,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.hooks,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency0,
                    out,
                );
                <Currency as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.currency1,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::Int<
                    24,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tickSpacing,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.hooks,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `AssetsOutOfOrderOrNotUnique()` and selector `0x80f11acf`.
```solidity
error AssetsOutOfOrderOrNotUnique();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct AssetsOutOfOrderOrNotUnique {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<AssetsOutOfOrderOrNotUnique>
        for UnderlyingRustTuple<'_> {
            fn from(value: AssetsOutOfOrderOrNotUnique) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for AssetsOutOfOrderOrNotUnique {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for AssetsOutOfOrderOrNotUnique {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "AssetsOutOfOrderOrNotUnique()";
            const SELECTOR: [u8; 4] = [128u8, 241u8, 26u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `Expired()` and selector `0x203d82d8`.
```solidity
error Expired();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Expired {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Expired> for UnderlyingRustTuple<'_> {
            fn from(value: Expired) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Expired {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Expired {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Expired()";
            const SELECTOR: [u8; 4] = [32u8, 61u8, 130u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FillingTooLittle()` and selector `0xc4daf003`.
```solidity
error FillingTooLittle();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FillingTooLittle {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FillingTooLittle> for UnderlyingRustTuple<'_> {
            fn from(value: FillingTooLittle) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FillingTooLittle {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FillingTooLittle {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FillingTooLittle()";
            const SELECTOR: [u8; 4] = [196u8, 218u8, 240u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `FillingTooMuch()` and selector `0x44182331`.
```solidity
error FillingTooMuch();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct FillingTooMuch {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<FillingTooMuch> for UnderlyingRustTuple<'_> {
            fn from(value: FillingTooMuch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for FillingTooMuch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for FillingTooMuch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "FillingTooMuch()";
            const SELECTOR: [u8; 4] = [68u8, 24u8, 35u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidPoolKey()` and selector `0xc256622b`.
```solidity
error InvalidPoolKey();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidPoolKey {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidPoolKey> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidPoolKey) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidPoolKey {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidPoolKey {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidPoolKey()";
            const SELECTOR: [u8; 4] = [194u8, 86u8, 98u8, 43u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `InvalidSignature()` and selector `0x8baa579f`.
```solidity
error InvalidSignature();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct InvalidSignature {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<InvalidSignature> for UnderlyingRustTuple<'_> {
            fn from(value: InvalidSignature) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for InvalidSignature {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for InvalidSignature {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "InvalidSignature()";
            const SELECTOR: [u8; 4] = [139u8, 170u8, 87u8, 159u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `LimitViolated()` and selector `0x8e1edfa4`.
```solidity
error LimitViolated();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct LimitViolated {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<LimitViolated> for UnderlyingRustTuple<'_> {
            fn from(value: LimitViolated) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for LimitViolated {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for LimitViolated {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LimitViolated()";
            const SELECTOR: [u8; 4] = [142u8, 30u8, 223u8, 164u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `MissingHookPermissions(uint160)` and selector `0x75383228`.
```solidity
error MissingHookPermissions(uint160);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct MissingHookPermissions {
        pub _0: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<160>,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            <alloy::sol_types::sol_data::Uint<
                160,
            > as alloy::sol_types::SolType>::RustType,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MissingHookPermissions> for UnderlyingRustTuple<'_> {
            fn from(value: MissingHookPermissions) -> Self {
                (value._0,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for MissingHookPermissions {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { _0: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MissingHookPermissions {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MissingHookPermissions(uint160)";
            const SELECTOR: [u8; 4] = [117u8, 56u8, 50u8, 40u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
        }
    };
    /**Custom error with signature `NonceReuse()` and selector `0x8cb88872`.
```solidity
error NonceReuse();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NonceReuse {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NonceReuse> for UnderlyingRustTuple<'_> {
            fn from(value: NonceReuse) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NonceReuse {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NonceReuse {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NonceReuse()";
            const SELECTOR: [u8; 4] = [140u8, 184u8, 136u8, 114u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotController()` and selector `0x23019e67`.
```solidity
error NotController();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NotController {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotController> for UnderlyingRustTuple<'_> {
            fn from(value: NotController) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotController {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotController {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotController()";
            const SELECTOR: [u8; 4] = [35u8, 1u8, 158u8, 103u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotNode()` and selector `0x5cd26b68`.
```solidity
error NotNode();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NotNode {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotNode> for UnderlyingRustTuple<'_> {
            fn from(value: NotNode) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotNode {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotNode {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotNode()";
            const SELECTOR: [u8; 4] = [92u8, 210u8, 107u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `NotUniswap()` and selector `0xf8328614`.
```solidity
error NotUniswap();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct NotUniswap {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NotUniswap> for UnderlyingRustTuple<'_> {
            fn from(value: NotUniswap) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NotUniswap {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NotUniswap {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NotUniswap()";
            const SELECTOR: [u8; 4] = [248u8, 50u8, 134u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OnlyOncePerBlock()` and selector `0xd8a6b89b`.
```solidity
error OnlyOncePerBlock();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OnlyOncePerBlock {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnlyOncePerBlock> for UnderlyingRustTuple<'_> {
            fn from(value: OnlyOncePerBlock) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnlyOncePerBlock {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OnlyOncePerBlock {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OnlyOncePerBlock()";
            const SELECTOR: [u8; 4] = [216u8, 166u8, 184u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OrderAlreadyExecuted()` and selector `0x8a2ef116`.
```solidity
error OrderAlreadyExecuted();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OrderAlreadyExecuted {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OrderAlreadyExecuted> for UnderlyingRustTuple<'_> {
            fn from(value: OrderAlreadyExecuted) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OrderAlreadyExecuted {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OrderAlreadyExecuted {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OrderAlreadyExecuted()";
            const SELECTOR: [u8; 4] = [138u8, 46u8, 241u8, 22u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `OutOfBoundRead(uint256,uint256)` and selector `0xbc5f997c`.
```solidity
error OutOfBoundRead(uint256 arrayIndex, uint256 arrayLength);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OutOfBoundRead {
        pub arrayIndex: alloy::sol_types::private::U256,
        pub arrayLength: alloy::sol_types::private::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::U256,
            alloy::sol_types::private::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OutOfBoundRead> for UnderlyingRustTuple<'_> {
            fn from(value: OutOfBoundRead) -> Self {
                (value.arrayIndex, value.arrayLength)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OutOfBoundRead {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    arrayIndex: tuple.0,
                    arrayLength: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OutOfBoundRead {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OutOfBoundRead(uint256,uint256)";
            const SELECTOR: [u8; 4] = [188u8, 95u8, 153u8, 124u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.arrayIndex),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.arrayLength),
                )
            }
        }
    };
    /**Custom error with signature `OutOfOrderOrDuplicatePairs()` and selector `0xf35f9399`.
```solidity
error OutOfOrderOrDuplicatePairs();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct OutOfOrderOrDuplicatePairs {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OutOfOrderOrDuplicatePairs>
        for UnderlyingRustTuple<'_> {
            fn from(value: OutOfOrderOrDuplicatePairs) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OutOfOrderOrDuplicatePairs {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OutOfOrderOrDuplicatePairs {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OutOfOrderOrDuplicatePairs()";
            const SELECTOR: [u8; 4] = [243u8, 95u8, 147u8, 153u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `Overflow()` and selector `0x35278d12`.
```solidity
error Overflow();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct Overflow {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Overflow> for UnderlyingRustTuple<'_> {
            fn from(value: Overflow) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Overflow {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for Overflow {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "Overflow()";
            const SELECTOR: [u8; 4] = [53u8, 39u8, 141u8, 18u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `ReaderNotAtEnd()` and selector `0x01842f8c`.
```solidity
error ReaderNotAtEnd();
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct ReaderNotAtEnd {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ReaderNotAtEnd> for UnderlyingRustTuple<'_> {
            fn from(value: ReaderNotAtEnd) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ReaderNotAtEnd {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ReaderNotAtEnd {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ReaderNotAtEnd()";
            const SELECTOR: [u8; 4] = [1u8, 132u8, 47u8, 140u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Custom error with signature `WrongEndLiquidity(uint128,uint128)` and selector `0x6429cfd2`.
```solidity
error WrongEndLiquidity(uint128, uint128);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct WrongEndLiquidity {
        pub _0: u128,
        pub _1: u128,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<128>,
            alloy::sol_types::sol_data::Uint<128>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (u128, u128);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<WrongEndLiquidity> for UnderlyingRustTuple<'_> {
            fn from(value: WrongEndLiquidity) -> Self {
                (value._0, value._1)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for WrongEndLiquidity {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { _0: tuple.0, _1: tuple.1 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for WrongEndLiquidity {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "WrongEndLiquidity(uint128,uint128)";
            const SELECTOR: [u8; 4] = [100u8, 41u8, 207u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                    <alloy::sol_types::sol_data::Uint<
                        128,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                )
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address uniV4PoolManager, address governance);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub uniV4PoolManager: alloy::sol_types::private::Address,
        pub governance: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.uniV4PoolManager, value.governance)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        uniV4PoolManager: tuple.0,
                        governance: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.uniV4PoolManager,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.governance,
                    ),
                )
            }
        }
    };
    /**Function with signature `afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes)` and selector `0x8db2b652`.
```solidity
function afterRemoveLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, BalanceDelta, bytes memory) external pure returns (bytes4, BalanceDelta);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct afterRemoveLiquidityCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
        pub _3: <BalanceDelta as alloy::sol_types::SolType>::RustType,
        pub _4: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes)`](afterRemoveLiquidityCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct afterRemoveLiquidityReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
        pub _1: <BalanceDelta as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                BalanceDelta,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
                <BalanceDelta as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<afterRemoveLiquidityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: afterRemoveLiquidityCall) -> Self {
                    (value._0, value._1, value._2, value._3, value._4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for afterRemoveLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                        _4: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<4>,
                BalanceDelta,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<4>,
                <BalanceDelta as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<afterRemoveLiquidityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: afterRemoveLiquidityReturn) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for afterRemoveLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for afterRemoveLiquidityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                BalanceDelta,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = afterRemoveLiquidityReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<4>,
                BalanceDelta,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "afterRemoveLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),int256,bytes)";
            const SELECTOR: [u8; 4] = [141u8, 178u8, 182u8, 82u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self._1),
                    <ModifyLiquidityParams as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                    <BalanceDelta as alloy_sol_types::SolType>::tokenize(&self._3),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)` and selector `0x259982e5`.
```solidity
function beforeAddLiquidity(address, PoolKey memory, ModifyLiquidityParams memory, bytes memory) external view returns (bytes4);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct beforeAddLiquidityCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
        pub _3: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)`](beforeAddLiquidityCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct beforeAddLiquidityReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beforeAddLiquidityCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: beforeAddLiquidityCall) -> Self {
                    (value._0, value._1, value._2, value._3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for beforeAddLiquidityCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beforeAddLiquidityReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: beforeAddLiquidityReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for beforeAddLiquidityReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for beforeAddLiquidityCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                ModifyLiquidityParams,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = beforeAddLiquidityReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "beforeAddLiquidity(address,(address,address,uint24,int24,address),(int24,int24,int256,bytes32),bytes)";
            const SELECTOR: [u8; 4] = [37u8, 153u8, 130u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self._1),
                    <ModifyLiquidityParams as alloy_sol_types::SolType>::tokenize(
                        &self._2,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._3,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `beforeInitialize(address,(address,address,uint24,int24,address),uint160)` and selector `0xdc98354e`.
```solidity
function beforeInitialize(address, PoolKey memory poolKey, uint160) external view returns (bytes4);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct beforeInitializeCall {
        pub _0: alloy::sol_types::private::Address,
        pub poolKey: <PoolKey as alloy::sol_types::SolType>::RustType,
        pub _2: <alloy::sol_types::sol_data::Uint<
            160,
        > as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`beforeInitialize(address,(address,address,uint24,int24,address),uint160)`](beforeInitializeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct beforeInitializeReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                alloy::sol_types::sol_data::Uint<160>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                <PoolKey as alloy::sol_types::SolType>::RustType,
                <alloy::sol_types::sol_data::Uint<
                    160,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beforeInitializeCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: beforeInitializeCall) -> Self {
                    (value._0, value.poolKey, value._2)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for beforeInitializeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        poolKey: tuple.1,
                        _2: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<beforeInitializeReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: beforeInitializeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for beforeInitializeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for beforeInitializeCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                PoolKey,
                alloy::sol_types::sol_data::Uint<160>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = beforeInitializeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "beforeInitialize(address,(address,address,uint24,int24,address),uint160)";
            const SELECTOR: [u8; 4] = [220u8, 152u8, 53u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <PoolKey as alloy_sol_types::SolType>::tokenize(&self.poolKey),
                    <alloy::sol_types::sol_data::Uint<
                        160,
                    > as alloy_sol_types::SolType>::tokenize(&self._2),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `eip712Domain()` and selector `0x84b0196e`.
```solidity
function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct eip712DomainCall {}
    ///Container type for the return parameters of the [`eip712Domain()`](eip712DomainCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct eip712DomainReturn {
        pub fields: alloy::sol_types::private::FixedBytes<1>,
        pub name: alloy::sol_types::private::String,
        pub version: alloy::sol_types::private::String,
        pub chainId: alloy::sol_types::private::U256,
        pub verifyingContract: alloy::sol_types::private::Address,
        pub salt: alloy::sol_types::private::FixedBytes<32>,
        pub extensions: alloy::sol_types::private::Vec<alloy::sol_types::private::U256>,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainCall> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::FixedBytes<1>,
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                alloy::sol_types::private::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::FixedBytes<32>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::U256>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eip712DomainReturn> for UnderlyingRustTuple<'_> {
                fn from(value: eip712DomainReturn) -> Self {
                    (
                        value.fields,
                        value.name,
                        value.version,
                        value.chainId,
                        value.verifyingContract,
                        value.salt,
                        value.extensions,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for eip712DomainReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fields: tuple.0,
                        name: tuple.1,
                        version: tuple.2,
                        chainId: tuple.3,
                        verifyingContract: tuple.4,
                        salt: tuple.5,
                        extensions: tuple.6,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for eip712DomainCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = eip712DomainReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedBytes<1>,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "eip712Domain()";
            const SELECTOR: [u8; 4] = [132u8, 176u8, 25u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `execute((bytes))` and selector `0x577db24d`.
```solidity
function execute(PadeEncoded memory encoded) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeCall {
        pub encoded: <PadeEncoded as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`execute((bytes))`](executeCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct executeReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (PadeEncoded,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <PadeEncoded as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeCall> for UnderlyingRustTuple<'_> {
                fn from(value: executeCall) -> Self {
                    (value.encoded,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { encoded: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<executeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: executeReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for executeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for executeCall {
            type Parameters<'a> = (PadeEncoded,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = executeReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "execute((bytes))";
            const SELECTOR: [u8; 4] = [87u8, 125u8, 178u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<PadeEncoded as alloy_sol_types::SolType>::tokenize(&self.encoded),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `govToggleNodes(address[])` and selector `0xc6a98eb9`.
```solidity
function govToggleNodes(address[] memory nodes) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct govToggleNodesCall {
        pub nodes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    ///Container type for the return parameters of the [`govToggleNodes(address[])`](govToggleNodesCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct govToggleNodesReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<govToggleNodesCall> for UnderlyingRustTuple<'_> {
                fn from(value: govToggleNodesCall) -> Self {
                    (value.nodes,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for govToggleNodesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nodes: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<govToggleNodesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: govToggleNodesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for govToggleNodesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for govToggleNodesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = govToggleNodesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "govToggleNodes(address[])";
            const SELECTOR: [u8; 4] = [198u8, 169u8, 142u8, 185u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.nodes),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `govUpdateHalfSpread(uint96)` and selector `0x2a6330cf`.
```solidity
function govUpdateHalfSpread(uint96 newHalfSpreadRay) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct govUpdateHalfSpreadCall {
        pub newHalfSpreadRay: <alloy::sol_types::sol_data::Uint<
            96,
        > as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`govUpdateHalfSpread(uint96)`](govUpdateHalfSpreadCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct govUpdateHalfSpreadReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<96>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    96,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<govUpdateHalfSpreadCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: govUpdateHalfSpreadCall) -> Self {
                    (value.newHalfSpreadRay,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for govUpdateHalfSpreadCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newHalfSpreadRay: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<govUpdateHalfSpreadReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: govUpdateHalfSpreadReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for govUpdateHalfSpreadReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for govUpdateHalfSpreadCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<96>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = govUpdateHalfSpreadReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "govUpdateHalfSpread(uint96)";
            const SELECTOR: [u8; 4] = [42u8, 99u8, 48u8, 207u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        96,
                    > as alloy_sol_types::SolType>::tokenize(&self.newHalfSpreadRay),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `halfSpreadRay()` and selector `0x97125bee`.
```solidity
function halfSpreadRay() external view returns (uint96);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct halfSpreadRayCall {}
    ///Container type for the return parameters of the [`halfSpreadRay()`](halfSpreadRayCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct halfSpreadRayReturn {
        pub _0: <alloy::sol_types::sol_data::Uint<
            96,
        > as alloy::sol_types::SolType>::RustType,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<halfSpreadRayCall> for UnderlyingRustTuple<'_> {
                fn from(value: halfSpreadRayCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for halfSpreadRayCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<96>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <alloy::sol_types::sol_data::Uint<
                    96,
                > as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<halfSpreadRayReturn> for UnderlyingRustTuple<'_> {
                fn from(value: halfSpreadRayReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for halfSpreadRayReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for halfSpreadRayCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = halfSpreadRayReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<96>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "halfSpreadRay()";
            const SELECTOR: [u8; 4] = [151u8, 18u8, 91u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `invalidateNonce(uint64)` and selector `0x116a5550`.
```solidity
function invalidateNonce(uint64 nonce) external;
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct invalidateNonceCall {
        pub nonce: u64,
    }
    ///Container type for the return parameters of the [`invalidateNonce(uint64)`](invalidateNonceCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct invalidateNonceReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<invalidateNonceCall> for UnderlyingRustTuple<'_> {
                fn from(value: invalidateNonceCall) -> Self {
                    (value.nonce,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for invalidateNonceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nonce: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<invalidateNonceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: invalidateNonceReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for invalidateNonceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for invalidateNonceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = invalidateNonceReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "invalidateNonce(uint64)";
            const SELECTOR: [u8; 4] = [17u8, 106u8, 85u8, 80u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        64,
                    > as alloy_sol_types::SolType>::tokenize(&self.nonce),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `lastBlockUpdated()` and selector `0x760f5f27`.
```solidity
function lastBlockUpdated() external view returns (uint64);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct lastBlockUpdatedCall {}
    ///Container type for the return parameters of the [`lastBlockUpdated()`](lastBlockUpdatedCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct lastBlockUpdatedReturn {
        pub _0: u64,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastBlockUpdatedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastBlockUpdatedCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastBlockUpdatedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u64,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lastBlockUpdatedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: lastBlockUpdatedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for lastBlockUpdatedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lastBlockUpdatedCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = lastBlockUpdatedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<64>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "lastBlockUpdated()";
            const SELECTOR: [u8; 4] = [118u8, 15u8, 95u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `unlockCallback(bytes)` and selector `0x91dd7346`.
```solidity
function unlockCallback(bytes memory data) external returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct unlockCallbackCall {
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`unlockCallback(bytes)`](unlockCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct unlockCallbackReturn {
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockCallbackCall> for UnderlyingRustTuple<'_> {
                fn from(value: unlockCallbackCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for unlockCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<unlockCallbackReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: unlockCallbackReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for unlockCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for unlockCallbackCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = unlockCallbackReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "unlockCallback(bytes)";
            const SELECTOR: [u8; 4] = [145u8, 221u8, 115u8, 70u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Angstrom`](self) function calls.
    pub enum AngstromCalls {
        afterRemoveLiquidity(afterRemoveLiquidityCall),
        beforeAddLiquidity(beforeAddLiquidityCall),
        beforeInitialize(beforeInitializeCall),
        eip712Domain(eip712DomainCall),
        execute(executeCall),
        govToggleNodes(govToggleNodesCall),
        govUpdateHalfSpread(govUpdateHalfSpreadCall),
        halfSpreadRay(halfSpreadRayCall),
        invalidateNonce(invalidateNonceCall),
        lastBlockUpdated(lastBlockUpdatedCall),
        unlockCallback(unlockCallbackCall),
    }
    #[automatically_derived]
    impl AngstromCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 106u8, 85u8, 80u8],
            [37u8, 153u8, 130u8, 229u8],
            [42u8, 99u8, 48u8, 207u8],
            [87u8, 125u8, 178u8, 77u8],
            [118u8, 15u8, 95u8, 39u8],
            [132u8, 176u8, 25u8, 110u8],
            [141u8, 178u8, 182u8, 82u8],
            [145u8, 221u8, 115u8, 70u8],
            [151u8, 18u8, 91u8, 238u8],
            [198u8, 169u8, 142u8, 185u8],
            [220u8, 152u8, 53u8, 78u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AngstromCalls {
        const NAME: &'static str = "AngstromCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::afterRemoveLiquidity(_) => {
                    <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::beforeAddLiquidity(_) => {
                    <beforeAddLiquidityCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::beforeInitialize(_) => {
                    <beforeInitializeCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::eip712Domain(_) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::execute(_) => <executeCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::govToggleNodes(_) => {
                    <govToggleNodesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::govUpdateHalfSpread(_) => {
                    <govUpdateHalfSpreadCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::halfSpreadRay(_) => {
                    <halfSpreadRayCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::invalidateNonce(_) => {
                    <invalidateNonceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::lastBlockUpdated(_) => {
                    <lastBlockUpdatedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::unlockCallback(_) => {
                    <unlockCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AngstromCalls>] = &[
                {
                    fn invalidateNonce(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <invalidateNonceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::invalidateNonce)
                    }
                    invalidateNonce
                },
                {
                    fn beforeAddLiquidity(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <beforeAddLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::beforeAddLiquidity)
                    }
                    beforeAddLiquidity
                },
                {
                    fn govUpdateHalfSpread(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <govUpdateHalfSpreadCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::govUpdateHalfSpread)
                    }
                    govUpdateHalfSpread
                },
                {
                    fn execute(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <executeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::execute)
                    }
                    execute
                },
                {
                    fn lastBlockUpdated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <lastBlockUpdatedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::lastBlockUpdated)
                    }
                    lastBlockUpdated
                },
                {
                    fn eip712Domain(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <eip712DomainCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::eip712Domain)
                    }
                    eip712Domain
                },
                {
                    fn afterRemoveLiquidity(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::afterRemoveLiquidity)
                    }
                    afterRemoveLiquidity
                },
                {
                    fn unlockCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <unlockCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::unlockCallback)
                    }
                    unlockCallback
                },
                {
                    fn halfSpreadRay(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <halfSpreadRayCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::halfSpreadRay)
                    }
                    halfSpreadRay
                },
                {
                    fn govToggleNodes(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <govToggleNodesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::govToggleNodes)
                    }
                    govToggleNodes
                },
                {
                    fn beforeInitialize(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromCalls> {
                        <beforeInitializeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromCalls::beforeInitialize)
                    }
                    beforeInitialize
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::afterRemoveLiquidity(inner) => {
                    <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::beforeAddLiquidity(inner) => {
                    <beforeAddLiquidityCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::beforeInitialize(inner) => {
                    <beforeInitializeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::govToggleNodes(inner) => {
                    <govToggleNodesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::govUpdateHalfSpread(inner) => {
                    <govUpdateHalfSpreadCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::halfSpreadRay(inner) => {
                    <halfSpreadRayCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::invalidateNonce(inner) => {
                    <invalidateNonceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::lastBlockUpdated(inner) => {
                    <lastBlockUpdatedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::unlockCallback(inner) => {
                    <unlockCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::afterRemoveLiquidity(inner) => {
                    <afterRemoveLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::beforeAddLiquidity(inner) => {
                    <beforeAddLiquidityCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::beforeInitialize(inner) => {
                    <beforeInitializeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::eip712Domain(inner) => {
                    <eip712DomainCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::execute(inner) => {
                    <executeCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::govToggleNodes(inner) => {
                    <govToggleNodesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::govUpdateHalfSpread(inner) => {
                    <govUpdateHalfSpreadCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::halfSpreadRay(inner) => {
                    <halfSpreadRayCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::invalidateNonce(inner) => {
                    <invalidateNonceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::lastBlockUpdated(inner) => {
                    <lastBlockUpdatedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::unlockCallback(inner) => {
                    <unlockCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Angstrom`](self) custom errors.
    pub enum AngstromErrors {
        AssetsOutOfOrderOrNotUnique(AssetsOutOfOrderOrNotUnique),
        Expired(Expired),
        FillingTooLittle(FillingTooLittle),
        FillingTooMuch(FillingTooMuch),
        InvalidPoolKey(InvalidPoolKey),
        InvalidSignature(InvalidSignature),
        LimitViolated(LimitViolated),
        MissingHookPermissions(MissingHookPermissions),
        NonceReuse(NonceReuse),
        NotController(NotController),
        NotNode(NotNode),
        NotUniswap(NotUniswap),
        OnlyOncePerBlock(OnlyOncePerBlock),
        OrderAlreadyExecuted(OrderAlreadyExecuted),
        OutOfBoundRead(OutOfBoundRead),
        OutOfOrderOrDuplicatePairs(OutOfOrderOrDuplicatePairs),
        Overflow(Overflow),
        ReaderNotAtEnd(ReaderNotAtEnd),
        WrongEndLiquidity(WrongEndLiquidity),
    }
    #[automatically_derived]
    impl AngstromErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 132u8, 47u8, 140u8],
            [32u8, 61u8, 130u8, 216u8],
            [35u8, 1u8, 158u8, 103u8],
            [53u8, 39u8, 141u8, 18u8],
            [68u8, 24u8, 35u8, 49u8],
            [92u8, 210u8, 107u8, 104u8],
            [100u8, 41u8, 207u8, 210u8],
            [117u8, 56u8, 50u8, 40u8],
            [128u8, 241u8, 26u8, 207u8],
            [138u8, 46u8, 241u8, 22u8],
            [139u8, 170u8, 87u8, 159u8],
            [140u8, 184u8, 136u8, 114u8],
            [142u8, 30u8, 223u8, 164u8],
            [188u8, 95u8, 153u8, 124u8],
            [194u8, 86u8, 98u8, 43u8],
            [196u8, 218u8, 240u8, 3u8],
            [216u8, 166u8, 184u8, 155u8],
            [243u8, 95u8, 147u8, 153u8],
            [248u8, 50u8, 134u8, 20u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for AngstromErrors {
        const NAME: &'static str = "AngstromErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 19usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::AssetsOutOfOrderOrNotUnique(_) => {
                    <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Expired(_) => <Expired as alloy_sol_types::SolError>::SELECTOR,
                Self::FillingTooLittle(_) => {
                    <FillingTooLittle as alloy_sol_types::SolError>::SELECTOR
                }
                Self::FillingTooMuch(_) => {
                    <FillingTooMuch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidPoolKey(_) => {
                    <InvalidPoolKey as alloy_sol_types::SolError>::SELECTOR
                }
                Self::InvalidSignature(_) => {
                    <InvalidSignature as alloy_sol_types::SolError>::SELECTOR
                }
                Self::LimitViolated(_) => {
                    <LimitViolated as alloy_sol_types::SolError>::SELECTOR
                }
                Self::MissingHookPermissions(_) => {
                    <MissingHookPermissions as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NonceReuse(_) => {
                    <NonceReuse as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotController(_) => {
                    <NotController as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NotNode(_) => <NotNode as alloy_sol_types::SolError>::SELECTOR,
                Self::NotUniswap(_) => {
                    <NotUniswap as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OnlyOncePerBlock(_) => {
                    <OnlyOncePerBlock as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OrderAlreadyExecuted(_) => {
                    <OrderAlreadyExecuted as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OutOfBoundRead(_) => {
                    <OutOfBoundRead as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OutOfOrderOrDuplicatePairs(_) => {
                    <OutOfOrderOrDuplicatePairs as alloy_sol_types::SolError>::SELECTOR
                }
                Self::Overflow(_) => <Overflow as alloy_sol_types::SolError>::SELECTOR,
                Self::ReaderNotAtEnd(_) => {
                    <ReaderNotAtEnd as alloy_sol_types::SolError>::SELECTOR
                }
                Self::WrongEndLiquidity(_) => {
                    <WrongEndLiquidity as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<AngstromErrors>] = &[
                {
                    fn ReaderNotAtEnd(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <ReaderNotAtEnd as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::ReaderNotAtEnd)
                    }
                    ReaderNotAtEnd
                },
                {
                    fn Expired(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <Expired as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::Expired)
                    }
                    Expired
                },
                {
                    fn NotController(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <NotController as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::NotController)
                    }
                    NotController
                },
                {
                    fn Overflow(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <Overflow as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::Overflow)
                    }
                    Overflow
                },
                {
                    fn FillingTooMuch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <FillingTooMuch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::FillingTooMuch)
                    }
                    FillingTooMuch
                },
                {
                    fn NotNode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <NotNode as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::NotNode)
                    }
                    NotNode
                },
                {
                    fn WrongEndLiquidity(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <WrongEndLiquidity as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::WrongEndLiquidity)
                    }
                    WrongEndLiquidity
                },
                {
                    fn MissingHookPermissions(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <MissingHookPermissions as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::MissingHookPermissions)
                    }
                    MissingHookPermissions
                },
                {
                    fn AssetsOutOfOrderOrNotUnique(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::AssetsOutOfOrderOrNotUnique)
                    }
                    AssetsOutOfOrderOrNotUnique
                },
                {
                    fn OrderAlreadyExecuted(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <OrderAlreadyExecuted as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::OrderAlreadyExecuted)
                    }
                    OrderAlreadyExecuted
                },
                {
                    fn InvalidSignature(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <InvalidSignature as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::InvalidSignature)
                    }
                    InvalidSignature
                },
                {
                    fn NonceReuse(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <NonceReuse as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::NonceReuse)
                    }
                    NonceReuse
                },
                {
                    fn LimitViolated(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <LimitViolated as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::LimitViolated)
                    }
                    LimitViolated
                },
                {
                    fn OutOfBoundRead(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <OutOfBoundRead as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::OutOfBoundRead)
                    }
                    OutOfBoundRead
                },
                {
                    fn InvalidPoolKey(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <InvalidPoolKey as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::InvalidPoolKey)
                    }
                    InvalidPoolKey
                },
                {
                    fn FillingTooLittle(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <FillingTooLittle as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::FillingTooLittle)
                    }
                    FillingTooLittle
                },
                {
                    fn OnlyOncePerBlock(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <OnlyOncePerBlock as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::OnlyOncePerBlock)
                    }
                    OnlyOncePerBlock
                },
                {
                    fn OutOfOrderOrDuplicatePairs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <OutOfOrderOrDuplicatePairs as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::OutOfOrderOrDuplicatePairs)
                    }
                    OutOfOrderOrDuplicatePairs
                },
                {
                    fn NotUniswap(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<AngstromErrors> {
                        <NotUniswap as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(AngstromErrors::NotUniswap)
                    }
                    NotUniswap
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::AssetsOutOfOrderOrNotUnique(inner) => {
                    <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Expired(inner) => {
                    <Expired as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::FillingTooLittle(inner) => {
                    <FillingTooLittle as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::FillingTooMuch(inner) => {
                    <FillingTooMuch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidPoolKey(inner) => {
                    <InvalidPoolKey as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::InvalidSignature(inner) => {
                    <InvalidSignature as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::LimitViolated(inner) => {
                    <LimitViolated as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::MissingHookPermissions(inner) => {
                    <MissingHookPermissions as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NonceReuse(inner) => {
                    <NonceReuse as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotController(inner) => {
                    <NotController as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotNode(inner) => {
                    <NotNode as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::NotUniswap(inner) => {
                    <NotUniswap as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::OnlyOncePerBlock(inner) => {
                    <OnlyOncePerBlock as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OrderAlreadyExecuted(inner) => {
                    <OrderAlreadyExecuted as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OutOfBoundRead(inner) => {
                    <OutOfBoundRead as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OutOfOrderOrDuplicatePairs(inner) => {
                    <OutOfOrderOrDuplicatePairs as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::Overflow(inner) => {
                    <Overflow as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
                Self::ReaderNotAtEnd(inner) => {
                    <ReaderNotAtEnd as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::WrongEndLiquidity(inner) => {
                    <WrongEndLiquidity as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::AssetsOutOfOrderOrNotUnique(inner) => {
                    <AssetsOutOfOrderOrNotUnique as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Expired(inner) => {
                    <Expired as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::FillingTooLittle(inner) => {
                    <FillingTooLittle as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::FillingTooMuch(inner) => {
                    <FillingTooMuch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidPoolKey(inner) => {
                    <InvalidPoolKey as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::InvalidSignature(inner) => {
                    <InvalidSignature as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::LimitViolated(inner) => {
                    <LimitViolated as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::MissingHookPermissions(inner) => {
                    <MissingHookPermissions as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NonceReuse(inner) => {
                    <NonceReuse as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NotController(inner) => {
                    <NotController as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NotNode(inner) => {
                    <NotNode as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::NotUniswap(inner) => {
                    <NotUniswap as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::OnlyOncePerBlock(inner) => {
                    <OnlyOncePerBlock as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OrderAlreadyExecuted(inner) => {
                    <OrderAlreadyExecuted as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OutOfBoundRead(inner) => {
                    <OutOfBoundRead as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OutOfOrderOrDuplicatePairs(inner) => {
                    <OutOfOrderOrDuplicatePairs as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::Overflow(inner) => {
                    <Overflow as alloy_sol_types::SolError>::abi_encode_raw(inner, out)
                }
                Self::ReaderNotAtEnd(inner) => {
                    <ReaderNotAtEnd as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::WrongEndLiquidity(inner) => {
                    <WrongEndLiquidity as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Angstrom`](self) contract instance.

See the [wrapper's documentation](`AngstromInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> AngstromInstance<T, P, N> {
        AngstromInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        uniV4PoolManager: alloy::sol_types::private::Address,
        governance: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<AngstromInstance<T, P, N>>,
    > {
        AngstromInstance::<T, P, N>::deploy(provider, uniV4PoolManager, governance)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        uniV4PoolManager: alloy::sol_types::private::Address,
        governance: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        AngstromInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, uniV4PoolManager, governance)
    }
    /**A [`Angstrom`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Angstrom`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct AngstromInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for AngstromInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("AngstromInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AngstromInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Angstrom`](self) contract instance.

See the [wrapper's documentation](`AngstromInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            uniV4PoolManager: alloy::sol_types::private::Address,
            governance: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<AngstromInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                uniV4PoolManager,
                governance,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            uniV4PoolManager: alloy::sol_types::private::Address,
            governance: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            uniV4PoolManager,
                            governance,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> AngstromInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> AngstromInstance<T, P, N> {
            AngstromInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AngstromInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`afterRemoveLiquidity`] function.
        pub fn afterRemoveLiquidity(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: <PoolKey as alloy::sol_types::SolType>::RustType,
            _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
            _3: <BalanceDelta as alloy::sol_types::SolType>::RustType,
            _4: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, afterRemoveLiquidityCall, N> {
            self.call_builder(
                &afterRemoveLiquidityCall {
                    _0,
                    _1,
                    _2,
                    _3,
                    _4,
                },
            )
        }
        ///Creates a new call builder for the [`beforeAddLiquidity`] function.
        pub fn beforeAddLiquidity(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: <PoolKey as alloy::sol_types::SolType>::RustType,
            _2: <ModifyLiquidityParams as alloy::sol_types::SolType>::RustType,
            _3: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, beforeAddLiquidityCall, N> {
            self.call_builder(
                &beforeAddLiquidityCall {
                    _0,
                    _1,
                    _2,
                    _3,
                },
            )
        }
        ///Creates a new call builder for the [`beforeInitialize`] function.
        pub fn beforeInitialize(
            &self,
            _0: alloy::sol_types::private::Address,
            poolKey: <PoolKey as alloy::sol_types::SolType>::RustType,
            _2: <alloy::sol_types::sol_data::Uint<
                160,
            > as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, beforeInitializeCall, N> {
            self.call_builder(
                &beforeInitializeCall {
                    _0,
                    poolKey,
                    _2,
                },
            )
        }
        ///Creates a new call builder for the [`eip712Domain`] function.
        pub fn eip712Domain(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, eip712DomainCall, N> {
            self.call_builder(&eip712DomainCall {})
        }
        ///Creates a new call builder for the [`execute`] function.
        pub fn execute(
            &self,
            encoded: <PadeEncoded as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, executeCall, N> {
            self.call_builder(&executeCall { encoded })
        }
        ///Creates a new call builder for the [`govToggleNodes`] function.
        pub fn govToggleNodes(
            &self,
            nodes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::SolCallBuilder<T, &P, govToggleNodesCall, N> {
            self.call_builder(&govToggleNodesCall { nodes })
        }
        ///Creates a new call builder for the [`govUpdateHalfSpread`] function.
        pub fn govUpdateHalfSpread(
            &self,
            newHalfSpreadRay: <alloy::sol_types::sol_data::Uint<
                96,
            > as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, govUpdateHalfSpreadCall, N> {
            self.call_builder(
                &govUpdateHalfSpreadCall {
                    newHalfSpreadRay,
                },
            )
        }
        ///Creates a new call builder for the [`halfSpreadRay`] function.
        pub fn halfSpreadRay(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, halfSpreadRayCall, N> {
            self.call_builder(&halfSpreadRayCall {})
        }
        ///Creates a new call builder for the [`invalidateNonce`] function.
        pub fn invalidateNonce(
            &self,
            nonce: u64,
        ) -> alloy_contract::SolCallBuilder<T, &P, invalidateNonceCall, N> {
            self.call_builder(&invalidateNonceCall { nonce })
        }
        ///Creates a new call builder for the [`lastBlockUpdated`] function.
        pub fn lastBlockUpdated(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, lastBlockUpdatedCall, N> {
            self.call_builder(&lastBlockUpdatedCall {})
        }
        ///Creates a new call builder for the [`unlockCallback`] function.
        pub fn unlockCallback(
            &self,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, unlockCallbackCall, N> {
            self.call_builder(&unlockCallbackCall { data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > AngstromInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
